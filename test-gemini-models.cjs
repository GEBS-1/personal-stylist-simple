// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Gemini
const https = require('https');
require('dotenv').config();

// –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const API_KEY = process.env.VITE_GEMINI_API_KEY;

if (!API_KEY) {
  console.log('‚ùå VITE_GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.log('üí° –î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª: VITE_GEMINI_API_KEY=your_key_here');
  process.exit(1);
}

// –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const modelsToTest = [
  'gemini-1.5-flash',
  'gemini-1.5-pro',
  'gemini-1.5-flash-exp',
  'gemini-1.5-pro-exp',
  'gemini-1.0-pro',
  'gemini-1.0-pro-latest',
  'gemini-1.5-flash-latest',
  'gemini-1.5-pro-latest'
];

function testModel(modelName) {
  return new Promise((resolve) => {
    const url = `https://generativelanguage.googleapis.com/v1beta/models/${modelName}:generateContent?key=${API_KEY}`;
    
    const postData = JSON.stringify({
      contents: [{
        parts: [{
          text: "Hello"
        }]
      }],
      generationConfig: {
        temperature: 0.1,
        maxOutputTokens: 10
      }
    });

    const options = {
      hostname: 'generativelanguage.googleapis.com',
      port: 443,
      path: `/v1beta/models/${modelName}:generateContent?key=${API_KEY}`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const req = https.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        if (res.statusCode === 200) {
          console.log(`‚úÖ ${modelName} - –†–∞–±–æ—Ç–∞–µ—Ç (${res.statusCode})`);
          resolve({ model: modelName, status: 'success', statusCode: res.statusCode });
        } else {
          console.log(`‚ùå ${modelName} - –û—à–∏–±–∫–∞ ${res.statusCode}: ${data}`);
          resolve({ model: modelName, status: 'error', statusCode: res.statusCode, error: data });
        }
      });
    });

    req.on('error', (err) => {
      console.log(`‚ùå ${modelName} - –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${err.message}`);
      resolve({ model: modelName, status: 'network_error', error: err.message });
    });

    req.setTimeout(10000, () => {
      console.log(`‚è∞ ${modelName} - –¢–∞–π–º–∞—É—Ç`);
      req.destroy();
      resolve({ model: modelName, status: 'timeout' });
    });

    req.write(postData);
    req.end();
  });
}

async function testAllModels() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π Gemini...\n');
  
  const results = [];
  
  for (const model of modelsToTest) {
    const result = await testModel(model);
    results.push(result);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('========================');
  
  const workingModels = results.filter(r => r.status === 'success');
  const errorModels = results.filter(r => r.status === 'error');
  const networkErrors = results.filter(r => r.status === 'network_error');
  const timeouts = results.filter(r => r.status === 'timeout');
  
  if (workingModels.length > 0) {
    console.log('\n‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–µ –º–æ–¥–µ–ª–∏:');
    workingModels.forEach(r => console.log(`   - ${r.model}`));
  }
  
  if (errorModels.length > 0) {
    console.log('\n‚ùå –ú–æ–¥–µ–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏:');
    errorModels.forEach(r => console.log(`   - ${r.model} (${r.statusCode})`));
  }
  
  if (networkErrors.length > 0) {
    console.log('\nüåê –û—à–∏–±–∫–∏ —Å–µ—Ç–∏:');
    networkErrors.forEach(r => console.log(`   - ${r.model}: ${r.error}`));
  }
  
  if (timeouts.length > 0) {
    console.log('\n‚è∞ –¢–∞–π–º–∞—É—Ç—ã:');
    timeouts.forEach(r => console.log(`   - ${r.model}`));
  }
  
  console.log(`\nüìà –ò—Ç–æ–≥–æ: ${workingModels.length}/${modelsToTest.length} –º–æ–¥–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç`);
  
  if (workingModels.length === 0) {
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ Gemini API');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Google AI Studio');
    console.log('4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API –∫–ª—é—á');
  }
}

testAllModels().catch(console.error); 