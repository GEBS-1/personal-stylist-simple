import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { 
  User, 
  Ruler, 
  Scale, 
  Heart,
  Sun,
  CheckCircle,
  AlertCircle
} from "lucide-react";

export interface BodyData {
  height: number;
  weight: number;
  gender: 'male' | 'female';
  season: 'spring' | 'summer' | 'autumn' | 'winter';
  shoeSize: number;
  bodyType: 'hourglass' | 'inverted-triangle' | 'triangle' | 'rectangle' | 'circle' | 'diamond';
}

interface ManualBodyInputProps {
  onComplete: (data: BodyData) => void;
  onContinue: () => void;
  analysisData?: BodyData | null;
}

const bodyTypes = [
  {
    id: 'hourglass',
    name: '–ü–µ—Å–æ—á–Ω—ã–µ —á–∞—Å—ã',
    icon: '‚è≥',
    description: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ç–∞–ª–∏—è, –≥—Ä—É–¥—å ‚âà –±–µ–¥—Ä–∞',
    characteristics: '–ü–ª–µ—á–∏ –∏ –±–µ–¥—Ä–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —à–∏—Ä–∏–Ω—ã, —Ç–∞–ª–∏—è —á–µ—Ç–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–∞'
  },
  {
    id: 'inverted-triangle',
    name: '–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫',
    icon: 'üîª',
    description: '–®–∏—Ä–æ–∫–∏–µ –ø–ª–µ—á–∏, —É–∑–∫–∏–µ –±–µ–¥—Ä–∞',
    characteristics: '–ü–ª–µ—á–∏ —à–∏—Ä–µ –±–µ–¥–µ—Ä, —Ç–∞–ª–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –æ—á–µ–Ω—å –≤—ã—Ä–∞–∂–µ–Ω–∞'
  },
  {
    id: 'triangle',
    name: '–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫',
    icon: 'üî∫',
    description: '–£–∑–∫–∏–µ –ø–ª–µ—á–∏, —à–∏—Ä–æ–∫–∏–µ –±–µ–¥—Ä–∞',
    characteristics: '–ë–µ–¥—Ä–∞ —à–∏—Ä–µ –ø–ª–µ—á, —Ç–∞–ª–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∞'
  },
  {
    id: 'rectangle',
    name: '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫',
    icon: '‚¨ú',
    description: '–ü—Ä—è–º–∞—è —Ñ–∏–≥—É—Ä–∞, –ø–ª–µ—á–∏ ‚âà —Ç–∞–ª–∏—è ‚âà –±–µ–¥—Ä–∞',
    characteristics: '–ü–ª–µ—á–∏, —Ç–∞–ª–∏—è –∏ –±–µ–¥—Ä–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —à–∏—Ä–∏–Ω—ã'
  },
  {
    id: 'circle',
    name: '–ö—Ä—É–≥',
    icon: '‚≠ï',
    description: '–ü–æ–ª–Ω–æ—Ç–∞ –≤ —Å—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏',
    characteristics: '–ü–æ–ª–Ω–æ—Ç–∞ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–∞–ª–∏–∏ –∏ –∂–∏–≤–æ—Ç–∞'
  },
  {
    id: 'diamond',
    name: '–†–æ–º–±',
    icon: 'üíé',
    description: '–®–∏—Ä–æ–∫–∞—è —Å—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å, —É–∑–∫–∏–µ –ø–ª–µ—á–∏ –∏ –±–µ–¥—Ä–∞',
    characteristics: '–®–∏—Ä–æ–∫–∞—è —Ç–∞–ª–∏—è, —É–∑–∫–∏–µ –ø–ª–µ—á–∏ –∏ –±–µ–¥—Ä–∞'
  }
];

export const ManualBodyInput = ({ onComplete, onContinue, analysisData }: ManualBodyInputProps) => {
  const [formData, setFormData] = useState<BodyData>({
    height: analysisData?.height || 165,
    weight: analysisData?.weight || 60,
    gender: analysisData?.gender || 'female',
    season: analysisData?.season || 'spring',
    shoeSize: analysisData?.shoeSize || 38,
    bodyType: analysisData?.bodyType || 'hourglass'
  });

  const [errors, setErrors] = useState<Partial<BodyData>>({});
  const [isValid, setIsValid] = useState(false);

  const validateForm = () => {
    const newErrors: Partial<BodyData> = {};

    if (!formData.height || formData.height < 120 || formData.height > 220) {
      newErrors.height = '–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 120 –¥–æ 220 —Å–º';
    }

    if (!formData.weight || formData.weight < 30 || formData.weight > 200) {
      newErrors.weight = '–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 200 –∫–≥';
    }

    if (!formData.shoeSize || formData.shoeSize < 30 || formData.shoeSize > 50) {
      newErrors.shoeSize = '–†–∞–∑–º–µ—Ä –æ–±—É–≤–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 50';
    }

    setErrors(newErrors);
    const isValidForm = Object.keys(newErrors).length === 0;
    setIsValid(isValidForm);
    return isValidForm;
  };

  const handleInputChange = (field: keyof BodyData, value: any) => {
    const newData = { ...formData, [field]: value };
    setFormData(newData);
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    setTimeout(() => validateForm(), 100);
  };

  const handleSaveAndContinue = () => {
    if (validateForm()) {
      onComplete(formData);
      onContinue();
    }
  };

  return (
    <div className="max-w-4xl mx-auto space-y-8">
      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <User className="w-5 h-5" />
            –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
          </CardTitle>
          <CardDescription>
            –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –æ–¥–µ–∂–¥—ã
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* –†–æ—Å—Ç */}
            <div className="space-y-2">
              <Label htmlFor="height" className="flex items-center gap-2">
                <Ruler className="w-4 h-4" />
                –†–æ—Å—Ç (—Å–º)
              </Label>
              <Input
                id="height"
                type="number"
                value={formData.height}
                onChange={(e) => handleInputChange('height', Number(e.target.value))}
                placeholder="165"
                className={errors.height ? 'border-red-500' : ''}
              />
              {errors.height && (
                <p className="text-sm text-red-500 flex items-center gap-1">
                  <AlertCircle className="w-4 h-4" />
                  {errors.height}
                </p>
              )}
            </div>

            {/* –í–µ—Å */}
            <div className="space-y-2">
              <Label htmlFor="weight" className="flex items-center gap-2">
                <Scale className="w-4 h-4" />
                –í–µ—Å (–∫–≥)
              </Label>
              <Input
                id="weight"
                type="number"
                value={formData.weight}
                onChange={(e) => handleInputChange('weight', Number(e.target.value))}
                placeholder="60"
                className={errors.weight ? 'border-red-500' : ''}
              />
              {errors.weight && (
                <p className="text-sm text-red-500 flex items-center gap-1">
                  <AlertCircle className="w-4 h-4" />
                  {errors.weight}
                </p>
              )}
            </div>

            {/* –ü–æ–ª */}
            <div className="space-y-2">
              <Label htmlFor="gender" className="flex items-center gap-2">
                <Heart className="w-4 h-4" />
                –ü–æ–ª
              </Label>
              <Select value={formData.gender} onValueChange={(value) => handleInputChange('gender', value)}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="female">–ñ–µ–Ω—Å–∫–∏–π</SelectItem>
                  <SelectItem value="male">–ú—É–∂—Å–∫–æ–π</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* –†–∞–∑–º–µ—Ä –æ–±—É–≤–∏ */}
            <div className="space-y-2">
              <Label htmlFor="shoeSize" className="flex items-center gap-2">
                <User className="w-4 h-4" />
                –†–∞–∑–º–µ—Ä –æ–±—É–≤–∏
              </Label>
              <Input
                id="shoeSize"
                type="number"
                value={formData.shoeSize}
                onChange={(e) => handleInputChange('shoeSize', Number(e.target.value))}
                placeholder="38"
                className={errors.shoeSize ? 'border-red-500' : ''}
              />
              {errors.shoeSize && (
                <p className="text-sm text-red-500 flex items-center gap-1">
                  <AlertCircle className="w-4 h-4" />
                  {errors.shoeSize}
                </p>
              )}
            </div>

            {/* –°–µ–∑–æ–Ω */}
            <div className="space-y-2">
              <Label htmlFor="season" className="flex items-center gap-2">
                <Sun className="w-4 h-4" />
                –õ—é–±–∏–º—ã–π —Å–µ–∑–æ–Ω
              </Label>
              <Select value={formData.season} onValueChange={(value) => handleInputChange('season', value)}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="spring">–í–µ—Å–Ω–∞</SelectItem>
                  <SelectItem value="summer">–õ–µ—Ç–æ</SelectItem>
                  <SelectItem value="autumn">–û—Å–µ–Ω—å</SelectItem>
                  <SelectItem value="winter">–ó–∏–º–∞</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –¢–∏–ø —Ñ–∏–≥—É—Ä—ã */}
      <Card>
        <CardHeader>
          <CardTitle>–¢–∏–ø —Ñ–∏–≥—É—Ä—ã</CardTitle>
          <CardDescription>
            –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–≥—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∞—à—É
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {bodyTypes.map((type) => (
              <button
                key={type.id}
                onClick={() => handleInputChange('bodyType', type.id)}
                className={`p-4 rounded-lg border-2 text-left transition-all hover:shadow-md ${
                  formData.bodyType === type.id
                    ? 'border-primary bg-primary/5'
                    : 'border-border hover:border-primary/50'
                }`}
              >
                <div className="flex items-center gap-3 mb-2">
                  <span className="text-2xl">{type.icon}</span>
                  <div>
                    <div className="font-medium">{type.name}</div>
                    <div className="text-sm text-muted-foreground">{type.description}</div>
                  </div>
                </div>
                <p className="text-xs text-muted-foreground">{type.characteristics}</p>
              </button>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
      <Card>
        <CardHeader>
          <CardTitle>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</CardTitle>
          <CardDescription>
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            <div className="space-y-1">
              <div className="text-sm text-muted-foreground">–†–æ—Å—Ç</div>
              <div className="font-medium">{formData.height} —Å–º</div>
            </div>
            <div className="space-y-1">
              <div className="text-sm text-muted-foreground">–í–µ—Å</div>
              <div className="font-medium">{formData.weight} –∫–≥</div>
            </div>
            <div className="space-y-1">
              <div className="text-sm text-muted-foreground">–ü–æ–ª</div>
              <div className="font-medium">
                {formData.gender === 'female' ? '–ñ–µ–Ω—Å–∫–∏–π' : '–ú—É–∂—Å–∫–æ–π'}
              </div>
            </div>
            <div className="space-y-1">
              <div className="text-sm text-muted-foreground">–†–∞–∑–º–µ—Ä –æ–±—É–≤–∏</div>
              <div className="font-medium">{formData.shoeSize}</div>
            </div>
            <div className="space-y-1">
              <div className="text-sm text-muted-foreground">–°–µ–∑–æ–Ω</div>
              <div className="font-medium">
                {formData.season === 'spring' && '–í–µ—Å–Ω–∞'}
                {formData.season === 'summer' && '–õ–µ—Ç–æ'}
                {formData.season === 'autumn' && '–û—Å–µ–Ω—å'}
                {formData.season === 'winter' && '–ó–∏–º–∞'}
              </div>
            </div>
            <div className="space-y-1">
              <div className="text-sm text-muted-foreground">–¢–∏–ø —Ñ–∏–≥—É—Ä—ã</div>
              <div className="font-medium">
                {bodyTypes.find(t => t.id === formData.bodyType)?.name}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="flex justify-center">
        <Button
          onClick={handleSaveAndContinue}
          disabled={!isValid}
          className="min-w-48"
        >
          <CheckCircle className="w-4 h-4 mr-2" />
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        </Button>
      </div>

      {/* –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
      {!isValid && Object.keys(errors).length > 0 && (
        <Card className="border-red-200 bg-red-50">
          <CardContent className="pt-6">
            <div className="flex items-center gap-2 text-red-600">
              <AlertCircle className="w-4 h-4" />
              <span className="text-sm">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ</span>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}; 