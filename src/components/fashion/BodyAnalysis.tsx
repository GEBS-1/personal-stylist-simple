import { useState, useRef, useCallback } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { useToast } from "@/components/ui/use-toast";
import { 
  Camera, 
  Upload, 
  Calculator,
  User,
  Loader2,
  CheckCircle,
  AlertCircle,
  ChevronRight
} from "lucide-react";
import { PhotoAnalyzer } from "./PhotoAnalyzer";

interface BodyMeasurements {
  height: number;
  weight: number;
  chest: number;
  waist: number;
  hips: number;
  shoulders: number;
}

type BodyType = 'apple' | 'pear' | 'hourglass' | 'rectangle' | 'inverted-triangle';

interface BodyAnalysisProps {
  onComplete?: (data: { bodyType: BodyType; measurements: BodyMeasurements }) => void;
  onContinue?: () => void;
  analysisData?: any;
}

const bodyTypeDescriptions = {
  apple: "–Ø–±–ª–æ–∫–æ - –ø–æ–ª–Ω–æ—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–∞–ª–∏–∏",
  pear: "–ì—Ä—É—à–∞ - —É–∑–∫–∏–µ –ø–ª–µ—á–∏, —à–∏—Ä–æ–∫–∏–µ –±–µ–¥—Ä–∞",
  hourglass: "–ü–µ—Å–æ—á–Ω—ã–µ —á–∞—Å—ã - –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–∏–≥—É—Ä–∞",
  rectangle: "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ - —Ä–∞–≤–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏",
  'inverted-triangle': "–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ - —à–∏—Ä–æ–∫–∏–µ –ø–ª–µ—á–∏"
};

export const BodyAnalysis = ({ onComplete, onContinue, analysisData }: BodyAnalysisProps) => {
  const [activeTab, setActiveTab] = useState<'photo' | 'manual'>('photo');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisComplete, setAnalysisComplete] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [bodyType, setBodyType] = useState<BodyType | null>(analysisData?.bodyType || null);
  const [measurements, setMeasurements] = useState<BodyMeasurements>({
    height: analysisData?.measurements?.height || 0,
    weight: analysisData?.measurements?.weight || 0,
    chest: analysisData?.measurements?.chest || 0,
    waist: analysisData?.measurements?.waist || 0,
    hips: analysisData?.measurements?.hips || 0,
    shoulders: analysisData?.measurements?.shoulders || 0
  });
  const [isEditing, setIsEditing] = useState(false);
  
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  const analyzeBodyType = useCallback((measures: BodyMeasurements): BodyType => {
    const waistToHipRatio = measures.waist / measures.hips;
    const shoulderToHipRatio = measures.shoulders / measures.hips;
    const bustToWaistRatio = measures.chest / measures.waist;
    
    // –ê–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã
    if (waistToHipRatio > 0.85) {
      return 'apple';
    } else if (shoulderToHipRatio > 1.05) {
      return 'inverted-triangle';
    } else if (shoulderToHipRatio < 0.95 && bustToWaistRatio < 1.3) {
      return 'pear';
    } else if (
      shoulderToHipRatio >= 0.95 && 
      shoulderToHipRatio <= 1.05 && 
      bustToWaistRatio >= 1.3
    ) {
      return 'hourglass';
    } else {
      return 'rectangle';
    }
  }, []);

  const handlePhotoUpload = useCallback(async (file: File) => {
    setIsAnalyzing(true);
    setUploadProgress(0);
    
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ
      const interval = setInterval(() => {
        setUploadProgress(prev => {
          if (prev >= 100) {
            clearInterval(interval);
            return 100;
          }
          return prev + 10;
        });
      }, 200);

      // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è "–∞–Ω–∞–ª–∏–∑–∞"
      await new Promise(resolve => setTimeout(resolve, 2500));
      
      // –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
      const mockMeasurements: BodyMeasurements = {
        height: 165,
        weight: 60,
        chest: 88,
        waist: 68,
        hips: 92,
        shoulders: 86
      };
      
      setMeasurements(mockMeasurements);
      const detectedBodyType = analyzeBodyType(mockMeasurements);
      setBodyType(detectedBodyType);
      setAnalysisComplete(true);
      
      toast({
        title: "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω",
        description: `–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Ñ–∏–≥—É—Ä—ã: ${bodyTypeDescriptions[detectedBodyType]}`,
      });
      
      // –í—ã–∑—ã–≤–∞–µ–º callback —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–∞–ª–∏–∑–∞
      onComplete?.({ bodyType: detectedBodyType, measurements: mockMeasurements });
      
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞",
        description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ",
        variant: "destructive",
      });
    } finally {
      setIsAnalyzing(false);
    }
  }, [analyzeBodyType, toast]);

  const handleFileSelect = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      if (file.type.startsWith('image/')) {
        handlePhotoUpload(file);
      } else {
        toast({
          title: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
          description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
          variant: "destructive",
        });
      }
    }
  }, [handlePhotoUpload, toast]);

  const handleMeasurementChange = useCallback((field: keyof BodyMeasurements, value: string) => {
    const numValue = parseFloat(value) || 0;
    const newMeasurements = { ...measurements, [field]: numValue };
    setMeasurements(newMeasurements);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π
    if (Object.values(newMeasurements).every(val => val > 0)) {
      const detectedBodyType = analyzeBodyType(newMeasurements);
      setBodyType(detectedBodyType);
      setAnalysisComplete(true);
      
      // –í—ã–∑—ã–≤–∞–µ–º callback —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–∞–ª–∏–∑–∞
      onComplete?.({ bodyType: detectedBodyType, measurements: newMeasurements });
    }
  }, [measurements, analyzeBodyType]);

  return (
    <div className="max-w-4xl mx-auto">
      <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as any)} className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="photo" className="flex items-center gap-2">
            <Camera className="w-4 h-4" />
            –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ
          </TabsTrigger>
          <TabsTrigger value="manual" className="flex items-center gap-2">
            <Calculator className="w-4 h-4" />
            –†—É—á–Ω–æ–π –≤–≤–æ–¥
          </TabsTrigger>
        </TabsList>

        <TabsContent value="photo" className="space-y-6">
          <PhotoAnalyzer 
            onAnalysisComplete={(measurements, bodyType, gender) => {
              setMeasurements({
                height: measurements.height,
                weight: 0, // –í–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —Ñ–æ—Ç–æ
                chest: measurements.chest,
                waist: measurements.waist,
                hips: measurements.hips,
                shoulders: measurements.shoulders
              });
              setBodyType(bodyType as BodyType);
              setAnalysisComplete(true);
              
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–µ
              if (gender && gender !== 'unknown') {
                console.log(`üë§ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ–ª: ${gender === 'male' ? '–º—É–∂—Å–∫–æ–π' : '–∂–µ–Ω—Å–∫–∏–π'}`);
              }
              
              // –í—ã–∑—ã–≤–∞–µ–º callback —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
              onComplete?.({
                bodyType: bodyType as BodyType,
                measurements: {
                  height: measurements.height,
                  weight: 0,
                  chest: measurements.chest,
                  waist: measurements.waist,
                  hips: measurements.hips,
                  shoulders: measurements.shoulders
                }
              });
            }}
          />
        </TabsContent>

        <TabsContent value="manual" className="space-y-6">
          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Calculator className="w-5 h-5" />
                –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
              </CardTitle>
              <CardDescription>
                –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid md:grid-cols-2 gap-6">
                <div className="space-y-4">
                                     <div>
                     <Label htmlFor="height">–†–æ—Å—Ç (—Å–º) *</Label>
                     <Input
                       id="height"
                       type="number"
                       placeholder="165"
                       value={measurements.height || ''}
                       onChange={(e) => handleMeasurementChange('height', e.target.value)}
                     />
                   </div>
                   <div>
                     <Label htmlFor="weight">–í–µ—Å (–∫–≥) *</Label>
                     <Input
                       id="weight"
                       type="number"
                       placeholder="60"
                       value={measurements.weight || ''}
                       onChange={(e) => handleMeasurementChange('weight', e.target.value)}
                     />
                   </div>
                  <div>
                    <Label htmlFor="chest">–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ (—Å–º)</Label>
                    <Input
                      id="chest"
                      type="number"
                      placeholder="88"
                      value={measurements.chest || ''}
                      onChange={(e) => handleMeasurementChange('chest', e.target.value)}
                    />
                  </div>
                </div>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="waist">–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ (—Å–º)</Label>
                    <Input
                      id="waist"
                      type="number"
                      placeholder="68"
                      value={measurements.waist || ''}
                      onChange={(e) => handleMeasurementChange('waist', e.target.value)}
                    />
                  </div>
                  <div>
                    <Label htmlFor="hips">–û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä (—Å–º)</Label>
                    <Input
                      id="hips"
                      type="number"
                      placeholder="92"
                      value={measurements.hips || ''}
                      onChange={(e) => handleMeasurementChange('hips', e.target.value)}
                    />
                  </div>
                  <div>
                    <Label htmlFor="shoulders">–®–∏—Ä–∏–Ω–∞ –ø–ª–µ—á (—Å–º)</Label>
                    <Input
                      id="shoulders"
                      type="number"
                      placeholder="86"
                      value={measurements.shoulders || ''}
                      onChange={(e) => handleMeasurementChange('shoulders', e.target.value)}
                    />
                                     </div>
                 </div>
               </div>
                               <p className="text-sm text-muted-foreground">* –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã</p>

                {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ */}
                <div className="flex justify-center pt-4">
                  <Button
                    onClick={() => {
                      const detectedBodyType = analyzeBodyType(measurements);
                      setBodyType(detectedBodyType);
                      setAnalysisComplete(true);
                      onComplete?.({ bodyType: detectedBodyType, measurements });
                    }}
                    disabled={measurements.height <= 0 || measurements.weight <= 0}
                    className="px-8"
                  >
                    –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                    <ChevronRight className="w-4 h-4 ml-2" />
                  </Button>
                </div>
             </CardContent>
           </Card>
        </TabsContent>
      </Tabs>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ */}
      {bodyType && !isEditing && (
        <Card className="glass-card mt-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <User className="w-5 h-5" />
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="text-center">
              <Badge variant="default" className="text-lg px-6 py-2 mb-4">
                {bodyTypeDescriptions[bodyType]}
              </Badge>
              <p className="text-muted-foreground">
                –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Ñ–∏–≥—É—Ä—ã
              </p>
            </div>
            
            <div className="grid md:grid-cols-3 gap-4">
              <Card>
                <CardContent className="pt-6 text-center">
                  <div className="text-2xl font-bold text-primary">{measurements.height} —Å–º</div>
                  <div className="text-sm text-muted-foreground">–†–æ—Å—Ç</div>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="pt-6 text-center">
                  <div className="text-2xl font-bold text-primary">{measurements.weight} –∫–≥</div>
                  <div className="text-sm text-muted-foreground">–í–µ—Å</div>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="pt-6 text-center">
                  <div className="text-2xl font-bold text-primary">
                    {Math.round((measurements.waist / measurements.hips) * 100) / 100}
                  </div>
                  <div className="text-sm text-muted-foreground">–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¢/–ë</div>
                </CardContent>
              </Card>
            </div>

            <div className="bg-muted/50 rounded-lg p-4">
              <h4 className="font-medium mb-2">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã:</h4>
              <ul className="text-sm text-muted-foreground space-y-1">
                {bodyType === 'apple' && (
                  <>
                    <li>‚Ä¢ –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –Ω–æ–≥–∏ –∏ –¥–µ–∫–æ–ª—å—Ç–µ</li>
                    <li>‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–±—ä–µ–º–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–∞–ª–∏–∏</li>
                    <li>‚Ä¢ V-–æ–±—Ä–∞–∑–Ω—ã–µ –≤—ã—Ä–µ–∑—ã –≤–∏–∑—É–∞–ª—å–Ω–æ —É–¥–ª–∏–Ω—è—é—Ç —Å–∏–ª—É—ç—Ç</li>
                  </>
                )}
                {bodyType === 'pear' && (
                  <>
                    <li>‚Ä¢ –£–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –æ–±—ä–µ–º –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–ª–µ—á</li>
                    <li>‚Ä¢ –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å —Ç–µ–ª–∞</li>
                    <li>‚Ä¢ –¢–µ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Å–Ω–∏–∑—É, —Å–≤–µ—Ç–ª—ã–µ —Å–≤–µ—Ä—Ö—É</li>
                  </>
                )}
                {bodyType === 'hourglass' && (
                  <>
                    <li>‚Ä¢ –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π—Ç–µ —Ç–∞–ª–∏—é</li>
                    <li>‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä—è–º–æ–≥–æ –∫—Ä–æ—è</li>
                    <li>‚Ä¢ –û–±–ª–µ–≥–∞—é—â–∏–µ —Å–∏–ª—É—ç—Ç—ã –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç</li>
                  </>
                )}
                {bodyType === 'rectangle' && (
                  <>
                    <li>‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–ª–ª—é–∑–∏—é —Ç–∞–ª–∏–∏</li>
                    <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—è—Å–∞ –∏ –∞–∫—Ü–µ–Ω—Ç—ã</li>
                    <li>‚Ä¢ –ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç –æ–±—ä–µ–º–∞</li>
                  </>
                )}
                {bodyType === 'inverted-triangle' && (
                  <>
                    <li>‚Ä¢ –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å —Ç–µ–ª–∞</li>
                    <li>‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–±—ä–µ–º–∞ –≤ –ø–ª–µ—á–∞—Ö</li>
                    <li>‚Ä¢ –†–∞—Å–∫–ª–µ—à–µ–Ω–Ω—ã–µ –Ω–∏–∑—ã –±–∞–ª–∞–Ω—Å–∏—Ä—É—é—Ç —Å–∏–ª—É—ç—Ç</li>
                  </>
                )}
              </ul>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="flex justify-center gap-4 pt-4">
              <Button 
                variant="outline"
                onClick={() => setIsEditing(true)}
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
              </Button>
              <Button 
                onClick={() => {
                  toast({
                    title: "–î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã",
                    description: "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å—Ç–∏–ª–µ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π",
                  });
                  onComplete?.({ bodyType, measurements });
                  onContinue?.();
                }}
                className="px-8"
              >
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                <ChevronRight className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {isEditing && (
        <Card className="glass-card mt-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Calculator className="w-5 h-5" />
              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            </CardTitle>
            <CardDescription>
              –í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
            </CardDescription>
          </CardHeader>
                     <CardContent className="space-y-6">
             <div className="grid md:grid-cols-2 gap-4">
               <div>
                 <Label htmlFor="edit-height">–†–æ—Å—Ç (—Å–º) *</Label>
                 <Input
                   id="edit-height"
                   type="number"
                   placeholder="170"
                   value={measurements.height || ''}
                   onChange={(e) => setMeasurements(prev => ({ ...prev, height: Number(e.target.value) }))}
                 />
               </div>
               <div>
                 <Label htmlFor="edit-weight">–í–µ—Å (–∫–≥) *</Label>
                 <Input
                   id="edit-weight"
                   type="number"
                   placeholder="65"
                   value={measurements.weight || ''}
                   onChange={(e) => setMeasurements(prev => ({ ...prev, weight: Number(e.target.value) }))}
                 />
               </div>
               <div>
                 <Label htmlFor="edit-chest">–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ (—Å–º)</Label>
                 <Input
                   id="edit-chest"
                   type="number"
                   placeholder="88"
                   value={measurements.chest || ''}
                   onChange={(e) => setMeasurements(prev => ({ ...prev, chest: Number(e.target.value) }))}
                 />
               </div>
               <div>
                 <Label htmlFor="edit-waist">–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ (—Å–º)</Label>
                 <Input
                   id="edit-waist"
                   type="number"
                   placeholder="68"
                   value={measurements.waist || ''}
                   onChange={(e) => setMeasurements(prev => ({ ...prev, waist: Number(e.target.value) }))}
                 />
               </div>
               <div>
                 <Label htmlFor="edit-hips">–û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä (—Å–º)</Label>
                 <Input
                   id="edit-hips"
                   type="number"
                   placeholder="92"
                   value={measurements.hips || ''}
                   onChange={(e) => setMeasurements(prev => ({ ...prev, hips: Number(e.target.value) }))}
                 />
               </div>
               <div>
                 <Label htmlFor="edit-shoulders">–®–∏—Ä–∏–Ω–∞ –ø–ª–µ—á (—Å–º)</Label>
                 <Input
                   id="edit-shoulders"
                   type="number"
                   placeholder="86"
                   value={measurements.shoulders || ''}
                   onChange={(e) => setMeasurements(prev => ({ ...prev, shoulders: Number(e.target.value) }))}
                 />
               </div>
             </div>
             <p className="text-sm text-muted-foreground">* –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è</p>

            <div className="flex justify-center gap-4 pt-4">
              <Button 
                variant="outline"
                onClick={() => {
                  setIsEditing(false);
                  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø —Ñ–∏–≥—É—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                  const newBodyType = analyzeBodyType(measurements);
                  setBodyType(newBodyType);
                }}
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
              </Button>
              <Button 
                variant="outline"
                onClick={() => setIsEditing(false)}
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};