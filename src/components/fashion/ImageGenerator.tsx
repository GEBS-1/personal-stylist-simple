import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { 
  Loader2, 
  RefreshCw, 
  CheckCircle, 
  AlertCircle, 
  Info, 
  Image as ImageIcon,
  Download,
  Share2,
  Edit3,
  Sparkles
} from 'lucide-react';
import { imageGenerationService, ImageGenerationRequest, ImageGenerationResponse } from '@/services/imageGenerationService';
import { env } from '@/config/env';

interface ImageGeneratorProps {
  analysisData: any;
  onImageGenerated?: (image: ImageGenerationResponse) => void;
}

export const ImageGenerator: React.FC<ImageGeneratorProps> = ({ 
  analysisData, 
  onImageGenerated 
}) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedImage, setGeneratedImage] = useState<ImageGenerationResponse | null>(null);
  const [currentPrompt, setCurrentPrompt] = useState('');
  const [customPrompt, setCustomPrompt] = useState('');
  const [imageSettings, setImageSettings] = useState({
    style: 'realistic' as const,
    quality: 'high' as const,
    size: '1024x1024' as const,
    aspectRatio: '1:1' as const
  });
  const [serviceStatus, setServiceStatus] = useState<'loading' | 'available' | 'error' | 'unavailable'>('loading');

  useEffect(() => {
    initializeImageService();
    generateInitialPrompt();
  }, [analysisData]);

  const initializeImageService = async () => {
    console.log('üîç Initializing Image Generation Service...');
    console.log('üîë Environment check:', {
      env: {
        clientId: import.meta.env.VITE_GIGACHAT_CLIENT_ID ? '‚úÖ Present' : '‚ùå Missing',
        clientSecret: import.meta.env.VITE_GIGACHAT_CLIENT_SECRET ? '‚úÖ Present' : '‚ùå Missing'
      }
    });
    
    try {
      const availableProviders = imageGenerationService.getAvailableProviders();
      const currentProvider = imageGenerationService.getCurrentProvider();
      
      console.log(`‚úÖ Available providers: ${availableProviders.join(', ')}`);
      console.log(`üéØ Current provider: ${currentProvider}`);
      
      if (availableProviders.length > 0) {
        setServiceStatus('available');
      } else {
        setServiceStatus('unavailable');
      }
    } catch (error) {
      console.error('Failed to initialize Image Service:', error);
      setServiceStatus('error');
    }
  };

  const generateInitialPrompt = () => {
    if (!analysisData) return;

    const { bodyType, stylePreferences, colorPreferences, gender, occasion } = analysisData;
    
    let prompt = `–°—Ç–∏–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ ${gender === 'female' ? '–∂–µ–Ω—Å–∫–æ–≥–æ' : '–º—É–∂—Å–∫–æ–≥–æ'} –ø–æ–ª–∞`;
    
    if (bodyType) {
      prompt += ` —Å —Ç–∏–ø–æ–º —Ñ–∏–≥—É—Ä—ã "${bodyType}"`;
    }
    
    if (stylePreferences && stylePreferences.length > 0) {
      prompt += ` –≤ —Å—Ç–∏–ª–µ ${stylePreferences.join(', ')}`;
    }
    
    if (colorPreferences && colorPreferences.length > 0) {
      prompt += ` –≤ —Ü–≤–µ—Ç–∞—Ö ${colorPreferences.join(', ')}`;
    }
    
    if (occasion) {
      prompt += ` –¥–ª—è ${occasion}`;
    }
    
    prompt += '. –û–¥–µ–∂–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π, —Å—Ç–∏–ª—å–Ω–æ–π –∏ —Ö–æ—Ä–æ—à–æ —Å–∏–¥–µ—Ç—å –ø–æ —Ñ–∏–≥—É—Ä–µ.';
    
    setCurrentPrompt(prompt);
    setCustomPrompt(prompt);
  };

  const generateImage = async () => {
    if (!customPrompt.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      return;
    }

    setIsGenerating(true);
    setGeneratedImage(null);

    try {
      const request: ImageGenerationRequest = {
        prompt: customPrompt,
        style: imageSettings.style,
        quality: imageSettings.quality,
        size: imageSettings.size,
        aspectRatio: imageSettings.aspectRatio
      };

      console.log('üé® Generating image with request:', request);
      
      const result = await imageGenerationService.generateImage(request);
      setGeneratedImage(result);
      
      if (onImageGenerated) {
        onImageGenerated(result);
      }
      
      console.log('‚úÖ Image generation completed:', result);
      
    } catch (error) {
      console.error('‚ùå Image generation failed:', error);
      setGeneratedImage({
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const regenerateImage = () => {
    setGeneratedImage(null);
    generateImage();
  };

  const editPrompt = () => {
    setCustomPrompt(currentPrompt);
  };

  const downloadImage = () => {
    if (!generatedImage?.imageUrl) return;
    
    const link = document.createElement('a');
    link.href = generatedImage.imageUrl;
    link.download = `stylist-image-${Date.now()}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const shareImage = async () => {
    if (!generatedImage?.imageUrl) return;
    
    try {
      if (navigator.share) {
        await navigator.share({
          title: '–ú–æ–π —Å—Ç–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–∑',
          text: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –æ–±—Ä–∞–∑ —Å–æ–∑–¥–∞–ª –¥–ª—è –º–µ–Ω—è –ò–ò-—Å—Ç–∏–ª–∏—Å—Ç!',
          url: generatedImage.imageUrl
        });
      } else {
        // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Share API
        await navigator.clipboard.writeText(generatedImage.imageUrl);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        alert('–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
      }
    } catch (error) {
      console.error('Failed to share image:', error);
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'available': return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'unavailable': return <Info className="w-4 h-4 text-blue-500" />;
      case 'error': return <AlertCircle className="w-4 h-4 text-red-500" />;
      default: return <Loader2 className="w-4 h-4 text-gray-500 animate-spin" />;
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'available': return '–î–æ—Å—Ç—É–ø–µ–Ω';
      case 'unavailable': return '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
      case 'error': return '–û—à–∏–±–∫–∞';
      default: return '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
    }
  };

  if (serviceStatus === 'unavailable') {
    return (
      <Card className="w-full">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <ImageIcon className="w-5 h-5" />
            –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8">
            <AlertCircle className="w-12 h-12 text-blue-500 mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</h3>
            <p className="text-gray-600 mb-4">
              –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å GigaChat API
            </p>
            <div className="text-sm text-gray-500">
              <p>–î–æ–±–∞–≤—å—Ç–µ –≤ —Ñ–∞–π–ª .env:</p>
              <code className="bg-gray-100 px-2 py-1 rounded">
                VITE_GIGACHAT_CLIENT_ID=–≤–∞—à_–∫–ª—é—á
              </code>
              <br />
              <code className="bg-gray-100 px-2 py-1 rounded">
                VITE_GIGACHAT_CLIENT_SECRET=–≤–∞—à_—Å–µ–∫—Ä–µ—Ç
              </code>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <ImageIcon className="w-5 h-5" />
          –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
          <Badge variant="secondary" className="ml-2">
            {getStatusIcon(serviceStatus)}
            {getStatusText(serviceStatus)}
          </Badge>
        </CardTitle>
      </CardHeader>
      
      <CardContent className="space-y-6">
        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
        <div className="grid grid-cols-2 gap-4">
          <div>
            <Label htmlFor="style">–°—Ç–∏–ª—å</Label>
            <Select 
              value={imageSettings.style} 
              onValueChange={(value: any) => setImageSettings(prev => ({ ...prev, style: value }))}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="realistic">–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π</SelectItem>
                <SelectItem value="artistic">–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π</SelectItem>
                <SelectItem value="fashion">–ú–æ–¥–Ω—ã–π</SelectItem>
                <SelectItem value="casual">–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <div>
            <Label htmlFor="quality">–ö–∞—á–µ—Å—Ç–≤–æ</Label>
            <Select 
              value={imageSettings.quality} 
              onValueChange={(value: any) => setImageSettings(prev => ({ ...prev, quality: value }))}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="standard">–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ</SelectItem>
                <SelectItem value="high">–í—ã—Å–æ–∫–æ–µ</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <div>
            <Label htmlFor="size">–†–∞–∑–º–µ—Ä</Label>
            <Select 
              value={imageSettings.size} 
              onValueChange={(value: any) => setImageSettings(prev => ({ ...prev, size: value }))}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="1024x1024">1024x1024</SelectItem>
                <SelectItem value="1792x1024">1792x1024</SelectItem>
                <SelectItem value="1024x1792">1024x1792</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <div>
            <Label htmlFor="aspectRatio">–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ</Label>
            <Select 
              value={imageSettings.aspectRatio} 
              onValueChange={(value: any) => setImageSettings(prev => ({ ...prev, aspectRatio: value }))}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="1:1">–ö–≤–∞–¥—Ä–∞—Ç (1:1)</SelectItem>
                <SelectItem value="16:9">–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π (16:9)</SelectItem>
                <SelectItem value="9:16">–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π (9:16)</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <Separator />

        {/* –ü—Ä–æ–º–ø—Ç */}
        <div>
          <Label htmlFor="prompt">–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞</Label>
          <div className="flex gap-2 mb-2">
            <Button 
              variant="outline" 
              size="sm" 
              onClick={editPrompt}
              className="flex items-center gap-2"
            >
              <Edit3 className="w-4 h-4" />
              –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π
            </Button>
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => setCustomPrompt('')}
              className="flex items-center gap-2"
            >
              <RefreshCw className="w-4 h-4" />
              –û—á–∏—Å—Ç–∏—Ç—å
            </Button>
          </div>
          <Textarea
            id="prompt"
            placeholder="–û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –æ–±—Ä–∞–∑..."
            value={customPrompt}
            onChange={(e) => setCustomPrompt(e.target.value)}
            rows={4}
            className="resize-none"
          />
          <p className="text-sm text-gray-500 mt-1">
            –û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –æ–±—Ä–∞–∑. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç–∏–ª—å, —Ü–≤–µ—Ç–∞, –¥–µ—Ç–∞–ª–∏ –æ–¥–µ–∂–¥—ã.
          </p>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
        <Button 
          onClick={generateImage} 
          disabled={isGenerating || !customPrompt.trim() || serviceStatus !== 'available'}
          className="w-full"
          size="lg"
        >
          {isGenerating ? (
            <>
              <Loader2 className="w-4 h-4 mr-2 animate-spin" />
              –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...
            </>
          ) : (
            <>
              <Sparkles className="w-4 h-4 mr-2" />
              –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑
            </>
          )}
        </Button>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
        {generatedImage && (
          <div className="space-y-4">
            <Separator />
            
            {generatedImage.success ? (
              <div className="space-y-4">
                <div className="text-center">
                  <h3 className="text-lg font-semibold mb-2">–û–±—Ä–∞–∑ —Å–æ–∑–¥–∞–Ω! ‚ú®</h3>
                  <p className="text-gray-600">–í–∞—à —Å—Ç–∏–ª—å–Ω—ã–π –ª—É–∫ –≥–æ—Ç–æ–≤</p>
                </div>
                
                <div className="relative group">
                  <img
                    src={generatedImage.imageUrl}
                    alt="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑"
                    className="w-full h-auto rounded-lg shadow-lg"
                  />
                  <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-200 rounded-lg flex items-center justify-center">
                    <div className="opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex gap-2">
                      <Button
                        variant="secondary"
                        size="sm"
                        onClick={downloadImage}
                        className="bg-white text-black hover:bg-gray-100"
                      >
                        <Download className="w-4 h-4 mr-1" />
                        –°–∫–∞—á–∞—Ç—å
                      </Button>
                      <Button
                        variant="secondary"
                        size="sm"
                        onClick={shareImage}
                        className="bg-white text-black hover:bg-gray-100"
                      >
                        <Share2 className="w-4 h-4 mr-1" />
                        –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                      </Button>
                    </div>
                  </div>
                </div>
                
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    onClick={regenerateImage}
                    className="flex-1"
                  >
                    <RefreshCw className="w-4 h-4 mr-2" />
                    –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() => setGeneratedImage(null)}
                    className="flex-1"
                  >
                    –°–∫—Ä—ã—Ç—å
                  </Button>
                </div>
                
                {generatedImage.usage && (
                  <div className="text-xs text-gray-500 text-center">
                    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {generatedImage.usage.totalTokens}
                  </div>
                )}
              </div>
            ) : (
              <div className="text-center py-4">
                <AlertCircle className="w-12 h-12 text-red-500 mx-auto mb-2" />
                <h3 className="text-lg font-semibold text-red-600 mb-2">–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</h3>
                <p className="text-gray-600 mb-4">{generatedImage.error}</p>
                <Button
                  variant="outline"
                  onClick={generateImage}
                  className="flex items-center gap-2"
                >
                  <RefreshCw className="w-4 h-4" />
                  –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </Button>
              </div>
            )}
          </div>
        )}
      </CardContent>
    </Card>
  );
};
