import { useState, useRef, useCallback, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/components/ui/use-toast";
import { 
  Camera, 
  Upload, 
  Loader2,
  CheckCircle,
  AlertCircle,
  User,
  Ruler,
  ChevronRight
} from "lucide-react";
import { mediaPipeService } from "@/services/mediaPipeService";

interface PoseLandmarks {
  nose: { x: number; y: number; z: number };
  leftShoulder: { x: number; y: number; z: number };
  rightShoulder: { x: number; y: number; z: number };
  leftElbow: { x: number; y: number; z: number };
  rightElbow: { x: number; y: number; z: number };
  leftWrist: { x: number; y: number; z: number };
  rightWrist: { x: number; y: number; z: number };
  leftHip: { x: number; y: number; z: number };
  rightHip: { x: number; y: number; z: number };
  leftKnee: { x: number; y: number; z: number };
  rightKnee: { x: number; y: number; z: number };
  leftAnkle: { x: number; y: number; z: number };
  rightAnkle: { x: number; y: number; z: number };
}

interface BodyMeasurements {
  height: number;
  shoulders: number;
  chest: number;
  waist: number;
  hips: number;
  inseam: number;
}

interface PhotoAnalyzerProps {
  onAnalysisComplete: (measurements: BodyMeasurements, bodyType: string, gender?: 'male' | 'female' | 'unknown') => void;
}

export const PhotoAnalyzer = ({ onAnalysisComplete }: PhotoAnalyzerProps) => {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [uploadedImage, setUploadedImage] = useState<string | null>(null);
  const [analysisResults, setAnalysisResults] = useState<{
    measurements: BodyMeasurements;
    bodyType: string;
    confidence: number;
  } | null>(null);
  
  const fileInputRef = useRef<HTMLInputElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const { toast } = useToast();

  // –†–µ–∞–ª—å–Ω—ã–π MediaPipe –∞–Ω–∞–ª–∏–∑ (—Å fallback –∫ —Å–∏–º—É–ª—è—Ü–∏–∏)
  const analyzePose = useCallback(async (imageElement: HTMLImageElement): Promise<{
    landmarks: PoseLandmarks;
    measurements: BodyMeasurements;
    confidence: number;
  }> => {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º MediaPipe –∞–Ω–∞–ª–∏–∑...');
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π MediaPipe
      console.log('üì° –í—ã–∑—ã–≤–∞–µ–º mediaPipeService.analyzePose...');
      const results = await mediaPipeService.analyzePose(imageElement);
      console.log('‚úÖ MediaPipe —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:', results);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MediaPipe landmarks –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
      const landmarks: PoseLandmarks = {
        nose: { x: 0.5, y: 0.2, z: 0 }, // MediaPipe –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä
        leftShoulder: { x: results.landmarks.leftShoulder.x, y: results.landmarks.leftShoulder.y, z: 0 },
        rightShoulder: { x: results.landmarks.rightShoulder.x, y: results.landmarks.rightShoulder.y, z: 0 },
        leftElbow: { x: 0.3, y: 0.5, z: 0 }, // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        rightElbow: { x: 0.7, y: 0.5, z: 0 },
        leftWrist: { x: 0.2, y: 0.7, z: 0 },
        rightWrist: { x: 0.8, y: 0.7, z: 0 },
        leftHip: { x: results.landmarks.leftHip.x, y: results.landmarks.leftHip.y, z: 0 },
        rightHip: { x: results.landmarks.rightHip.x, y: results.landmarks.rightHip.y, z: 0 },
        leftKnee: { x: results.landmarks.leftKnee.x, y: results.landmarks.leftKnee.y, z: 0 },
        rightKnee: { x: results.landmarks.rightKnee.x, y: results.landmarks.rightKnee.y, z: 0 },
        leftAnkle: { x: results.landmarks.leftAnkle.x, y: results.landmarks.leftAnkle.y, z: 0 },
        rightAnkle: { x: results.landmarks.rightAnkle.x, y: results.landmarks.rightAnkle.y, z: 0 }
      };
      
      console.log('üéØ Landmarks —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:', landmarks);
      
      return {
        landmarks,
        measurements: results.measurements,
        confidence: results.confidence,
        gender: results.gender
      };
    } catch (error) {
      console.warn('‚ùå MediaPipe analysis failed, using simulation:', error);
      
      // Fallback –∫ —Å–∏–º—É–ª—è—Ü–∏–∏
      return new Promise((resolve) => {
        setTimeout(() => {
          console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é...');
          const landmarks: PoseLandmarks = {
            nose: { x: 0.5, y: 0.2, z: 0 },
            leftShoulder: { x: 0.4, y: 0.3, z: 0 },
            rightShoulder: { x: 0.6, y: 0.3, z: 0 },
            leftElbow: { x: 0.3, y: 0.5, z: 0 },
            rightElbow: { x: 0.7, y: 0.5, z: 0 },
            leftWrist: { x: 0.2, y: 0.7, z: 0 },
            rightWrist: { x: 0.8, y: 0.7, z: 0 },
            leftHip: { x: 0.45, y: 0.6, z: 0 },
            rightHip: { x: 0.55, y: 0.6, z: 0 },
            leftKnee: { x: 0.4, y: 0.8, z: 0 },
            rightKnee: { x: 0.6, y: 0.8, z: 0 },
            leftAnkle: { x: 0.4, y: 0.95, z: 0 },
            rightAnkle: { x: 0.6, y: 0.95, z: 0 }
          };
          
          const measurements = calculateMeasurements(landmarks);
          resolve({
            landmarks,
            measurements,
            confidence: 0.85 + Math.random() * 0.1,
            gender: 'unknown' as const
          });
        }, 2000);
      });
    }
  }, []);

  // –†–∞—Å—á–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫
  const calculateMeasurements = useCallback((landmarks: PoseLandmarks): BodyMeasurements => {
    // –†–∞—Å—á–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è—Ö –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è—Ö –º–µ–∂–¥—É –∫–ª—é—á–µ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
    const shoulderWidth = Math.abs(landmarks.rightShoulder.x - landmarks.leftShoulder.x);
    const hipWidth = Math.abs(landmarks.rightHip.x - landmarks.leftHip.x);
    const height = Math.abs(landmarks.nose.y - landmarks.leftAnkle.y);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ)
    const scaleFactor = 170 / height; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ä–æ—Å—Ç 170—Å–º
    
    return {
      height: 170,
      shoulders: Math.min(shoulderWidth * scaleFactor * 50, 120), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      chest: Math.min(shoulderWidth * scaleFactor * 45, 110),
      waist: Math.min(hipWidth * scaleFactor * 40, 100),
      hips: Math.min(hipWidth * scaleFactor * 50, 120),
      inseam: Math.min(Math.abs(landmarks.leftHip.y - landmarks.leftAnkle.y) * scaleFactor * 50, 90)
    };
  }, []);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã
  const determineBodyType = useCallback((measurements: BodyMeasurements): string => {
    const waistToHipRatio = measurements.waist / measurements.hips;
    const shoulderToHipRatio = measurements.shoulders / measurements.hips;
    
    if (waistToHipRatio > 0.85) {
      return 'apple';
    } else if (shoulderToHipRatio > 1.05) {
      return 'inverted-triangle';
    } else if (shoulderToHipRatio < 0.95) {
      return 'pear';
    } else if (waistToHipRatio < 0.75) {
      return 'hourglass';
    } else {
      return 'rectangle';
    }
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
  const handlePhotoUpload = useCallback(async (file: File) => {
    if (!file.type.startsWith('image/')) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        variant: "destructive"
      });
      return;
    }

    setIsAnalyzing(true);
    setProgress(0);
    
    try {
      // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      const imageUrl = URL.createObjectURL(file);
      setUploadedImage(imageUrl);

      // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞
      const progressInterval = setInterval(() => {
        setProgress(prev => {
          if (prev >= 90) {
            clearInterval(progressInterval);
            return 90;
          }
          return prev + 10;
        });
      }, 200);

      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è MediaPipe
      const imageElement = new Image();
      imageElement.src = imageUrl;
      
      await new Promise((resolve) => {
        imageElement.onload = resolve;
      });

      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–∑—ã...');
      
      // –ê–Ω–∞–ª–∏–∑ –ø–æ–∑—ã —Å MediaPipe
      const analysisResults = await analyzePose(imageElement);
      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω:', analysisResults);
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã
      const bodyType = determineBodyType(analysisResults.measurements);
      console.log('üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Ñ–∏–≥—É—Ä—ã:', bodyType);
      
      setProgress(100);
      
      const results = {
        measurements: analysisResults.measurements,
        bodyType,
        confidence: analysisResults.confidence
      };
      
      setAnalysisResults(results);
      
      // –í—ã–∑—ã–≤–∞–µ–º callback —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
              onAnalysisComplete(analysisResults.measurements, bodyType, analysisResults.gender);
      
      toast({
        title: "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω",
        description: `–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Ñ–∏–≥—É—Ä—ã: ${bodyType}`,
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handlePhotoUpload:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        variant: "destructive"
      });
    } finally {
      setIsAnalyzing(false);
    }
  }, [analyzePose, determineBodyType, onAnalysisComplete, toast]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const handleUploadClick = () => {
    fileInputRef.current?.click();
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      handlePhotoUpload(file);
    }
  };

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫ –Ω–∞ canvas (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
  useEffect(() => {
    if (uploadedImage && canvasRef.current) {
      const canvas = canvasRef.current;
      const ctx = canvas.getContext('2d');
      if (ctx) {
        const img = new Image();
        img.onload = () => {
          canvas.width = img.width;
          canvas.height = img.height;
          ctx.drawImage(img, 0, 0);
          
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Ä–∏—Å–æ–≤–∫—É –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫
          // –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MediaPipe
        };
        img.src = uploadedImage;
      }
    }
  }, [uploadedImage]);

  return (
    <div className="space-y-6">
      <Card className="glass-card">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Camera className="w-5 h-5" />
            –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ
          </CardTitle>
          <CardDescription>
            –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–≥—É—Ä—ã
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* –û–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ */}
          <div className="border-2 border-dashed border-muted-foreground/30 rounded-lg p-4 text-center">
            {!uploadedImage ? (
              <div className="space-y-4">
                <Upload className="w-12 h-12 mx-auto text-muted-foreground" />
                <div>
                  <p className="text-lg font-medium">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ</p>
                  <p className="text-sm text-muted-foreground">
                    –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç –Ω–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Ñ–æ–Ω–µ
                  </p>
                </div>
                <Button onClick={handleUploadClick} disabled={isAnalyzing}>
                  {isAnalyzing ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...
                    </>
                  ) : (
                    <>
                      <Camera className="w-4 h-4 mr-2" />
                      –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ
                    </>
                  )}
                </Button>
              </div>
            ) : (
              <div className="space-y-4">
                <div className="relative w-[200px] h-[150px] mx-auto overflow-hidden rounded-lg border border-gray-200 bg-gray-50">
                  <img
                    src={uploadedImage}
                    alt="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ"
                    className="w-full h-full object-contain"
                    style={{ maxWidth: '100%', maxHeight: '100%' }}
                  />
                  {/* –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º canvas –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ */}
                  {/* <canvas
                    ref={canvasRef}
                    className="absolute inset-0 pointer-events-none"
                  /> */}
                </div>
                                 {isAnalyzing && (
                   <div className="space-y-2">
                     <Progress value={progress} className="w-full" />
                     <p className="text-sm text-muted-foreground">
                       –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ —Ç–µ–ª–∞... {progress}%
                     </p>
                   </div>
                 )}
                 
                                                                       {!isAnalyzing && (
                     <div className="flex flex-col gap-2 mt-4">
                       <Button
                         variant="outline"
                         onClick={() => {
                           setUploadedImage(null);
                           setAnalysisResults(null);
                         }}
                       >
                         –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ
                       </Button>
                     </div>
                   )}
              </div>
            )}
            
            <input
              ref={fileInputRef}
              type="file"
              accept="image/*"
              onChange={handleFileChange}
              className="hidden"
            />
          </div>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ */}
          {analysisResults && (
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <CheckCircle className="w-5 h-5 text-green-500" />
                <h3 className="font-medium">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h3>
              </div>
              
              <div className="grid md:grid-cols-2 gap-4">
                <div className="space-y-3">
                  <h4 className="font-medium flex items-center gap-2">
                    <User className="w-4 h-4" />
                    –¢–∏–ø —Ñ–∏–≥—É—Ä—ã
                  </h4>
                  <Badge variant="secondary" className="text-sm">
                    {analysisResults.bodyType}
                  </Badge>
                  <p className="text-xs text-muted-foreground">
                    –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {(analysisResults.confidence * 100).toFixed(1)}%
                  </p>
                </div>
                
                <div className="space-y-3">
                  <h4 className="font-medium flex items-center gap-2">
                    <Ruler className="w-4 h-4" />
                    –ò–∑–º–µ—Ä–µ–Ω–∏—è (—Å–º)
                  </h4>
                  <div className="grid grid-cols-2 gap-2 text-sm">
                    <div>–†–æ—Å—Ç: {analysisResults.measurements.height}</div>
                    <div>–ü–ª–µ—á–∏: {analysisResults.measurements.shoulders.toFixed(1)}</div>
                    <div>–ì—Ä—É–¥—å: {analysisResults.measurements.chest.toFixed(1)}</div>
                    <div>–¢–∞–ª–∏—è: {analysisResults.measurements.waist.toFixed(1)}</div>
                    <div>–ë–µ–¥—Ä–∞: {analysisResults.measurements.hips.toFixed(1)}</div>
                    <div>–î–ª–∏–Ω–∞ –Ω–æ–≥: {analysisResults.measurements.inseam.toFixed(1)}</div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}; 