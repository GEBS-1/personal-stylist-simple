import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  User, 
  Sparkles, 
  ChevronRight,
  Calculator,
  Palette,
  ShoppingBag,
  Image as ImageIcon
} from "lucide-react";
import { ManualBodyInput, BodyData } from "@/components/fashion/ManualBodyInput";
import { StylePreferences } from "@/components/fashion/StylePreferences";
import { OutfitGenerator } from "@/components/fashion/OutfitGenerator";
import { ImageGenerator } from "@/components/fashion/ImageGenerator";
import ProductCatalog from "@/components/fashion/ProductCatalog";
import TestAPI from "@/components/TestAPI";
import { TestEnv } from "@/components/TestEnv";
import { logConfig } from "@/config/env";

interface AnalysisData extends BodyData {
  bodyType: string;
  measurements?: any;
}

const Index = () => {
  console.log('üéØ Index component is rendering...');
  
  const [activeStep, setActiveStep] = useState<'analysis' | 'preferences' | 'outfits' | 'images' | 'catalog' | 'test'>('analysis');
  const [completedSteps, setCompletedSteps] = useState<Set<string>>(new Set());
  const [analysisData, setAnalysisData] = useState<AnalysisData | null>(null);
  const [generatedOutfit, setGeneratedOutfit] = useState<any>(null);
  const [generatedImage, setGeneratedImage] = useState<any>(null);

  useEffect(() => {
    // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    logConfig();
  }, []);

  const handleStepComplete = (stepId: string, data?: any) => {
    setCompletedSteps(prev => new Set([...prev, stepId]));
    
    if (stepId === 'analysis' && data) {
      setAnalysisData(data);
    } else if (stepId === 'preferences') {
      setActiveStep('outfits');
    } else if (stepId === 'outfits') {
      setActiveStep('images');
    } else if (stepId === 'images') {
      setActiveStep('catalog');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (stepId === 'outfits' && data) {
      setGeneratedOutfit(data);
    } else if (stepId === 'images' && data) {
      setGeneratedImage(data);
    }
  };

  const handleContinueFromAnalysis = () => {
    setActiveStep('preferences');
  };

  const handleStepChange = (step: 'analysis' | 'preferences' | 'outfits' | 'images' | 'catalog' | 'test') => {
    setActiveStep(step);
  };

  const handleStartAnalysis = () => {
    setActiveStep('analysis');
    setTimeout(() => {
      const analysisSection = document.querySelector('[data-step="analysis"]');
      if (analysisSection) {
        analysisSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    }, 100);
  };

  const steps = [
    {
      id: 'analysis',
      title: '–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö',
      description: '–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–≥—É—Ä—ã',
      icon: User,
      completed: completedSteps.has('analysis')
    },
    {
      id: 'preferences',
      title: '–°—Ç–∏–ª–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è',
      description: '–í–∞—à —Å—Ç–∏–ª—å –∏ —Ü–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è',
      icon: Palette,
      completed: completedSteps.has('preferences')
    },
    {
      id: 'outfits',
      title: '–ü–æ–¥–±–æ—Ä –æ–±—Ä–∞–∑–æ–≤',
      description: '–ò–ò-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ª—É–∫–æ–≤',
      icon: Sparkles,
      completed: completedSteps.has('outfits')
    },
    {
      id: 'images',
      title: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤',
      icon: ImageIcon,
      completed: completedSteps.has('images')
    },
    {
      id: 'catalog',
      title: '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤',
      description: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤',
      icon: ShoppingBag,
      completed: completedSteps.has('catalog')
    },
    {
      id: 'test',
      title: '–¢–µ—Å—Ç API',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤',
      icon: Calculator,
      completed: false
    }
  ];

  return (
    <div className="min-h-screen bg-background">
      {/* Hero Section */}
      <section className="hero-gradient py-20 px-6">
        <div className="max-w-7xl mx-auto text-center">
          <h1 className="font-display text-5xl md:text-7xl font-bold text-foreground mb-6">
            –í–∞—à <span className="text-primary">–ò–ò-—Å—Ç–∏–ª–∏—Å—Ç</span>
          </h1>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto mb-8">
            –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥–±–æ—Ä –æ–¥–µ–∂–¥—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
          </p>
          <div className="flex flex-wrap gap-3 justify-center mb-8">
            <Badge variant="secondary" className="px-4 py-2 text-sm">
              <User className="w-4 h-4 mr-2" />
              –†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
            </Badge>
            <Badge variant="secondary" className="px-4 py-2 text-sm">
              <Sparkles className="w-4 h-4 mr-2" />
              –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            </Badge>
            <Badge variant="secondary" className="px-4 py-2 text-sm">
              <ImageIcon className="w-4 h-4 mr-2" />
              –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            </Badge>
            <Badge variant="secondary" className="px-4 py-2 text-sm">
              <ShoppingBag className="w-4 h-4 mr-2" />
              –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏
            </Badge>
          </div>
          <Button 
            size="lg" 
            onClick={handleStartAnalysis}
            className="elegant-shadow smooth-transition"
          >
            –ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä
            <ChevronRight className="w-5 h-5 ml-2" />
          </Button>
          
          <div className="mt-6 p-4 bg-muted/30 rounded-lg max-w-2xl mx-auto">
            <p className="text-sm text-muted-foreground">
              üí° <strong>–î–µ–º–æ-—Ä–µ–∂–∏–º:</strong> –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. 
              –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª–µ .env
            </p>
          </div>
        </div>
      </section>

      {/* Progress Steps */}
      <section className="py-12 px-6 border-b">
        <div className="max-w-7xl mx-auto">
          <div className="flex justify-center">
            <div className="flex space-x-8 overflow-x-auto pb-4">
              {steps.map((step, index) => {
                const Icon = step.icon;
                const isActive = step.id === activeStep;
                const isCompleted = step.completed;
                
                return (
                  <button
                    key={step.id}
                    onClick={() => handleStepChange(step.id as any)}
                    className={`flex flex-col items-center space-y-2 min-w-0 smooth-transition ${
                      isActive ? 'text-primary' : 'text-muted-foreground hover:text-foreground'
                    }`}
                  >
                    <div className={`w-16 h-16 rounded-full border-2 flex items-center justify-center smooth-transition ${
                      isActive 
                        ? 'border-primary bg-primary text-primary-foreground' 
                        : isCompleted
                        ? 'border-primary bg-primary/10 text-primary'
                        : 'border-muted-foreground/30'
                    }`}>
                      <Icon className="w-6 h-6" />
                    </div>
                    <div className="text-center">
                      <div className="font-medium text-sm">{step.title}</div>
                      <div className="text-xs text-muted-foreground max-w-24">{step.description}</div>
                    </div>
                  </button>
                );
              })}
            </div>
          </div>
        </div>
      </section>

      {/* Main Content */}
      <section className="py-12 px-6">
        <div className="max-w-7xl mx-auto">
          <Tabs value={activeStep} className="space-y-8">
            <TabsContent value="analysis" className="space-y-8" data-step="analysis">
              <div className="text-center mb-8">
                <h2 className="font-display text-3xl font-bold mb-4">–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–≥—É—Ä–µ</h2>
                <p className="text-muted-foreground max-w-2xl mx-auto">
                  –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –æ–¥–µ–∂–¥—ã
                </p>
              </div>
              <ManualBodyInput 
                onComplete={(data) => handleStepComplete('analysis', data)}
                onContinue={handleContinueFromAnalysis}
                analysisData={analysisData}
              />
            </TabsContent>

            <TabsContent value="preferences" className="space-y-8">
              <div className="text-center mb-8">
                <h2 className="font-display text-3xl font-bold mb-4">–°—Ç–∏–ª–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</h2>
                <p className="text-muted-foreground max-w-2xl mx-auto">
                  –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –≤ —Å—Ç–∏–ª–µ, —Ü–≤–µ—Ç–∞—Ö –∏ –±—é–¥–∂–µ—Ç–µ
                </p>
              </div>
              <StylePreferences 
                analysisData={analysisData}
                onComplete={() => handleStepComplete('preferences')} 
              />
            </TabsContent>

            <TabsContent value="outfits" className="space-y-8">
              <div className="text-center mb-8">
                <h2 className="font-display text-3xl font-bold mb-4">–ü–æ–¥–±–æ—Ä –æ–±—Ä–∞–∑–æ–≤</h2>
                <p className="text-muted-foreground max-w-2xl mx-auto">
                  –ò–ò —Å–æ–∑–¥–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                </p>
              </div>
              <OutfitGenerator 
                analysisData={analysisData}
                onComplete={(outfit) => handleStepComplete('outfits', outfit)} 
              />
            </TabsContent>

            <TabsContent value="images" className="space-y-8">
              <div className="text-center mb-8">
                <h2 className="font-display text-3xl font-bold mb-4">–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h2>
                <p className="text-muted-foreground max-w-2xl mx-auto">
                  –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö –æ–±—Ä–∞–∑–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò
                </p>
              </div>
              <ImageGenerator 
                analysisData={analysisData}
                onImageGenerated={(image) => handleStepComplete('images', image)} 
              />
            </TabsContent>

            <TabsContent value="catalog" className="space-y-8">
              <div className="text-center mb-8">
                <h2 className="font-display text-3xl font-bold mb-4">–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</h2>
                <p className="text-muted-foreground max-w-2xl mx-auto">
                  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ Ozon, Wildberries –∏ Lamoda
                </p>
              </div>
              <ProductCatalog analysisData={analysisData} generatedOutfit={generatedOutfit} />
            </TabsContent>

            <TabsContent value="test" className="space-y-8">
              <div className="text-center mb-8">
                <h2 className="font-display text-3xl font-bold mb-4">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API</h2>
                <p className="text-muted-foreground max-w-2xl mx-auto">
                  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI —Å–µ—Ä–≤–∏—Å–∞–º –∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º
                </p>
              </div>
              <TestAPI />
              
              <div className="mt-8">
                <TestEnv />
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </section>
    </div>
  );
};

export default Index;
