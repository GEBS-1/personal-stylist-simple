// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç

export interface OutfitRequest {
  bodyType: string;
  measurements: {
    height: number;
    chest: number;
    waist: number;
    hips: number;
    shoulders: number;
  };
  stylePreferences: string[];
  colorPreferences: string[];
  occasion: string;
  season: string;
  budget: string;
}

export interface GeneratedOutfit {
  id: string;
  name: string;
  description: string;
  occasion: string;
  season: string;
  items: any[];
  totalPrice: string;
  styleNotes: string;
  colorPalette: string[];
  confidence: number;
}

type AIProvider = 'openai' | 'gemini' | 'claude' | 'cohere' | 'local' | 'simulation';

class AIService {
  private currentProvider: AIProvider = 'simulation';
  private apiKeys: Record<string, string> = {};
  private responseTimes: Record<AIProvider, number[]> = {};

  constructor() {
    console.log('üöÄ Initializing AI Service...');
    this.loadAPIKeys();
    this.initializeProvider();
  }

  private loadAPIKeys() {
    this.apiKeys = {
      openai: import.meta.env.VITE_OPENAI_API_KEY || '',
      gemini: import.meta.env.VITE_GEMINI_API_KEY || '',
      claude: import.meta.env.VITE_CLAUDE_API_KEY || '',
      cohere: import.meta.env.VITE_COHERE_API_KEY || ''
    };
    
    console.log('üîë Loaded API Keys:');
    console.log(`  OpenAI: ${this.apiKeys.openai ? '‚úÖ Present' : '‚ùå Missing'}`);
    console.log(`  Gemini: ${this.apiKeys.gemini ? '‚úÖ Present' : '‚ùå Missing'}`);
    console.log(`  Claude: ${this.apiKeys.claude ? '‚úÖ Present' : '‚ùå Missing'}`);
    console.log(`  Cohere: ${this.apiKeys.cohere ? '‚úÖ Present' : '‚ùå Missing'}`);
  }

  private async initializeProvider() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    const providers: AIProvider[] = ['gemini', 'openai', 'claude', 'cohere', 'local'];
    
    for (const provider of providers) {
      if (await this.testProvider(provider)) {
        this.currentProvider = provider;
        console.log(`‚úÖ Using AI provider: ${provider}`);
        break;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    if (this.currentProvider === 'simulation') {
      console.log('‚ö†Ô∏è No AI providers available, using enhanced simulation mode');
    }
  }

  private async testProvider(provider: AIProvider): Promise<boolean> {
    try {
      switch (provider) {
        case 'openai':
          const hasOpenAI = !!this.apiKeys.openai;
          console.log(`üîç Testing OpenAI: ${hasOpenAI ? '‚úÖ Available' : '‚ùå No API key'}`);
          return hasOpenAI;
        case 'gemini':
          const hasGemini = !!this.apiKeys.gemini;
          console.log(`üîç Testing Gemini: ${hasGemini ? '‚úÖ Available' : '‚ùå No API key'}`);
          return hasGemini;
        case 'claude':
          const hasClaude = !!this.apiKeys.claude;
          console.log(`üîç Testing Claude: ${hasClaude ? '‚úÖ Available' : '‚ùå No API key'}`);
          return hasClaude;
        case 'cohere':
          const hasCohere = !!this.apiKeys.cohere;
          console.log(`üîç Testing Cohere: ${hasCohere ? '‚úÖ Available' : '‚ùå No API key'}`);
          return hasCohere;
        case 'local':
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
          const hasLocal = await this.testLocalModel();
          console.log(`üîç Testing Local: ${hasLocal ? '‚úÖ Available' : '‚ùå Not available'}`);
          return hasLocal;
        default:
          return false;
      }
    } catch (error) {
      console.warn(`‚ùå Provider ${provider} test failed:`, error);
      return false;
    }
  }

  private async testLocalModel(): Promise<boolean> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
    try {
      const response = await fetch('/api/local/health');
      return response.ok;
    } catch {
      return false;
    }
  }

  async generateOutfit(request: OutfitRequest): Promise<GeneratedOutfit> {
    const startTime = Date.now();
    
    try {
      let result: GeneratedOutfit;
      
      switch (this.currentProvider) {
        case 'openai':
          result = await this.generateWithOpenAI(request);
          break;
        case 'gemini':
          result = await this.generateWithGemini(request);
          break;
        case 'claude':
          result = await this.generateWithClaude(request);
          break;
        case 'cohere':
          result = await this.generateWithCohere(request);
          break;
        case 'local':
          result = await this.generateWithLocal(request);
          break;
        default:
          result = this.simulateResponse(request);
      }

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
      const responseTime = Date.now() - startTime;
      if (!this.responseTimes[this.currentProvider]) {
        this.responseTimes[this.currentProvider] = [];
      }
      this.responseTimes[this.currentProvider].push(responseTime);

      return result;
    } catch (error) {
      console.error(`Error with ${this.currentProvider}:`, error);
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ä–µ–≥–∏–æ–Ω–æ–º/–ª–æ–∫–∞—Ü–∏–µ–π, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—é
      if (error.message && error.message.includes('location is not supported')) {
        console.log('üîÑ Switching to simulation mode due to regional restrictions');
        this.currentProvider = 'simulation';
      }
      
      // Fallback –∫ —Å–∏–º—É–ª—è—Ü–∏–∏
      return this.simulateResponse(request);
    }
  }

  private async generateWithOpenAI(request: OutfitRequest): Promise<GeneratedOutfit> {
    const response = await fetch('/api/openai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.apiKeys.openai}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç–∏–ª—é. –°–æ–∑–¥–∞–π –æ–±—Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.'
          },
          {
            role: 'user',
            content: this.createPrompt(request)
          }
        ],
        max_tokens: 1000,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    return this.parseResponse(data.choices[0]?.message?.content, request);
  }

  private async generateWithGemini(request: OutfitRequest): Promise<GeneratedOutfit> {
    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${this.apiKeys.gemini}`;
    const body = {
      contents: [{
        parts: [{
          text: this.createPrompt(request)
        }]
      }],
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 1000
      }
    };

    console.log('üåê Gemini API Request:', { url: url.replace(this.apiKeys.gemini, '***'), body });

    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(body)
    });

    console.log('üì° Gemini API Response Status:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Gemini API Error Response:', errorText);
      throw new Error(`Gemini API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('‚úÖ Gemini API Success Response:', data);
    return this.parseResponse(data.candidates[0]?.content?.parts[0]?.text, request);
  }

  private async generateWithClaude(request: OutfitRequest): Promise<GeneratedOutfit> {
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'x-api-key': this.apiKeys.claude,
        'Content-Type': 'application/json',
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-sonnet-20240229',
        messages: [{
          role: 'user',
          content: this.createPrompt(request)
        }],
        max_tokens: 1000
      })
    });

    if (!response.ok) {
      throw new Error(`Claude API error: ${response.status}`);
    }

    const data = await response.json();
    return this.parseResponse(data.content[0]?.text, request);
  }

  private async generateWithCohere(request: OutfitRequest): Promise<GeneratedOutfit> {
    const response = await fetch('https://api.cohere.ai/v1/generate', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.apiKeys.cohere}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'command',
        prompt: this.createPrompt(request),
        max_tokens: 1000,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      throw new Error(`Cohere API error: ${response.status}`);
    }

    const data = await response.json();
    return this.parseResponse(data.generations[0]?.text, request);
  }

  private async generateWithLocal(request: OutfitRequest): Promise<GeneratedOutfit> {
    const response = await fetch('/api/local/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: this.createPrompt(request),
        max_tokens: 1000,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      throw new Error(`Local API error: ${response.status}`);
    }

    const data = await response.json();
    return this.parseResponse(data.text, request);
  }

  private createPrompt(request: OutfitRequest): string {
    const bodyTypeRecommendations = this.getBodyTypeRecommendations(request.bodyType);
    const seasonRecommendations = this.getSeasonRecommendations(request.season);
    const occasionRecommendations = this.getOccasionRecommendations(request.occasion);
    
    return `
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-—Å—Ç–∏–ª–∏—Å—Ç —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –°–æ–∑–¥–∞–π –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –ì–û–¢–û–í–´–ô –û–ë–†–ê–ó –¥–ª—è –∂–µ–Ω—â–∏–Ω—ã.

–ê–ù–ê–õ–ò–ó –ö–õ–ò–ï–ù–¢–ê:
- –¢–∏–ø —Ñ–∏–≥—É—Ä—ã: ${request.bodyType}
- –†–æ—Å—Ç: ${request.measurements.height} —Å–º
- –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏: ${request.measurements.chest} —Å–º
- –û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏: ${request.measurements.waist} —Å–º
- –û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä: ${request.measurements.hips} —Å–º
- –®–∏—Ä–∏–Ω–∞ –ø–ª–µ—á: ${request.measurements.shoulders} —Å–º

–ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø:
- –°—Ç–∏–ª—å: ${request.stylePreferences.join(', ')}
- –¶–≤–µ—Ç–∞: ${request.colorPreferences.join(', ')}
- –ü–æ–≤–æ–¥: ${request.occasion}
- –°–µ–∑–æ–Ω: ${request.season}
- –ë—é–¥–∂–µ—Ç: ${request.budget}

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –¢–ò–ü–£ –§–ò–ì–£–†–´ (${request.bodyType}):
${bodyTypeRecommendations}

–°–ï–ó–û–ù–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (${request.season}):
${seasonRecommendations}

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–û–í–û–î–£ (${request.occasion}):
${occasionRecommendations}

–ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞–π –ö–û–ù–ö–†–ï–¢–ù–´–ô –ì–û–¢–û–í–´–ô –û–ë–†–ê–ó —Å —Ç–æ—á–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –æ–¥–µ–∂–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã, —Å–µ–∑–æ–Ω–∞ –∏ –ø–æ–≤–æ–¥–∞.

–°–æ–∑–¥–∞–π –æ–±—Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "name": "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞",
  "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ –∏ –ø–æ—á–µ–º—É –æ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç",
  "items": [
    {
      "category": "–í–µ—Ä—Ö/–ù–∏–∑/–û–±—É–≤—å/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
      "name": "–¢–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞",
      "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∞—Ç–µ—Ä–∏–∞–ª, —Ñ–∞—Å–æ–Ω, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏)",
      "colors": ["–æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç", "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ü–≤–µ—Ç"],
      "style": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∏–ª—å",
      "fit": "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–æ—Å–∞–¥–∫–∞ –¥–ª—è —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã",
      "price": "–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ —Ä—É–±–ª—è—Ö"
    }
  ],
  "styleNotes": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Å—Ç–∏–ª—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã",
  "colorPalette": ["–æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –æ–±—Ä–∞–∑–∞"],
  "totalPrice": "–æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö",
  "whyItWorks": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ, –ø–æ—á–µ–º—É –æ–±—Ä–∞–∑ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã"
}
    `;
  }

  private parseResponse(response: string, request: OutfitRequest): GeneratedOutfit {
    try {
      console.log('üìù Raw AI response:', response);
      
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No JSON found in response');
      }
      
      // –û—á–∏—â–∞–µ–º JSON –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
      let jsonString = jsonMatch[0];
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Gemini
      jsonString = jsonString
        .replace(/,\s*}/g, '}') // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏
        .replace(/,\s*]/g, ']') // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏
        .replace(/\\"/g, '"') // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
        .replace(/\\n/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
        .replace(/\\t/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º —Ç–∞–±—É–ª—è—Ü–∏–∏ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
        .replace(/\s+/g, ' ') // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        .replace(/"\s*:\s*"/g, '": "') // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –¥–≤–æ–µ—Ç–æ—á–∏–π
        .replace(/"\s*,\s*"/g, '", "') // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –∑–∞–ø—è—Ç—ã—Ö
        .replace(/"\s*}\s*$/g, '"}') // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—Ü –æ–±—ä–µ–∫—Ç–∞
        .replace(/"\s*]\s*$/g, '"]'); // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞
      
      console.log('üîß Cleaned JSON string:', jsonString);
      
      const parsed = JSON.parse(jsonString);
      console.log('‚úÖ Parsed JSON:', parsed);
      
      return {
        id: `outfit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        name: parsed.name || '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑',
        description: parsed.description || '–°–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å',
        occasion: request.occasion,
        season: request.season,
        items: parsed.items || [],
        totalPrice: parsed.totalPrice || '5000 ‚ÇΩ',
        styleNotes: parsed.styleNotes || '–°—Ç–∏–ª—å–Ω—ã–π –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–∑',
        colorPalette: parsed.colorPalette || request.colorPreferences,
        confidence: 0.95
      };
    } catch (error) {
      console.error('Failed to parse AI response:', error);
      console.log('üîÑ Falling back to simulation due to parsing error');
      return this.simulateResponse(request);
    }
  }

  private simulateResponse(request: OutfitRequest): GeneratedOutfit {
    const bodyTypeRecommendations = this.getBodyTypeRecommendations(request.bodyType);
    const seasonRecommendations = this.getSeasonRecommendations(request.season);
    const occasionRecommendations = this.getOccasionRecommendations(request.occasion);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    const outfitName = this.generateOutfitName(request);
    const items = this.generateOutfitItems(request);
    const styleNotes = this.generateStyleNotes(request, bodyTypeRecommendations);
    
    return {
      id: `outfit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      name: outfitName,
      description: `–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –¥–ª—è ${request.bodyType} —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã –≤ —Å—Ç–∏–ª–µ ${request.stylePreferences.join(', ')}`,
      occasion: request.occasion,
      season: request.season,
      items: items,
      totalPrice: this.calculateTotalPrice(items),
      styleNotes: styleNotes,
      colorPalette: request.colorPreferences,
      confidence: 0.9
    };
  }

  private generateOutfitName(request: OutfitRequest): string {
    const names = {
      casual: ['–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π –æ–±—Ä–∞–∑', '–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –ª—É–∫', '–°—Ç–∏–ª—å–Ω—ã–π casual'],
      business: ['–î–µ–ª–æ–≤–æ–π –æ–±—Ä–∞–∑', '–û—Ñ–∏—Å–Ω—ã–π –ª—É–∫', '–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π business'],
      evening: ['–í–µ—á–µ—Ä–Ω–∏–π –æ–±—Ä–∞–∑', '–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –ª—É–∫', '–ì–ª–∞–º—É—Ä–Ω—ã–π evening']
    };
    
    const style = request.stylePreferences[0] || 'casual';
    const styleNames = names[style as keyof typeof names] || names.casual;
    return styleNames[Math.floor(Math.random() * styleNames.length)];
  }

  private generateOutfitItems(request: OutfitRequest): any[] {
    const items = [];
    const style = request.stylePreferences[0] || 'casual';
    
    // –í–µ—Ä—Ö
    const tops = {
      casual: ['–ë–ª—É–∑–∞ –∏–∑ —Ö–ª–æ–ø–∫–∞', '–¢–æ–ø –±–∞–∑–æ–≤—ã–π', '–§—É—Ç–±–æ–ª–∫–∞ —Å—Ç–∏–ª—å–Ω–∞—è'],
      business: ['–†—É–±–∞—à–∫–∞ –æ—Ñ–∏—Å–Ω–∞—è', '–ë–ª—É–∑–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è', '–¢–æ–ø –¥–µ–ª–æ–≤–æ–π'],
      evening: ['–ë–ª—É–∑–∞ –≤–µ—á–µ—Ä–Ω—è—è', '–¢–æ–ø —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π', '–†—É–±–∞—à–∫–∞ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è']
    };
    
    // –ù–∏–∑
    const bottoms = {
      casual: ['–î–∂–∏–Ω—Å—ã –ø—Ä—è–º–æ–≥–æ –∫—Ä–æ—è', '–ë—Ä—é–∫–∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ', '–Æ–±–∫–∞ –º–∏–¥–∏'],
      business: ['–ë—Ä—é–∫–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ', '–Æ–±–∫–∞-–∫–∞—Ä–∞–Ω–¥–∞—à', '–ë—Ä—é–∫–∏ –æ—Ñ–∏—Å–Ω—ã–µ'],
      evening: ['–Æ–±–∫–∞ –≤–µ—á–µ—Ä–Ω—è—è', '–ë—Ä—é–∫–∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ', '–ü–ª–∞—Ç—å–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ']
    };
    
    // –û–±—É–≤—å
    const shoes = {
      casual: ['–ö—Ä–æ—Å—Å–æ–≤–∫–∏ —Å—Ç–∏–ª—å–Ω—ã–µ', '–õ–æ—Ñ–µ—Ä—ã –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ', '–ë–∞–ª–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ'],
      business: ['–¢—É—Ñ–ª–∏ –Ω–∞ –∫–∞–±–ª—É–∫–µ', '–õ–æ—Ñ–µ—Ä—ã –¥–µ–ª–æ–≤—ã–µ', '–ë–∞–ª–µ—Ç–∫–∏ –æ—Ñ–∏—Å–Ω—ã–µ'],
      evening: ['–¢—É—Ñ–ª–∏ –≤–µ—á–µ—Ä–Ω–∏–µ', '–ë–æ—Å–æ–Ω–æ–∂–∫–∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ', '–¢—É—Ñ–ª–∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ']
    };
    
    const styleTops = tops[style as keyof typeof tops] || tops.casual;
    const styleBottoms = bottoms[style as keyof typeof bottoms] || bottoms.casual;
    const styleShoes = shoes[style as keyof typeof shoes] || shoes.casual;
    
    items.push({
      category: '–í–µ—Ä—Ö',
      description: styleTops[Math.floor(Math.random() * styleTops.length)],
      colors: request.colorPreferences,
      style: style,
      fit: this.getRecommendedFit(request.bodyType),
      price: '2000-4000'
    });
    
    items.push({
      category: '–ù–∏–∑',
      description: styleBottoms[Math.floor(Math.random() * styleBottoms.length)],
      colors: request.colorPreferences,
      style: style,
      fit: this.getRecommendedFit(request.bodyType),
      price: '3000-6000'
    });
    
    items.push({
      category: '–û–±—É–≤—å',
      description: styleShoes[Math.floor(Math.random() * styleShoes.length)],
      colors: request.colorPreferences,
      style: style,
      fit: '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π',
      price: '4000-8000'
    });
    
    return items;
  }

  private getRecommendedFit(bodyType: string): string {
    const fits = {
      apple: '—Å–≤–æ–±–æ–¥–Ω—ã–π –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–∞–ª–∏–∏',
      pear: '–ø—Ä–∏—Ç–∞–ª–µ–Ω–Ω—ã–π –≤–µ—Ä—Ö, —Å–≤–æ–±–æ–¥–Ω—ã–π –Ω–∏–∑',
      hourglass: '–ø—Ä–∏—Ç–∞–ª–µ–Ω–Ω—ã–π',
      rectangle: '–ø—Ä—è–º–æ–π –∫—Ä–æ–π',
      'inverted-triangle': '—Å–≤–æ–±–æ–¥–Ω—ã–π –≤–µ—Ä—Ö, –ø—Ä–∏—Ç–∞–ª–µ–Ω–Ω—ã–π –Ω–∏–∑'
    };
    
    return fits[bodyType as keyof typeof fits] || '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π';
  }

  private generateStyleNotes(request: OutfitRequest, bodyTypeRecommendations: string): string {
    const notes = [
      `–û–±—Ä–∞–∑ —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è ${request.bodyType} —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã.`,
      `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è ${request.occasion} –≤ ${request.season} —Å–µ–∑–æ–Ω.`,
      `–¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞: ${request.colorPreferences.join(', ')}.`,
      bodyTypeRecommendations.split('\n')[1] || '–ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ —Ñ–∏–≥—É—Ä—ã.'
    ];
    
    return notes.join(' ');
  }

  private calculateTotalPrice(items: any[]): string {
    const total = items.reduce((sum, item) => {
      const priceRange = item.price.split('-');
      const avgPrice = (parseInt(priceRange[0]) + parseInt(priceRange[1])) / 2;
      return sum + avgPrice;
    }, 0);
    
    return `${Math.round(total)} ‚ÇΩ`;
  }

  // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  getPerformanceMetrics() {
    const metrics: Record<string, any> = {};
    
    for (const [provider, times] of Object.entries(this.responseTimes)) {
      if (times.length > 0) {
        metrics[provider] = {
          averageTime: times.reduce((a, b) => a + b, 0) / times.length,
          minTime: Math.min(...times),
          maxTime: Math.max(...times),
          requestCount: times.length
        };
      }
    }
    
    return metrics;
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  async switchProvider(provider: AIProvider) {
    if (await this.testProvider(provider)) {
      this.currentProvider = provider;
      console.log(`Switched to provider: ${provider}`);
      return true;
    }
    return false;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  getCurrentProvider(): AIProvider {
    return this.currentProvider;
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É —Ñ–∏–≥—É—Ä—ã
  private getBodyTypeRecommendations(bodyType: string): string {
    const recommendations = {
      'rectangle': `
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –æ–¥–µ–∂–¥—É —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Ç–∞–ª–∏—é (–ø–æ—è—Å–∞, –ø—Ä–∏—Ç–∞–ª–µ–Ω–Ω—ã–µ —Å–∏–ª—É—ç—Ç—ã)
‚Ä¢ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –∏ –ø–æ–ª–æ—Å–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ —É–¥–ª–∏–Ω—è—é—Ç —Ñ–∏–≥—É—Ä—É
‚Ä¢ –ê-—Å–∏–ª—É—ç—Ç—ã –∏ —Ç—Ä–∞–ø–µ—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç –æ–±—ä–µ–º –≤ –Ω—É–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –º–µ—à–∫–æ–≤–∞—Ç–æ–π –æ–¥–µ–∂–¥—ã - –æ–Ω–∞ —Å–∫—Ä—ã–≤–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏`,
      'hourglass': `
‚Ä¢ –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π—Ç–µ —Ç–∞–ª–∏—é - —ç—Ç–æ –≤–∞—à–∞ —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –ø—Ä–∏—Ç–∞–ª–µ–Ω–Ω—ã–µ —Å–∏–ª—É—ç—Ç—ã –∏ –ø–æ—è—Å–∞
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –º–µ—à–∫–æ–≤–∞—Ç–æ–π –æ–¥–µ–∂–¥—ã –∏ –ø—Ä—è–º—ã—Ö —Å–∏–ª—É—ç—Ç–æ–≤
‚Ä¢ –ë–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ –≤–µ—Ä—Ö –∏ –Ω–∏–∑ - –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π—Ç–µ –æ–¥–Ω—É —á–∞—Å—Ç—å`,
      'pear': `
‚Ä¢ –ê–∫—Ü–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Ç–µ–ª–∞
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–µ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –Ω–∏–∑–∞, —Å–≤–µ—Ç–ª—ã–µ –¥–ª—è –≤–µ—Ä—Ö–∞
‚Ä¢ V-–æ–±—Ä–∞–∑–Ω—ã–µ –≤—ã—Ä–µ–∑—ã –∏ —è—Ä–∫–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ –≥—Ä—É–¥–∏
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–±—Ç—è–≥–∏–≤–∞—é—â–∏—Ö —é–±–æ–∫ –∏ —Å–≤–µ—Ç–ª—ã—Ö –±—Ä—é–∫`,
      'apple': `
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –∏ —É–¥–ª–∏–Ω—è—é—â–∏–µ —Å–∏–ª—É—ç—Ç—ã
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –æ–¥–µ–∂–¥—É —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –Ω–æ–≥–∏
‚Ä¢ V-–æ–±—Ä–∞–∑–Ω—ã–µ –≤—ã—Ä–µ–∑—ã –∏ —É–¥–ª–∏–Ω–µ–Ω–Ω—ã–µ –∫–∞—Ä–¥–∏–≥–∞–Ω—ã
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–±—Ç—è–≥–∏–≤–∞—é—â–µ–π –æ–¥–µ–∂–¥—ã –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–∞–ª–∏–∏`,
      'inverted-triangle': `
‚Ä¢ –ë–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ —à–∏—Ä–æ–∫–∏–µ –ø–ª–µ—á–∏ —Å –æ–±—ä–µ–º–æ–º –≤–Ω–∏–∑—É
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –ê-—Å–∏–ª—É—ç—Ç—ã –∏ —Ä–∞—Å–∫–ª–µ—à–µ–Ω–Ω—ã–µ —é–±–∫–∏
‚Ä¢ –¢–µ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤–µ—Ä—Ö–∞, —Å–≤–µ—Ç–ª—ã–µ –¥–ª—è –Ω–∏–∑–∞
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–±—ä–µ–º–Ω—ã—Ö –ø–ª–µ—á –∏ —è—Ä–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏`
    };
    
    return recommendations[bodyType as keyof typeof recommendations] || 
           '–í—ã–±–∏—Ä–∞–π—Ç–µ –æ–¥–µ–∂–¥—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –≤–∞—à–∏ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏.';
  }

  // –°–µ–∑–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  private getSeasonRecommendations(season: string): string {
    const recommendations = {
      '–≤–µ—Å–Ω–∞': `
‚Ä¢ –°–≤–µ—Ç–ª—ã–µ –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–Ω–∞ –∏ —è—Ä–∫–∏–µ –∞–∫—Ü–µ–Ω—Ç—ã
‚Ä¢ –õ–µ–≥–∫–∏–µ —Ç–∫–∞–Ω–∏: —Ö–ª–æ–ø–æ–∫, –ª–µ–Ω, —à–µ–ª–∫
‚Ä¢ –ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ—Å—Ç—å: –∫–∞—Ä–¥–∏–≥–∞–Ω—ã, –∂–∏–ª–µ—Ç—ã
‚Ä¢ –¶–≤–µ—Ç–æ—á–Ω—ã–µ –ø—Ä–∏–Ω—Ç—ã –∏ –Ω–µ–∂–Ω—ã–µ —É–∑–æ—Ä—ã`,
      '–ª–µ—Ç–æ': `
‚Ä¢ –õ–µ–≥–∫–∏–µ –¥—ã—à–∞—â–∏–µ —Ç–∫–∞–Ω–∏: —Ö–ª–æ–ø–æ–∫, –ª–µ–Ω, –≤–∏—Å–∫–æ–∑–∞
‚Ä¢ –°–≤–µ—Ç–ª—ã–µ –∏ —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–∏–ª—É—ç—Ç—ã
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–æ–ª–Ω—Ü–∞: —à–ª—è–ø—ã, —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏`,
      '–æ—Å–µ–Ω—å': `
‚Ä¢ –¢–µ–ø–ª—ã–µ –∑–µ–º–ª–∏—Å—Ç—ã–µ —Ç–æ–Ω–∞: –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π, –±–æ—Ä–¥–æ–≤—ã–π, –æ—Ä–∞–Ω–∂–µ–≤—ã–π
‚Ä¢ –ü–ª–æ—Ç–Ω—ã–µ —Ç–∫–∞–Ω–∏: —à–µ—Ä—Å—Ç—å, —Ç–≤–∏–¥, –¥–∂–∏–Ω—Å
‚Ä¢ –ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ—Å—Ç—å: –ø–∞–ª—å—Ç–æ, —à–∞—Ä—Ñ—ã, —à–∞–ø–∫–∏
‚Ä¢ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–Ω—Ç—ã: –∫–ª–µ—Ç–∫–∞, –≥–æ—Ä–æ—Ö`,
      '–∑–∏–º–∞': `
‚Ä¢ –¢–µ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ —è—Ä–∫–∏–µ –∞–∫—Ü–µ–Ω—Ç—ã
‚Ä¢ –¢–µ–ø–ª—ã–µ —Ç–∫–∞–Ω–∏: —à–µ—Ä—Å—Ç—å, –∫–∞—à–µ–º–∏—Ä, –º–µ—Ö
‚Ä¢ –ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ—Å—Ç—å –∏ –æ–±—ä–µ–º
‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è –∏ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –∞–∫—Ü–µ–Ω—Ç—ã`
    };
    
    return recommendations[season as keyof typeof recommendations] || 
           '–í—ã–±–∏—Ä–∞–π—Ç–µ –æ–¥–µ–∂–¥—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å–µ–∑–æ–Ω—É –∏ –ø–æ–≥–æ–¥–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º.';
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–≤–æ–¥—É
  private getOccasionRecommendations(occasion: string): string {
    const recommendations = {
      'casual': `
‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞
‚Ä¢ –î–∂–∏–Ω—Å—ã, —Ñ—É—Ç–±–æ–ª–∫–∏, –∫—Ä–æ—Å—Å–æ–≤–∫–∏
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —É–¥–æ–±–Ω—ã–µ —Å–∏–ª—É—ç—Ç—ã
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã`,
      'business': `
‚Ä¢ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å
‚Ä¢ –ö–æ—Å—Ç—é–º—ã, –±–ª—É–∑—ã, —Ç—É—Ñ–ª–∏ –Ω–∞ –∫–∞–±–ª—É–∫–µ
‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞: —á–µ—Ä–Ω—ã–π, —Å–µ—Ä—ã–π, –±–µ–ª—ã–π, —Å–∏–Ω–∏–π
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è`,
      'evening': `
‚Ä¢ –≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –≤–µ—á–µ—Ä–Ω–∏–µ –Ω–∞—Ä—è–¥—ã
‚Ä¢ –ü–ª–∞—Ç—å—è, –∫–æ—Å—Ç—é–º—ã, —Ç—É—Ñ–ª–∏ –Ω–∞ –∫–∞–±–ª—É–∫–µ
‚Ä¢ –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –∏ –±–ª–µ—Å—Ç—è—â–∏–µ –∞–∫—Ü–µ–Ω—Ç—ã
‚Ä¢ –î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è –∏ –∫–ª–∞—Ç—á–∏`,
      'sport': `
‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å
‚Ä¢ –î—ã—à–∞—â–∏–µ —Ç–∫–∞–Ω–∏ –∏ —É–¥–æ–±–Ω—ã–µ —Å–∏–ª—É—ç—Ç—ã
‚Ä¢ –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã: —Å—É–º–∫–∏, –±—É—Ç—ã–ª–∫–∏`
    };
    
    return recommendations[occasion as keyof typeof recommendations] || 
           '–í—ã–±–∏—Ä–∞–π—Ç–µ –æ–¥–µ–∂–¥—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ–æ—Ä–º–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.';
  }
}

export const aiService = new AIService(); 