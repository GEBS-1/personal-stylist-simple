import { env, getValidApiKeys, hasValidAiKey, logConfig } from "@/config/env";

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç

export interface OutfitRequest {
  bodyType: string;
  measurements: {
    height: number;
    weight: number;
    gender: 'male' | 'female';
    season: 'spring' | 'summer' | 'autumn' | 'winter';
    shoeSize: number;
  };
  stylePreferences: string[];
  colorPreferences: string[];
  occasion: string;
  season: string;
  budget: string;
}

export interface GeneratedOutfit {
  id: string;
  name: string;
  description: string;
  occasion: string;
  season: string;
  items: any[];
  totalPrice: string;
  styleNotes: string;
  colorPalette: string[];
  confidence: number;
}

type AIProvider = 'openai' | 'gemini' | 'claude' | 'cohere' | 'local' | 'simulation';

export class AIService {
  private currentProvider: AIProvider = 'simulation';
  private apiKeys: ReturnType<typeof getValidApiKeys>;
  private responseTimes: Partial<Record<AIProvider, number[]>> = {};

  constructor() {
    console.log('üöÄ Initializing AI Service...');
    this.loadAPIKeys();
    this.initializeProvider();
  }

  private loadAPIKeys() {
    this.apiKeys = getValidApiKeys();
    
    if (!hasValidAiKey()) {
      console.log('‚ö†Ô∏è No valid API keys found. Running in simulation mode.');
    }
  }

  private async initializeProvider() {
    console.log('üîß Initializing AI provider...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ Gemini –∏ —Å–∏–º—É–ª—è—Ü–∏—é
    const providers: AIProvider[] = ['gemini', 'simulation'];
    
    for (const provider of providers) {
      console.log(`üîç Testing ${provider}...`);
      if (await this.testProvider(provider)) {
        this.currentProvider = provider;
        console.log(`‚úÖ Using AI provider: ${provider}`);
        break;
      }
    }
    
    // –ï—Å–ª–∏ Gemini –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    if (this.currentProvider === 'simulation') {
      console.log('üé≠ Using simulation mode');
      console.log('üí° Tips:');
      console.log('  - Gemini API –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log('  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Google AI Studio');
      console.log('  - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π API –∫–ª—é—á');
    }
  }

  private async testProvider(provider: AIProvider): Promise<boolean> {
    try {
      switch (provider) {
        case 'openai':
          const hasOpenAI = !!this.apiKeys.openai;
          console.log(`üîç Testing OpenAI: ${hasOpenAI ? '‚úÖ Available' : '‚ùå No API key'}`);
          return hasOpenAI;
        case 'gemini':
          const hasGemini = !!this.apiKeys.gemini;
          if (!hasGemini) {
            console.log('‚ùå Gemini: No API key');
            return false;
          }
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini (–∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫)
          const testModels = ['gemini-1.5-flash', 'gemini-1.5-pro'];
          
          for (const model of testModels) {
            try {
              console.log(`üß™ Testing Gemini model: ${model}`);
              const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${this.apiKeys.gemini}`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  contents: [{
                    parts: [{
                      text: "Hello"
                    }]
                  }],
                  generationConfig: {
                    temperature: 0.1,
                    maxOutputTokens: 10
                  }
                })
              });
              
                        if (response.ok) {
            const data = await response.json();
            console.log(`‚úÖ Gemini (${model}): API test successful`);
            return true;
          } else {
            const errorText = await response.text();
            console.log(`‚ùå Gemini (${model}): API test failed - ${response.status}: ${errorText}`);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
            if (response.status === 503) {
              console.log(`‚ö†Ô∏è Gemini (${model}): Service temporarily unavailable, trying next model...`);
            } else if (response.status === 429) {
              console.log(`‚ö†Ô∏è Gemini (${model}): Rate limit exceeded, trying next model...`);
            } else if (response.status === 404) {
              console.log(`‚ö†Ô∏è Gemini (${model}): Model not found, trying next model...`);
            }
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
          }
            } catch (error) {
              console.log(`‚ùå Gemini (${model}): API test error:`, error);
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
            }
          }
          
          console.log('‚ùå Gemini: All models failed, falling back to simulation');
          return false;
        case 'claude':
          const hasClaude = !!this.apiKeys.claude;
          console.log(`üîç Testing Claude: ${hasClaude ? '‚úÖ Available' : '‚ùå No API key'}`);
          return hasClaude;
        case 'cohere':
          const hasCohere = !!this.apiKeys.cohere;
          console.log(`üîç Testing Cohere: ${hasCohere ? '‚úÖ Available' : '‚ùå No API key'}`);
          return hasCohere;
        case 'local':
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
          const hasLocal = await this.testLocalModel();
          console.log(`üîç Testing Local: ${hasLocal ? '‚úÖ Available' : '‚ùå Not available'}`);
          return hasLocal;
        default:
          return false;
      }
    } catch (error) {
      console.warn(`‚ùå Provider ${provider} test failed:`, error);
      return false;
    }
  }

  private async testLocalModel(): Promise<boolean> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
    try {
      const response = await fetch('/api/local/health');
      return response.ok;
    } catch {
      return false;
    }
  }

  async generateOutfit(request: OutfitRequest): Promise<GeneratedOutfit> {
    const startTime = Date.now();
    
    try {
      let result: GeneratedOutfit;
      
      switch (this.currentProvider) {
        case 'openai':
          result = await this.generateWithOpenAI(request);
          break;
        case 'gemini':
          result = await this.generateWithGemini(request);
          break;
        case 'claude':
          result = await this.generateWithClaude(request);
          break;
        case 'cohere':
          result = await this.generateWithCohere(request);
          break;
        case 'local':
          result = await this.generateWithLocal(request);
          break;
        default:
          result = this.simulateResponse(request);
      }

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
      const responseTime = Date.now() - startTime;
      if (!this.responseTimes[this.currentProvider]) {
        this.responseTimes[this.currentProvider] = [];
      }
      this.responseTimes[this.currentProvider].push(responseTime);

      return result;
    } catch (error) {
      console.error(`Error with ${this.currentProvider}:`, error);
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ä–µ–≥–∏–æ–Ω–æ–º/–ª–æ–∫–∞—Ü–∏–µ–π, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—é
      if (error.message && error.message.includes('location is not supported')) {
        console.log('üîÑ Switching to simulation mode due to regional restrictions');
        this.currentProvider = 'simulation';
      } else if (error.message && error.message.includes('401')) {
        console.log('üîë API key issue detected, switching to simulation mode');
        this.currentProvider = 'simulation';
      } else if (error.message && error.message.includes('400')) {
        console.log('‚ö†Ô∏è Bad request detected, switching to simulation mode');
        this.currentProvider = 'simulation';
      }
      
      // Fallback –∫ —Å–∏–º—É–ª—è—Ü–∏–∏
      console.log('üé≠ Using simulation mode for outfit generation');
      return this.simulateResponse(request);
    }
  }

  private async generateWithOpenAI(request: OutfitRequest): Promise<GeneratedOutfit> {
    const response = await fetch('/api/openai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.apiKeys.openai}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç–∏–ª—é. –°–æ–∑–¥–∞–π –æ–±—Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.'
          },
          {
            role: 'user',
            content: this.createPrompt(request)
          }
        ],
        max_tokens: 1000,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    return this.parseResponse(data.choices[0]?.message?.content, request);
  }

  private async generateWithGemini(request: OutfitRequest): Promise<GeneratedOutfit> {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini (–∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫)
    const models = [
      'gemini-1.5-flash',
      'gemini-1.5-pro'
    ];
    
    let lastError: Error | null = null;
    
    for (const model of models) {
      // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å —Å retry
      for (let attempt = 1; attempt <= 3; attempt++) {
        try {
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
          if (attempt > 1) {
            const delay = attempt * 1000; // 1s, 2s, 3s
            console.log(`‚è≥ Waiting ${delay}ms before retry ${attempt} for model ${model}`);
            await new Promise(resolve => setTimeout(resolve, delay));
          }
          
          const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${this.apiKeys.gemini}`;
          console.log(`üîÑ Trying Gemini model: ${model} (attempt ${attempt})`);
          
          const body = {
            contents: [{
              parts: [{
                text: this.createPrompt(request)
              }]
            }],
            generationConfig: {
              temperature: 0.7,
              maxOutputTokens: 1000
            }
          };

          console.log('üåê Gemini API Request:', { url: url.replace(this.apiKeys.gemini, '***'), model });

                      const response = await fetch(url, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(body),
              signal: AbortSignal.timeout(30000) // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            });

          console.log('üì° Gemini API Response Status:', response.status);

          if (!response.ok) {
            const errorText = await response.text();
            console.error(`‚ùå Gemini API Error (${model}):`, errorText);
            lastError = new Error(`Gemini API error (${model}): ${response.status} - ${errorText}`);
            continue; // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É
          }

          const data = await response.json();
          console.log(`‚úÖ Gemini API Success (${model}):`, data);
          
          const responseText = data.candidates[0]?.content?.parts[0]?.text;
          if (!responseText) {
            console.error(`‚ùå Empty response from Gemini (${model})`);
            continue;
          }
          
          try {
            return this.parseResponse(responseText, request);
          } catch (parseError) {
            console.error(`‚ùå Failed to parse Gemini response (${model}):`, parseError);
            // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
            continue;
          }
          
        } catch (error) {
          console.error(`‚ùå Gemini API Error (${model}):`, error);
          lastError = error as Error;
          
          // –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–π–º–∞—É—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É
          if (error.name === 'TimeoutError' || error.message?.includes('timeout')) {
            console.log(`‚è∞ Timeout for ${model}, trying next attempt...`);
          }
          continue; // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É
        }
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
    throw lastError || new Error('All Gemini models failed');
  }

  private async generateWithClaude(request: OutfitRequest): Promise<GeneratedOutfit> {
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'x-api-key': this.apiKeys.claude,
        'Content-Type': 'application/json',
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-sonnet-20240229',
        messages: [{
          role: 'user',
          content: this.createPrompt(request)
        }],
        max_tokens: 1000
      })
    });

    if (!response.ok) {
      throw new Error(`Claude API error: ${response.status}`);
    }

    const data = await response.json();
    return this.parseResponse(data.content[0]?.text, request);
  }

  private async generateWithCohere(request: OutfitRequest): Promise<GeneratedOutfit> {
    const response = await fetch('https://api.cohere.ai/v1/generate', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.apiKeys.cohere}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'command',
        prompt: this.createPrompt(request),
        max_tokens: 1000,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      throw new Error(`Cohere API error: ${response.status}`);
    }

    const data = await response.json();
    return this.parseResponse(data.generations[0]?.text, request);
  }

  private async generateWithLocal(request: OutfitRequest): Promise<GeneratedOutfit> {
    const response = await fetch('/api/local/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: this.createPrompt(request),
        max_tokens: 1000,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      throw new Error(`Local API error: ${response.status}`);
    }

    const data = await response.json();
    return this.parseResponse(data.text, request);
  }

  private createPrompt(request: OutfitRequest): string {
    const bodyTypeRecommendations = this.getBodyTypeRecommendations(request.bodyType);
    const seasonRecommendations = this.getSeasonRecommendations(request.season);
    const occasionRecommendations = this.getOccasionRecommendations(request.occasion);
    
    const isMale = request.measurements.gender === 'male';
    const genderText = isMale ? '–º—É–∂—á–∏–Ω—ã' : '–∂–µ–Ω—â–∏–Ω—ã';
    const genderTextShort = isMale ? '–º—É–∂—Å–∫–æ–π' : '–∂–µ–Ω—Å–∫–∏–π';
    
    return `
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-—Å—Ç–∏–ª–∏—Å—Ç —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–π –ü–û–õ–ù–´–ô –ì–û–¢–û–í–´–ô –û–ë–†–ê–ó –¢–û–õ–¨–ö–û –¥–ª—è ${genderText}.

–ê–ù–ê–õ–ò–ó –ö–õ–ò–ï–ù–¢–ê:
- –ü–æ–ª: ${isMale ? '–ú—É–∂—á–∏–Ω–∞' : '–ñ–µ–Ω—â–∏–Ω–∞'} (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ß–¢–ò!)
- –¢–∏–ø —Ñ–∏–≥—É—Ä—ã: ${request.bodyType}
- –†–æ—Å—Ç: ${request.measurements.height} —Å–º
- –í–µ—Å: ${request.measurements.weight} –∫–≥
- –†–∞–∑–º–µ—Ä –æ–±—É–≤–∏: ${request.measurements.shoeSize}
- –õ—é–±–∏–º—ã–π —Å–µ–∑–æ–Ω: ${request.measurements.season}

–ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø:
- –°—Ç–∏–ª—å: ${request.stylePreferences.join(', ')}
- –¶–≤–µ—Ç–∞: ${request.colorPreferences.join(', ')}
- –ü–æ–≤–æ–¥: ${request.occasion}
- –°–µ–∑–æ–Ω: ${request.season}
- –ë—é–¥–∂–µ—Ç: ${request.budget}

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –¢–ò–ü–£ –§–ò–ì–£–†–´ (${request.bodyType}):
${bodyTypeRecommendations}

–°–ï–ó–û–ù–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (${request.season}):
${seasonRecommendations}

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–û–í–û–î–£ (${request.occasion}):
${occasionRecommendations}

–ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞–π –ü–û–õ–ù–´–ô –ö–û–ú–ü–õ–ï–ö–¢ –û–î–ï–ñ–î–´ (–º–∏–Ω–∏–º—É–º 4-5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤) –¢–û–õ–¨–ö–û –¥–ª—è ${genderText}.

–í–ê–ñ–ù–û: –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å ${genderTextShort} –æ–¥–µ–∂–¥–æ–π!

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í–ö–õ–Æ–ß–ò:
${isMale ? `
- –í–µ—Ä—Ö (—Ñ—É—Ç–±–æ–ª–∫–∞, —Ä—É–±–∞—à–∫–∞, —Å–≤–∏—Ç–µ—Ä, –ø–æ–ª–æ) - –¢–û–õ–¨–ö–û –ú–£–ñ–°–ö–ò–ï
- –ù–∏–∑ (–¥–∂–∏–Ω—Å—ã, –±—Ä—é–∫–∏, —à–æ—Ä—Ç—ã) - –¢–û–õ–¨–ö–û –ú–£–ñ–°–ö–ò–ï
- –û–±—É–≤—å (–∫—Ä–æ—Å—Å–æ–≤–∫–∏, —Ç—É—Ñ–ª–∏, –±–æ—Ç–∏–Ω–∫–∏) - –¢–û–õ–¨–ö–û –ú–£–ñ–°–ö–ò–ï
- –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã (—á–∞—Å—ã, –æ—á–∫–∏, –∫–µ–ø–∫–∞, —Å—É–º–∫–∞) - –¢–û–õ–¨–ö–û –ú–£–ñ–°–ö–ò–ï
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–∫—É—Ä—Ç–∫–∞, –ø–∞–ª—å—Ç–æ –µ—Å–ª–∏ —Ö–æ–ª–æ–¥–Ω–æ) - –¢–û–õ–¨–ö–û –ú–£–ñ–°–ö–ò–ï` : `
- –í–µ—Ä—Ö (–±–ª—É–∑–∞, —Ç–æ–ø, —Ä—É–±–∞—à–∫–∞, —Å–≤–∏—Ç–µ—Ä) - –¢–û–õ–¨–ö–û –ñ–ï–ù–°–ö–ò–ï
- –ù–∏–∑ (–¥–∂–∏–Ω—Å—ã, —é–±–∫–∞, –±—Ä—é–∫–∏, –ø–ª–∞—Ç—å–µ) - –¢–û–õ–¨–ö–û –ñ–ï–ù–°–ö–ò–ï
- –û–±—É–≤—å (—Ç—É—Ñ–ª–∏, –∫—Ä–æ—Å—Å–æ–≤–∫–∏, –±–æ—Å–æ–Ω–æ–∂–∫–∏) - –¢–û–õ–¨–ö–û –ñ–ï–ù–°–ö–ò–ï
- –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã (—Å—É–º–∫–∞, –æ—á–∫–∏, —É–∫—Ä–∞—à–µ–Ω–∏—è, —à–∞—Ä—Ñ) - –¢–û–õ–¨–ö–û –ñ–ï–ù–°–ö–ò–ï
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–∫—É—Ä—Ç–∫–∞, –ø–∞–ª—å—Ç–æ –µ—Å–ª–∏ —Ö–æ–ª–æ–¥–Ω–æ) - –¢–û–õ–¨–ö–û –ñ–ï–ù–°–ö–ò–ï`}

–í–ê–ñ–ù–û: 
- –°–æ–∑–¥–∞–π –ö–û–ú–ü–õ–ï–ö–¢, –∞ –Ω–µ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç
- –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ—á–µ—Ç–∞—Ç—å—Å—è –º–µ–∂–¥—É —Å–æ–±–æ–π
- –£—á–∏—Ç—ã–≤–∞–π —Å–µ–∑–æ–Ω –∏ –ø–æ–≤–æ–¥
- –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
- –í–°–ï —Å—Ç—Ä–æ–∫–∏ –≤ JSON –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
- –í –º–∞—Å—Å–∏–≤–∞—Ö colors –∏ colorPalette –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏

–°–æ–∑–¥–∞–π –æ–±—Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫):
{
  "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞",
  "description": "–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞",
  "items": [
    {
      "category": "–í–µ—Ä—Ö",
      "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞",
      "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
      "colors": ["—Ü–≤–µ—Ç1", "—Ü–≤–µ—Ç2"],
      "style": "—Å—Ç–∏–ª—å",
      "fit": "–ø–æ—Å–∞–¥–∫–∞",
      "price": "—Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö"
    },
    {
      "category": "–ù–∏–∑",
      "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞",
      "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
      "colors": ["—Ü–≤–µ—Ç1", "—Ü–≤–µ—Ç2"],
      "style": "—Å—Ç–∏–ª—å",
      "fit": "–ø–æ—Å–∞–¥–∫–∞",
      "price": "—Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö"
    },
    {
      "category": "–û–±—É–≤—å",
      "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—É–≤–∏",
      "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
      "colors": ["—Ü–≤–µ—Ç1", "—Ü–≤–µ—Ç2"],
      "style": "—Å—Ç–∏–ª—å",
      "fit": "—Ä–∞–∑–º–µ—Ä",
      "price": "—Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö"
    },
    {
      "category": "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
      "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞",
      "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
      "colors": ["—Ü–≤–µ—Ç1", "—Ü–≤–µ—Ç2"],
      "style": "—Å—Ç–∏–ª—å",
      "fit": "—Ä–∞–∑–º–µ—Ä",
      "price": "—Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö"
    }
  ],
  "styleNotes": "–°–æ–≤–µ—Ç—ã –ø–æ —Å—Ç–∏–ª—é",
  "colorPalette": ["–æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞"],
  "totalPrice": "–æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
  "whyItWorks": "–ü–æ—á–µ–º—É –æ–±—Ä–∞–∑ –ø–æ–¥—Ö–æ–¥–∏—Ç"
}
    `;
  }

  private detectGender(request: OutfitRequest): 'male' | 'female' {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return request.measurements.gender;
  }

  private parseResponse(response: string, request: OutfitRequest): GeneratedOutfit {
    console.log('üìù Raw AI response:', response);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ markdown –±–ª–æ–∫–∞
    const jsonMatch = response.match(/```json\s*([\s\S]*?)\s*```/);
    if (!jsonMatch) {
      console.log('‚ö†Ô∏è No JSON block found, trying to find JSON without markdown...');
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –±–µ–∑ markdown –±–ª–æ–∫–æ–≤
      const jsonStart = response.indexOf('{');
      const jsonEnd = response.lastIndexOf('}');
      if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {
        const jsonString = response.substring(jsonStart, jsonEnd + 1);
        console.log('üîç Found JSON without markdown:', jsonString.substring(0, 200) + '...');
        return this.parseJsonString(jsonString, request);
      }
      console.log('‚ö†Ô∏è No JSON found, using simulation');
      return this.simulateResponse(request);
    }
    
    let jsonString = jsonMatch[1]; // –ë–µ—Ä–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON –±–ª–æ–∫–∞
    return this.parseJsonString(jsonString, request);
  }

  private parseJsonString(jsonString: string, request: OutfitRequest): GeneratedOutfit {
    // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
      const parsed = JSON.parse(jsonString);
      if (parsed.items && Array.isArray(parsed.items)) {
        console.log('‚úÖ Direct JSON parsing successful');
        return this.transformToGeneratedOutfit(parsed, request);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Direct parsing failed, trying manual fix...', error);
    }
    
    // –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ JSON
    jsonString = this.cleanJsonString(jsonString);
    
    try {
      const parsed = JSON.parse(jsonString);
      if (parsed.items && Array.isArray(parsed.items)) {
        console.log('‚úÖ Manual JSON parsing successful');
        return this.transformToGeneratedOutfit(parsed, request);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Manual parsing failed, trying advanced parsing...', error);
    }
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    try {
      const parsed = this.advancedJsonParsing(jsonString);
      if (parsed && parsed.items && Array.isArray(parsed.items)) {
        console.log('‚úÖ Advanced JSON parsing successful');
        return this.transformToGeneratedOutfit(parsed, request);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Advanced parsing failed:', error);
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    console.log('‚ö†Ô∏è All parsing attempts failed, using simulation');
    return this.simulateResponse(request);
  }

  private advancedJsonParsing(jsonString: string): any {
    console.log('üîß Advanced JSON parsing...');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Å –ø–æ–º–æ—â—å—é regex
    const nameMatch = jsonString.match(/"name"\s*:\s*"([^"]+)"/);
    const descriptionMatch = jsonString.match(/"description"\s*:\s*"([^"]+)"/);
    const totalPriceMatch = jsonString.match(/"totalPrice"\s*:\s*"([^"]+)"/);
    const styleNotesMatch = jsonString.match(/"styleNotes"\s*:\s*"([^"]+)"/);
    const whyItWorksMatch = jsonString.match(/"whyItWorks"\s*:\s*"([^"]+)"/);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º colorPalette
    const colorPaletteMatch = jsonString.match(/"colorPalette"\s*:\s*\[([^\]]+)\]/);
    let colorPalette: string[] = [];
    if (colorPaletteMatch) {
      colorPalette = colorPaletteMatch[1].split(',').map(c => 
        c.trim().replace(/"/g, '').replace(/'/g, '')
      );
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º items
    const itemsMatch = jsonString.match(/"items"\s*:\s*\[([\s\S]*?)\]/);
    let items: any[] = [];
    if (itemsMatch) {
      const itemsContent = itemsMatch[1];
      // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ items
      const itemRegex = /\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}/g;
      const itemMatches = itemsContent.match(itemRegex);
      if (itemMatches) {
        items = itemMatches.map(itemStr => {
          try {
            return JSON.parse(itemStr);
          } catch {
            // –†—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ item
            const itemName = itemStr.match(/"name"\s*:\s*"([^"]+)"/)?.[1] || '';
            const itemCategory = itemStr.match(/"category"\s*:\s*"([^"]+)"/)?.[1] || '';
            const itemPrice = itemStr.match(/"price"\s*:\s*"([^"]+)"/)?.[1] || '1000';
            return {
              name: itemName,
              category: itemCategory,
              price: itemPrice,
              colors: ['–ß–µ—Ä–Ω—ã–π'],
              style: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
              fit: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π'
            };
          }
        });
      }
    }
    
    return {
      name: nameMatch?.[1] || '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑',
      description: descriptionMatch?.[1] || '–°–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å',
      totalPrice: totalPriceMatch?.[1] || '5000 ‚ÇΩ',
      styleNotes: styleNotesMatch?.[1] || '–°—Ç–∏–ª—å–Ω—ã–π –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–∑',
      whyItWorks: whyItWorksMatch?.[1] || '',
      colorPalette,
      items
    };
  }

  private cleanJsonString(jsonString: string): string {
    console.log('üîß Cleaning JSON string...');
    
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    let cleaned = jsonString.trim();
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –º–∞—Å—Å–∏–≤–∞—Ö —Ü–≤–µ—Ç–æ–≤
    cleaned = cleaned.replace(/"colors":\s*\[([^\]]+)\]/g, (match, colors) => {
      console.log('üé® Fixing colors array:', colors);
      const fixedColors = colors.split(',').map(c => {
        const cleanColor = c.trim().replace(/"/g, '').replace(/'/g, '');
        return `"${cleanColor}"`;
      }).join(', ');
      return `"colors": [${fixedColors}]`;
    });
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ colorPalette
    cleaned = cleaned.replace(/"colorPalette":\s*\[([^\]]+)\]/g, (match, colors) => {
      console.log('üé® Fixing colorPalette array:', colors);
      const fixedColors = colors.split(',').map(c => {
        const cleanColor = c.trim().replace(/"/g, '').replace(/'/g, '');
        return `"${cleanColor}"`;
      }).join(', ');
      return `"colorPalette": [${fixedColors}]`;
    });
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –ø–æ–ª–µ–π
    cleaned = cleaned.replace(/"([^"]*)"([^"]*):/g, (match, p1, p2) => {
      return `"${p1}${p2}":`;
    });
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ —Å—Ç—Ä–æ–∫–∞—Ö —Å –∑–∞–ø—è—Ç—ã–º–∏
    cleaned = cleaned.replace(/"([^"]*), ([^"]*)"/g, (match, p1, p2) => {
      return `"${p1}, ${p2}"`;
    });
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –ø–æ–ª–µ–π
    cleaned = cleaned.replace(/"([^"]*):\s*([^"]*)"/g, (match, field, value) => {
      return `"${field}": "${value}"`;
    });
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö
    cleaned = cleaned.replace(/"([^"]*)"([^"]*)"([^"]*)"/g, (match, p1, p2, p3) => {
      return `"${p1}${p2}${p3}"`;
    });
    
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
    cleaned = cleaned.replace(/"\s*,\s*"/g, '", "');
    
    console.log('‚úÖ Cleaned JSON:', cleaned.substring(0, 200) + '...');
    return cleaned;
  }

  private transformToGeneratedOutfit(parsed: any, request: OutfitRequest): GeneratedOutfit {
    return {
      id: `outfit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      name: parsed.name || '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑',
      description: parsed.description || '–°–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å',
      occasion: request.occasion,
      season: request.season,
      items: parsed.items || [],
      totalPrice: parsed.totalPrice || '5000 ‚ÇΩ',
      styleNotes: parsed.styleNotes || '–°—Ç–∏–ª—å–Ω—ã–π –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–∑',
      colorPalette: parsed.colorPalette || request.colorPreferences,
      confidence: 0.95
    };
  }

  // –†—É—á–Ω–æ–π –ø–∞—Ä—Å–µ—Ä JSON –∫–∞–∫ fallback
  private manualParseJSON(jsonString: string): any {
    try {
      console.log('üîß Manual parsing JSON:', jsonString.substring(0, 200) + '...');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Å –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º regex
      const nameMatch = jsonString.match(/"name"\s*:\s*"([^"]+)"/);
      const descriptionMatch = jsonString.match(/"description"\s*:\s*"([^"]+)"/);
      const totalPriceMatch = jsonString.match(/"totalPrice"\s*:\s*"([^"]+)"/);
      const styleNotesMatch = jsonString.match(/"styleNotes"\s*:\s*"([^"]+)"/);
      const whyItWorksMatch = jsonString.match(/"whyItWorks"\s*:\s*"([^"]+)"/);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º items —Å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
      const itemsMatch = jsonString.match(/"items"\s*:\s*\[([\s\S]*?)\]/);
      let items = [];
      if (itemsMatch) {
        const itemsContent = itemsMatch[1];
        console.log('üîç Items content found:', itemsContent.substring(0, 100) + '...');
        
        // –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π regex –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ items
        const itemRegex = /\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}/g;
        const itemMatches = itemsContent.match(itemRegex);
        
        if (itemMatches) {
          console.log(`üîç Found ${itemMatches.length} items`);
          items = itemMatches.map((itemStr, index) => {
            console.log(`üîç Parsing item ${index + 1}:`, itemStr.substring(0, 100) + '...');
            
            const nameMatch = itemStr.match(/"name"\s*:\s*"([^"]+)"/);
            const categoryMatch = itemStr.match(/"category"\s*:\s*"([^"]+)"/);
            const priceMatch = itemStr.match(/"price"\s*:\s*"([^"]+)"/);
            const colorsMatch = itemStr.match(/"colors"\s*:\s*\[([^\]]+)\]/);
            const descriptionMatch = itemStr.match(/"description"\s*:\s*"([^"]+)"/);
            const styleMatch = itemStr.match(/"style"\s*:\s*"([^"]+)"/);
            const fitMatch = itemStr.match(/"fit"\s*:\s*"([^"]+)"/);
            
            const item = {
              name: nameMatch ? nameMatch[1] : `–¢–æ–≤–∞—Ä ${index + 1}`,
              category: categoryMatch ? categoryMatch[1] : '–û–¥–µ–∂–¥–∞',
              price: priceMatch ? priceMatch[1] : '1000-3000',
              colors: colorsMatch ? colorsMatch[1].split(',').map(c => c.trim().replace(/"/g, '')) : ['—á–µ—Ä–Ω—ã–π'],
              description: descriptionMatch ? descriptionMatch[1] : '–°—Ç–∏–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä',
              style: styleMatch ? styleMatch[1] : 'casual',
              fit: fitMatch ? fitMatch[1] : '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'
            };
            
            console.log(`‚úÖ Parsed item ${index + 1}:`, item);
            return item;
          });
        } else {
          console.log('‚ö†Ô∏è No items found in regex match, trying alternative parsing...');
          
          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–∞—Ä—Å–∏–Ω–≥–∞ - –∏—â–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
          const itemNames = itemsContent.match(/"name"\s*:\s*"([^"]+)"/g);
          const itemCategories = itemsContent.match(/"category"\s*:\s*"([^"]+)"/g);
          const itemPrices = itemsContent.match(/"price"\s*:\s*"([^"]+)"/g);
          
          if (itemNames) {
            items = itemNames.map((nameStr, index) => {
              const name = nameStr.match(/"name"\s*:\s*"([^"]+)"/)?.[1] || `–¢–æ–≤–∞—Ä ${index + 1}`;
              const category = itemCategories?.[index]?.match(/"category"\s*:\s*"([^"]+)"/)?.[1] || '–û–¥–µ–∂–¥–∞';
              const price = itemPrices?.[index]?.match(/"price"\s*:\s*"([^"]+)"/)?.[1] || '1000-3000';
              
              return {
                name,
                category,
                price,
                colors: ['—á–µ—Ä–Ω—ã–π'],
                description: '–°—Ç–∏–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä',
                style: 'casual',
                fit: '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'
              };
            });
            console.log(`‚úÖ Alternative parsing found ${items.length} items`);
          }
        }
      } else {
        console.log('‚ö†Ô∏è No items array found in JSON');
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º colorPalette
      const colorPaletteMatch = jsonString.match(/"colorPalette"\s*:\s*\[([^\]]+)\]/);
      const colorPalette = colorPaletteMatch 
        ? colorPaletteMatch[1].split(',').map(c => c.trim().replace(/"/g, ''))
        : ['—á–µ—Ä–Ω—ã–π', '–±–µ–ª—ã–π'];
      
      const result = {
        name: nameMatch ? nameMatch[1] : '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑',
        description: descriptionMatch ? descriptionMatch[1] : '–°–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å',
        items: items,
        totalPrice: totalPriceMatch ? totalPriceMatch[1] : '5000-15000',
        styleNotes: styleNotesMatch ? styleNotesMatch[1] : '–°—Ç–∏–ª—å–Ω—ã–π –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–∑',
        colorPalette: colorPalette,
        whyItWorks: whyItWorksMatch ? whyItWorksMatch[1] : '–û–±—Ä–∞–∑ —Å–æ–∑–¥–∞–Ω —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π'
      };
      
      console.log('‚úÖ Manual parsing result:', result);
      return result;
      
    } catch (error) {
      console.error('Manual parsing failed:', error);
      return {
        name: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑',
        description: '–°–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å',
        items: [],
        totalPrice: '5000-15000',
        styleNotes: '–°—Ç–∏–ª—å–Ω—ã–π –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–∑',
        colorPalette: ['—á–µ—Ä–Ω—ã–π', '–±–µ–ª—ã–π']
      };
    }
  }

  simulateResponse(request: OutfitRequest): GeneratedOutfit {
    console.log('üé≠ Generating enhanced simulation outfit...');
    
    const bodyTypeRecommendations = this.getBodyTypeRecommendations(request.bodyType);
    const seasonRecommendations = this.getSeasonRecommendations(request.season);
    const occasionRecommendations = this.getOccasionRecommendations(request.occasion);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    const outfitName = this.generateOutfitName(request);
    const items = this.generateOutfitItems(request);
    const styleNotes = this.generateStyleNotes(request, bodyTypeRecommendations);
    
    // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    const gender = this.detectGender(request);
    const description = this.generateDetailedDescription(request, gender);
    
    return {
      id: `outfit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      name: outfitName,
      description: description,
      occasion: request.occasion,
      season: request.season,
      items: items,
      totalPrice: this.calculateTotalPrice(items),
      styleNotes: styleNotes,
      colorPalette: request.colorPreferences,
      confidence: 0.95
    };
  }

  private generateDetailedDescription(request: OutfitRequest, gender: 'male' | 'female'): string {
    const { bodyType, occasion, season, stylePreferences } = request;
    
    const bodyTypeNames = {
      'hourglass': '–ø–µ—Å–æ—á–Ω—ã–µ —á–∞—Å—ã',
      'inverted-triangle': '–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫',
      'triangle': '—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫',
      'rectangle': '–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫',
      'circle': '–∫—Ä—É–≥',
      'diamond': '—Ä–æ–º–±'
    };
    
    const occasionNames = {
      'casual': '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π',
      'business': '–¥–µ–ª–æ–≤–æ–π',
      'evening': '–≤–µ—á–µ—Ä–Ω–∏–π'
    };
    
    const seasonNames = {
      'spring': '–≤–µ—Å–µ–Ω–Ω–∏–π',
      'summer': '–ª–µ—Ç–Ω–∏–π',
      'autumn': '–æ—Å–µ–Ω–Ω–∏–π',
      'winter': '–∑–∏–º–Ω–∏–π'
    };
    
    const bodyTypeName = bodyTypeNames[bodyType as keyof typeof bodyTypeNames] || bodyType;
    const occasionName = occasionNames[occasion as keyof typeof occasionNames] || occasion;
    const seasonName = seasonNames[season as keyof typeof seasonNames] || season;
    
    return `–°—Ç–∏–ª—å–Ω—ã–π ${occasionName} –æ–±—Ä–∞–∑ –¥–ª—è ${gender === 'female' ? '–∂–µ–Ω—â–∏–Ω—ã' : '–º—É–∂—á–∏–Ω—ã'} —Å —Ñ–∏–≥—É—Ä–æ–π —Ç–∏–ø–∞ "${bodyTypeName}". –û–±—Ä–∞–∑ —Å–æ–∑–¥–∞–Ω —Å —É—á–µ—Ç–æ–º ${seasonName} —Å–µ–∑–æ–Ω–∞ –∏ –≤–∫–ª—é—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∏–ª—è ${stylePreferences.join(', ')}. –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≥–∞—Ä–¥–µ—Ä–æ–±–∞ –ø–æ–¥–æ–±—Ä–∞–Ω—ã —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ñ–∏–≥—É—Ä—ã –∏ —Å–æ–∑–¥–∞—é—Ç –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π, –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –ª—É–∫.`;
  }

  private generateOutfitName(request: OutfitRequest): string {
    const names = {
      casual: ['–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π –æ–±—Ä–∞–∑', '–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –ª—É–∫', '–°—Ç–∏–ª—å–Ω—ã–π casual'],
      business: ['–î–µ–ª–æ–≤–æ–π –æ–±—Ä–∞–∑', '–û—Ñ–∏—Å–Ω—ã–π –ª—É–∫', '–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π business'],
      evening: ['–í–µ—á–µ—Ä–Ω–∏–π –æ–±—Ä–∞–∑', '–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –ª—É–∫', '–ì–ª–∞–º—É—Ä–Ω—ã–π evening']
    };
    
    const style = request.stylePreferences[0] || 'casual';
    const styleNames = names[style as keyof typeof names] || names.casual;
    return styleNames[Math.floor(Math.random() * styleNames.length)];
  }

  private generateOutfitItems(request: OutfitRequest): any[] {
    const items = [];
    const style = request.stylePreferences[0] || 'casual';
    const gender = this.detectGender(request);
    
    if (gender === 'male') {
      // –ú—É–∂—Å–∫–∏–µ –æ–±—Ä–∞–∑—ã
      const maleTops = {
        casual: ['–§—É—Ç–±–æ–ª–∫–∞ —Ö–ª–æ–ø–∫–æ–≤–∞—è', '–†—É–±–∞—à–∫–∞ –ø–æ–ª–æ', '–°–≤–∏—Ç–µ—Ä –≤—è–∑–∞–Ω—ã–π'],
        business: ['–†—É–±–∞—à–∫–∞ –æ—Ñ–∏—Å–Ω–∞—è', '–°–≤–∏—Ç–µ—Ä –∫–∞—Ä–¥–∏–≥–∞–Ω', '–ü–∏–¥–∂–∞–∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π'],
        evening: ['–†—É–±–∞—à–∫–∞ –≤–µ—á–µ—Ä–Ω—è—è', '–°–≤–∏—Ç–µ—Ä —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π', '–ü–∏–¥–∂–∞–∫ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π']
      };
      
      const maleBottoms = {
        casual: ['–î–∂–∏–Ω—Å—ã –ø—Ä—è–º–æ–≥–æ –∫—Ä–æ—è', '–®–æ—Ä—Ç—ã —Ö–ª–æ–ø–∫–æ–≤—ã–µ', '–ë—Ä—é–∫–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ'],
        business: ['–ë—Ä—é–∫–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ', '–ë—Ä—é–∫–∏ –æ—Ñ–∏—Å–Ω—ã–µ', '–î–∂–∏–Ω—Å—ã —Ç–µ–º–Ω—ã–µ'],
        evening: ['–ë—Ä—é–∫–∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ', '–î–∂–∏–Ω—Å—ã —Ç–µ–º–Ω—ã–µ', '–ë—Ä—é–∫–∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ']
      };
      
      const maleShoes = {
        casual: ['–ö—Ä–æ—Å—Å–æ–≤–∫–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ', '–õ–æ—Ñ–µ—Ä—ã –∫–æ–∂–∞–Ω—ã–µ', '–ë–æ—Ç–∏–Ω–∫–∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ'],
        business: ['–¢—É—Ñ–ª–∏ –æ—Ñ–∏—Å–Ω—ã–µ', '–õ–æ—Ñ–µ—Ä—ã –¥–µ–ª–æ–≤—ã–µ', '–û–∫—Å—Ñ–æ—Ä–¥—ã –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ'],
        evening: ['–¢—É—Ñ–ª–∏ –≤–µ—á–µ—Ä–Ω–∏–µ', '–û–∫—Å—Ñ–æ—Ä–¥—ã —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ', '–¢—É—Ñ–ª–∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ']
      };
      
      const maleAccessories = {
        casual: ['–ß–∞—Å—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ', '–ö–µ–ø–∫–∞ –±–µ–π—Å–±–æ–ª–∫–∞', '–†—é–∫–∑–∞–∫ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π'],
        business: ['–ß–∞—Å—ã –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ', '–ü–æ—Ä—Ç—Ñ–µ–ª—å –∫–æ–∂–∞–Ω—ã–π', '–ì–∞–ª—Å—Ç—É–∫ —à–µ–ª–∫–æ–≤—ã–π'],
        evening: ['–ß–∞—Å—ã —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ', '–ü–æ—Ä—Ç—Ñ–µ–ª—å –≤–µ—á–µ—Ä–Ω–∏–π', '–ì–∞–ª—Å—Ç—É–∫ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π']
      };
      
      const styleTops = maleTops[style as keyof typeof maleTops] || maleTops.casual;
      const styleBottoms = maleBottoms[style as keyof typeof maleBottoms] || maleBottoms.casual;
      const styleShoes = maleShoes[style as keyof typeof maleShoes] || maleShoes.casual;
      const styleAccessories = maleAccessories[style as keyof typeof maleAccessories] || maleAccessories.casual;
      
      items.push({
        category: '–í–µ—Ä—Ö',
        name: styleTops[Math.floor(Math.random() * styleTops.length)],
        description: '–°—Ç–∏–ª—å–Ω—ã–π –≤–µ—Ä—Ö –¥–ª—è –º—É–∂—á–∏–Ω',
        colors: request.colorPreferences,
        style: style,
        fit: this.getRecommendedFit(request.bodyType),
        price: '2500-5000'
      });
      
      items.push({
        category: '–ù–∏–∑',
        name: styleBottoms[Math.floor(Math.random() * styleBottoms.length)],
        description: '–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –Ω–∏–∑ –¥–ª—è –º—É–∂—á–∏–Ω',
        colors: request.colorPreferences,
        style: style,
        fit: this.getRecommendedFit(request.bodyType),
        price: '3500-7000'
      });
      
      items.push({
        category: '–û–±—É–≤—å',
        name: styleShoes[Math.floor(Math.random() * styleShoes.length)],
        description: '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–±—É–≤—å –¥–ª—è –º—É–∂—á–∏–Ω',
        colors: request.colorPreferences,
        style: style,
        fit: '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π',
        price: '5000-12000'
      });
      
      items.push({
        category: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã',
        name: styleAccessories[Math.floor(Math.random() * styleAccessories.length)],
        description: '–°—Ç–∏–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –º—É–∂—á–∏–Ω',
        colors: request.colorPreferences,
        style: style,
        fit: '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π',
        price: '2000-8000'
      });
      
    } else {
      // –ñ–µ–Ω—Å–∫–∏–µ –æ–±—Ä–∞–∑—ã
      const femaleTops = {
        casual: ['–ë–ª—É–∑–∞ –∏–∑ —Ö–ª–æ–ø–∫–∞', '–¢–æ–ø –±–∞–∑–æ–≤—ã–π', '–§—É—Ç–±–æ–ª–∫–∞ —Å—Ç–∏–ª—å–Ω–∞—è'],
        business: ['–†—É–±–∞—à–∫–∞ –æ—Ñ–∏—Å–Ω–∞—è', '–ë–ª—É–∑–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è', '–¢–æ–ø –¥–µ–ª–æ–≤–æ–π'],
        evening: ['–ë–ª—É–∑–∞ –≤–µ—á–µ—Ä–Ω—è—è', '–¢–æ–ø —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π', '–†—É–±–∞—à–∫–∞ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è']
      };
      
      const femaleBottoms = {
        casual: ['–î–∂–∏–Ω—Å—ã –ø—Ä—è–º–æ–≥–æ –∫—Ä–æ—è', '–ë—Ä—é–∫–∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ', '–Æ–±–∫–∞ –º–∏–¥–∏'],
        business: ['–ë—Ä—é–∫–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ', '–Æ–±–∫–∞-–∫–∞—Ä–∞–Ω–¥–∞—à', '–ë—Ä—é–∫–∏ –æ—Ñ–∏—Å–Ω—ã–µ'],
        evening: ['–Æ–±–∫–∞ –≤–µ—á–µ—Ä–Ω—è—è', '–ë—Ä—é–∫–∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ', '–ü–ª–∞—Ç—å–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ']
      };
      
      const femaleShoes = {
        casual: ['–ö—Ä–æ—Å—Å–æ–≤–∫–∏ —Å—Ç–∏–ª—å–Ω—ã–µ', '–õ–æ—Ñ–µ—Ä—ã –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ', '–ë–∞–ª–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ'],
        business: ['–¢—É—Ñ–ª–∏ –Ω–∞ –∫–∞–±–ª—É–∫–µ', '–õ–æ—Ñ–µ—Ä—ã –¥–µ–ª–æ–≤—ã–µ', '–ë–∞–ª–µ—Ç–∫–∏ –æ—Ñ–∏—Å–Ω—ã–µ'],
        evening: ['–¢—É—Ñ–ª–∏ –≤–µ—á–µ—Ä–Ω–∏–µ', '–ë–æ—Å–æ–Ω–æ–∂–∫–∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ', '–¢—É—Ñ–ª–∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ']
      };
      
      const femaleAccessories = {
        casual: ['–°—É–º–∫–∞ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è', '–û—á–∫–∏ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ', '–®–∞—Ä—Ñ –ª–µ–≥–∫–∏–π'],
        business: ['–°—É–º–∫–∞ –æ—Ñ–∏—Å–Ω–∞—è', '–û—á–∫–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ', '–®–∞—Ä—Ñ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π'],
        evening: ['–°—É–º–∫–∞ –≤–µ—á–µ—Ä–Ω—è—è', '–û—á–∫–∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ', '–£–∫—Ä–∞—à–µ–Ω–∏—è']
      };
      
      const styleTops = femaleTops[style as keyof typeof femaleTops] || femaleTops.casual;
      const styleBottoms = femaleBottoms[style as keyof typeof femaleBottoms] || femaleBottoms.casual;
      const styleShoes = femaleShoes[style as keyof typeof femaleShoes] || femaleShoes.casual;
      const styleAccessories = femaleAccessories[style as keyof typeof femaleAccessories] || femaleAccessories.casual;
      
      items.push({
        category: '–í–µ—Ä—Ö',
        name: styleTops[Math.floor(Math.random() * styleTops.length)],
        description: '–°—Ç–∏–ª—å–Ω—ã–π –≤–µ—Ä—Ö –¥–ª—è –∂–µ–Ω—â–∏–Ω',
        colors: request.colorPreferences,
        style: style,
        fit: this.getRecommendedFit(request.bodyType),
        price: '2000-4000'
      });
      
      items.push({
        category: '–ù–∏–∑',
        name: styleBottoms[Math.floor(Math.random() * styleBottoms.length)],
        description: '–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –Ω–∏–∑ –¥–ª—è –∂–µ–Ω—â–∏–Ω',
        colors: request.colorPreferences,
        style: style,
        fit: this.getRecommendedFit(request.bodyType),
        price: '3000-6000'
      });
      
      items.push({
        category: '–û–±—É–≤—å',
        name: styleShoes[Math.floor(Math.random() * styleShoes.length)],
        description: '–°—Ç–∏–ª—å–Ω–∞—è –æ–±—É–≤—å –¥–ª—è –∂–µ–Ω—â–∏–Ω',
        colors: request.colorPreferences,
        style: style,
        fit: '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π',
        price: '4000-8000'
      });
      
      items.push({
        category: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã',
        name: styleAccessories[Math.floor(Math.random() * styleAccessories.length)],
        description: '–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –∂–µ–Ω—â–∏–Ω',
        colors: request.colorPreferences,
        style: style,
        fit: '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π',
        price: '1500-5000'
      });
    }
    
    return items;
  }

  private getRecommendedFit(bodyType: string): string {
    const fits = {
      apple: '—Å–≤–æ–±–æ–¥–Ω—ã–π –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–∞–ª–∏–∏',
      pear: '–ø—Ä–∏—Ç–∞–ª–µ–Ω–Ω—ã–π –≤–µ—Ä—Ö, —Å–≤–æ–±–æ–¥–Ω—ã–π –Ω–∏–∑',
      hourglass: '–ø—Ä–∏—Ç–∞–ª–µ–Ω–Ω—ã–π',
      rectangle: '–ø—Ä—è–º–æ–π –∫—Ä–æ–π',
      'inverted-triangle': '—Å–≤–æ–±–æ–¥–Ω—ã–π –≤–µ—Ä—Ö, –ø—Ä–∏—Ç–∞–ª–µ–Ω–Ω—ã–π –Ω–∏–∑'
    };
    
    return fits[bodyType as keyof typeof fits] || '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π';
  }

  private generateStyleNotes(request: OutfitRequest, bodyTypeRecommendations: string): string {
    const notes = [
      `–û–±—Ä–∞–∑ —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è ${request.bodyType} —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã.`,
      `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è ${request.occasion} –≤ ${request.season} —Å–µ–∑–æ–Ω.`,
      `–¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞: ${request.colorPreferences.join(', ')}.`,
      bodyTypeRecommendations.split('\n')[1] || '–ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ —Ñ–∏–≥—É—Ä—ã.'
    ];
    
    return notes.join(' ');
  }

  private calculateTotalPrice(items: any[]): string {
    const total = items.reduce((sum, item) => {
      const priceRange = item.price.split('-');
      const avgPrice = (parseInt(priceRange[0]) + parseInt(priceRange[1])) / 2;
      return sum + avgPrice;
    }, 0);
    
    return `${Math.round(total)} ‚ÇΩ`;
  }

  // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  getPerformanceMetrics() {
    const metrics: Record<string, any> = {};
    
    for (const [provider, times] of Object.entries(this.responseTimes)) {
      if (times.length > 0) {
        metrics[provider] = {
          averageTime: times.reduce((a, b) => a + b, 0) / times.length,
          minTime: Math.min(...times),
          maxTime: Math.max(...times),
          requestCount: times.length
        };
      }
    }
    
    return metrics;
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  async switchProvider(provider: AIProvider) {
    if (await this.testProvider(provider)) {
      this.currentProvider = provider;
      console.log(`Switched to provider: ${provider}`);
      return true;
    }
    return false;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  getCurrentProvider(): AIProvider {
    return this.currentProvider;
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É —Ñ–∏–≥—É—Ä—ã
  private getBodyTypeRecommendations(bodyType: string): string {
    const recommendations = {
      'hourglass': `
‚Ä¢ –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π—Ç–µ —Ç–∞–ª–∏—é - —ç—Ç–æ –≤–∞—à–∞ —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –ø—Ä–∏—Ç–∞–ª–µ–Ω–Ω—ã–µ —Å–∏–ª—É—ç—Ç—ã –∏ –ø–æ—è—Å–∞
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –º–µ—à–∫–æ–≤–∞—Ç–æ–π –æ–¥–µ–∂–¥—ã –∏ –ø—Ä—è–º—ã—Ö —Å–∏–ª—É—ç—Ç–æ–≤
‚Ä¢ –ë–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ –≤–µ—Ä—Ö –∏ –Ω–∏–∑ - –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π—Ç–µ –æ–¥–Ω—É —á–∞—Å—Ç—å`,
      'inverted-triangle': `
‚Ä¢ –ë–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ —à–∏—Ä–æ–∫–∏–µ –ø–ª–µ—á–∏ —Å –æ–±—ä–µ–º–æ–º –≤–Ω–∏–∑—É
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –ê-—Å–∏–ª—É—ç—Ç—ã –∏ —Ä–∞—Å–∫–ª–µ—à–µ–Ω–Ω—ã–µ —é–±–∫–∏
‚Ä¢ –¢–µ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤–µ—Ä—Ö–∞, —Å–≤–µ—Ç–ª—ã–µ –¥–ª—è –Ω–∏–∑–∞
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–±—ä–µ–º–Ω—ã—Ö –ø–ª–µ—á –∏ —è—Ä–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏`,
      'triangle': `
‚Ä¢ –ê–∫—Ü–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Ç–µ–ª–∞
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–µ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –Ω–∏–∑–∞, —Å–≤–µ—Ç–ª—ã–µ –¥–ª—è –≤–µ—Ä—Ö–∞
‚Ä¢ V-–æ–±—Ä–∞–∑–Ω—ã–µ –≤—ã—Ä–µ–∑—ã –∏ —è—Ä–∫–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ –≥—Ä—É–¥–∏
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–±—Ç—è–≥–∏–≤–∞—é—â–∏—Ö —é–±–æ–∫ –∏ —Å–≤–µ—Ç–ª—ã—Ö –±—Ä—é–∫`,
      'rectangle': `
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –æ–¥–µ–∂–¥—É —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Ç–∞–ª–∏—é (–ø–æ—è—Å–∞, –ø—Ä–∏—Ç–∞–ª–µ–Ω–Ω—ã–µ —Å–∏–ª—É—ç—Ç—ã)
‚Ä¢ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –∏ –ø–æ–ª–æ—Å–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ —É–¥–ª–∏–Ω—è—é—Ç —Ñ–∏–≥—É—Ä—É
‚Ä¢ –ê-—Å–∏–ª—É—ç—Ç—ã –∏ —Ç—Ä–∞–ø–µ—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç –æ–±—ä–µ–º –≤ –Ω—É–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –º–µ—à–∫–æ–≤–∞—Ç–æ–π –æ–¥–µ–∂–¥—ã - –æ–Ω–∞ —Å–∫—Ä—ã–≤–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏`,
      'circle': `
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –∏ —É–¥–ª–∏–Ω—è—é—â–∏–µ —Å–∏–ª—É—ç—Ç—ã
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –æ–¥–µ–∂–¥—É —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –Ω–æ–≥–∏
‚Ä¢ V-–æ–±—Ä–∞–∑–Ω—ã–µ –≤—ã—Ä–µ–∑—ã –∏ —É–¥–ª–∏–Ω–µ–Ω–Ω—ã–µ –∫–∞—Ä–¥–∏–≥–∞–Ω—ã
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–±—Ç—è–≥–∏–≤–∞—é—â–µ–π –æ–¥–µ–∂–¥—ã –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–∞–ª–∏–∏`,
      'diamond': `
‚Ä¢ –ë–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ —à–∏—Ä–æ–∫—É—é —Ç–∞–ª–∏—é —Å –∞–∫—Ü–µ–Ω—Ç–∞–º–∏ –Ω–∞ –ø–ª–µ—á–∏ –∏ –±–µ–¥—Ä–∞
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –ê-—Å–∏–ª—É—ç—Ç—ã –∏ –ø—Ä–∏—Ç–∞–ª–µ–Ω–Ω—ã–µ —Å–∏–ª—É—ç—Ç—ã
‚Ä¢ –¢–µ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏, —Å–≤–µ—Ç–ª—ã–µ –¥–ª—è –≤–µ—Ä—Ö–∞ –∏ –Ω–∏–∑–∞
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–±—Ç—è–≥–∏–≤–∞—é—â–µ–π –æ–¥–µ–∂–¥—ã –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–∞–ª–∏–∏`
    };
    
    return recommendations[bodyType as keyof typeof recommendations] || 
           '–í—ã–±–∏—Ä–∞–π—Ç–µ –æ–¥–µ–∂–¥—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –≤–∞—à–∏ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏.';
  }

  // –°–µ–∑–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  private getSeasonRecommendations(season: string): string {
    const recommendations = {
      'spring': `
‚Ä¢ Light pastel tones and bright accents
‚Ä¢ Light fabrics: cotton, linen, silk
‚Ä¢ Layering: cardigans, vests
‚Ä¢ Floral prints and delicate patterns`,
      'summer': `
‚Ä¢ Light breathable fabrics: cotton, linen, viscose
‚Ä¢ Light and bright colors
‚Ä¢ Minimalist silhouettes
‚Ä¢ Sun protection: hats, sunglasses`,
      'autumn': `
‚Ä¢ Warm earthy tones: brown, burgundy, orange
‚Ä¢ Dense fabrics: wool, tweed, denim
‚Ä¢ Layering: coats, scarves, hats
‚Ä¢ Classic prints: plaid, polka dots`,
      'winter': `
‚Ä¢ Dark colors and bright accents
‚Ä¢ Warm fabrics: wool, cashmere, fur
‚Ä¢ Layering and volume
‚Ä¢ Contrast combinations and metallic accents`
    };
    
    return recommendations[season as keyof typeof recommendations] || 
           'Choose clothing appropriate for the season and weather conditions.';
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–≤–æ–¥—É
  private getOccasionRecommendations(occasion: string): string {
    const recommendations = {
      'casual': `
‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞
‚Ä¢ –î–∂–∏–Ω—Å—ã, —Ñ—É—Ç–±–æ–ª–∫–∏, –∫—Ä–æ—Å—Å–æ–≤–∫–∏
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —É–¥–æ–±–Ω—ã–µ —Å–∏–ª—É—ç—Ç—ã
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã`,
      'business': `
‚Ä¢ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å
‚Ä¢ –ö–æ—Å—Ç—é–º—ã, –±–ª—É–∑—ã, —Ç—É—Ñ–ª–∏ –Ω–∞ –∫–∞–±–ª—É–∫–µ
‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞: —á–µ—Ä–Ω—ã–π, —Å–µ—Ä—ã–π, –±–µ–ª—ã–π, —Å–∏–Ω–∏–π
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è`,
      'evening': `
‚Ä¢ –≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –≤–µ—á–µ—Ä–Ω–∏–µ –Ω–∞—Ä—è–¥—ã
‚Ä¢ –ü–ª–∞—Ç—å—è, –∫–æ—Å—Ç—é–º—ã, —Ç—É—Ñ–ª–∏ –Ω–∞ –∫–∞–±–ª—É–∫–µ
‚Ä¢ –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –∏ –±–ª–µ—Å—Ç—è—â–∏–µ –∞–∫—Ü–µ–Ω—Ç—ã
‚Ä¢ –î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è –∏ –∫–ª–∞—Ç—á–∏`,
      'sport': `
‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å
‚Ä¢ –î—ã—à–∞—â–∏–µ —Ç–∫–∞–Ω–∏ –∏ —É–¥–æ–±–Ω—ã–µ —Å–∏–ª—É—ç—Ç—ã
‚Ä¢ –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã: —Å—É–º–∫–∏, –±—É—Ç—ã–ª–∫–∏`
    };
    
    return recommendations[occasion as keyof typeof recommendations] || 
           '–í—ã–±–∏—Ä–∞–π—Ç–µ –æ–¥–µ–∂–¥—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ–æ—Ä–º–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.';
  }
}

export const aiService = new AIService(); 