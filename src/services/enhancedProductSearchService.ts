// –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ AI-–æ–±—Ä–∞–∑–∞
import { wildberriesService } from './wildberriesService';

export interface OutfitItem {
  category: string;
  name: string;
  description: string;
  colors: string[];
  style: string;
  fit: string;
  price: string;
}

export interface ApprovedOutfit {
  id: string;
  name: string;
  description: string;
  occasion: string;
  season: string;
  items: OutfitItem[];
  totalPrice: string;
  styleNotes: string;
  colorPalette: string[];
  confidence: number;
}

export interface ProductSearchResult {
  id: string;
  name: string;
  price: number;
  originalPrice?: number;
  discount?: number;
  rating: number;
  reviews: number;
  image: string;
  url: string;
  marketplace: string;
  category: string;
  colors: string[];
  sizes: string[];
  relevanceScore: number; // –û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (0-1)
  matchReason: string; // –ü—Ä–∏—á–∏–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
}

export interface ProductSearchRequest {
  outfit: ApprovedOutfit;
  maxResults?: number;
  minRelevanceScore?: number;
  preferredMarketplace?: 'wildberries' | 'ozon' | 'lamoda' | 'all';
}

export class EnhancedProductSearchService {
  private searchCache = new Map<string, ProductSearchResult[]>();
  private cacheTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  constructor() {
    console.log('üîç Initializing Enhanced Product Search Service...');
  }

  async searchProductsForOutfit(request: ProductSearchRequest): Promise<ProductSearchResult[]> {
    const { outfit, maxResults = 20, minRelevanceScore = 0.3, preferredMarketplace = 'all' } = request;
    
    console.log('üîç Searching products for approved outfit:', outfit.name);
    console.log(`üìä Items to search: ${outfit.items.length}`);
    
    const allResults: ProductSearchResult[] = [];
    
    // –ü–æ–∏—Å–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–¥–µ–∂–¥—ã
    for (const item of outfit.items) {
      console.log(`üîç Searching for: ${item.category} - ${item.name}`);
      
      const itemResults = await this.searchForItem(item, outfit, preferredMarketplace);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      const filteredResults = itemResults.filter(result => result.relevanceScore >= minRelevanceScore);
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      filteredResults.sort((a, b) => b.relevanceScore - a.relevanceScore);
      
      allResults.push(...filteredResults);
    }
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    const uniqueResults = this.removeDuplicates(allResults);
    uniqueResults.sort((a, b) => b.relevanceScore - a.relevanceScore);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const finalResults = uniqueResults.slice(0, maxResults);
    
    console.log(`‚úÖ Found ${finalResults.length} relevant products`);
    
    return finalResults;
  }

  private async searchForItem(
    item: OutfitItem, 
    outfit: ApprovedOutfit, 
    preferredMarketplace: string
  ): Promise<ProductSearchResult[]> {
    const cacheKey = this.generateCacheKey(item, outfit, preferredMarketplace);
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    // const cached = this.searchCache.get(cacheKey);
    // if (cached && Date.now() - this.getCacheTimestamp(cacheKey) < this.cacheTimeout) {
    //   console.log('üì¶ Using cached results for:', item.name);
    //   return cached;
    // }
    
    const results: ProductSearchResult[] = [];
    
    try {
      // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      const searchQuery = this.buildEnhancedSearchQuery(item, outfit);
      console.log(`üîç Search query: ${searchQuery}`);
      
      // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Wildberries (–æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å)
      if (preferredMarketplace === 'all' || preferredMarketplace === 'wildberries') {
        const wildberriesResults = await this.searchWildberries(searchQuery, item, outfit);
        results.push(...wildberriesResults);
      }
      
      // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã
      // if (preferredMarketplace === 'all' || preferredMarketplace === 'ozon') {
      //   const ozonResults = await this.searchOzon(searchQuery, item, outfit);
      //   results.push(...ozonResults);
      // }
      
      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      this.searchCache.set(cacheKey, results);
      this.setCacheTimestamp(cacheKey);
      
    } catch (error) {
      console.error('‚ùå Error searching for item:', item.name, error);
    }
    
    return results;
  }

  private buildEnhancedSearchQuery(item: OutfitItem, outfit: ApprovedOutfit): string {
    const parts: string[] = [];
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    parts.push(item.category);
    
    // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    if (item.name) {
      parts.push(item.name);
    }
    
    // –¶–≤–µ—Ç–∞
    if (item.colors && item.colors.length > 0) {
      parts.push(...item.colors);
    }
    
    // –°—Ç–∏–ª—å
    if (item.style) {
      parts.push(item.style);
    }
    
    // –°–µ–∑–æ–Ω
    if (outfit.season) {
      parts.push(outfit.season);
    }
    
    // –ü–æ–≤–æ–¥
    if (outfit.occasion) {
      parts.push(outfit.occasion);
    }
    
    // –ü–æ–ª (–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è)
    if (outfit.description.includes('–∂–µ–Ω—Å–∫')) {
      parts.push('–∂–µ–Ω—Å–∫–∞—è');
    } else if (outfit.description.includes('–º—É–∂—Å–∫')) {
      parts.push('–º—É–∂—Å–∫–∞—è');
    }
    
    return parts.join(' ');
  }

  private async searchWildberries(
    query: string, 
    item: OutfitItem, 
    outfit: ApprovedOutfit
  ): Promise<ProductSearchResult[]> {
    try {
      const params = {
        bodyType: outfit.description.includes('–ø–µ—Å–æ—á–Ω—ã–µ —á–∞—Å—ã') ? 'hourglass' : 
                  outfit.description.includes('–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫') ? 'rectangle' :
                  outfit.description.includes('—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫') ? 'triangle' : 'hourglass',
        occasion: outfit.occasion,
        gender: outfit.description.includes('–∂–µ–Ω—Å–∫') ? 'female' : 'male'
      };
      
      const results = await wildberriesService.getRecommendations(params);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
      const filteredResults = results
        .filter(product => this.isProductRelevant(product, item, outfit))
        .map(product => this.calculateRelevanceScore(product, item, outfit))
        .filter(result => result.relevanceScore > 0.1); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
      
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
      if (filteredResults.length === 0) {
        console.log('‚ö†Ô∏è No relevant products found, using fallback data for:', item.name);
        return this.getFallbackProducts(item, outfit);
      }
      
      return filteredResults;
      
    } catch (error) {
      console.error('‚ùå Wildberries search failed:', error);
      return this.getFallbackProducts(item, outfit);
    }
  }

  private isProductRelevant(product: any, item: OutfitItem, outfit: ApprovedOutfit): boolean {
    const productName = product.name.toLowerCase();
    const itemName = item.name.toLowerCase();
    const itemCategory = item.category.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (!productName.includes(itemCategory) && !itemCategory.includes(productName)) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    const nameMatch = itemName.split(' ').some(word => 
      productName.includes(word) && word.length > 2
    );
    
    return nameMatch;
  }

  private calculateRelevanceScore(
    product: any, 
    item: OutfitItem, 
    outfit: ApprovedOutfit
  ): ProductSearchResult {
    let score = 0;
    const reasons: string[] = [];
    
    const productName = product.name.toLowerCase();
    const itemName = item.name.toLowerCase();
    const itemCategory = item.category.toLowerCase();
    
    // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (30%)
    if (productName.includes(itemCategory) || itemCategory.includes(productName)) {
      score += 0.3;
      reasons.push('—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
    
    // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è (40%)
    const nameWords = itemName.split(' ').filter(word => word.length > 2);
    const nameMatches = nameWords.filter(word => productName.includes(word));
    const nameScore = nameMatches.length / nameWords.length;
    score += nameScore * 0.4;
    
    if (nameScore > 0) {
      reasons.push(`—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è (${Math.round(nameScore * 100)}%)`);
    }
    
    // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–≤–µ—Ç–∞ (20%)
    if (item.colors && item.colors.length > 0) {
      const colorMatches = item.colors.filter(color => 
        product.colors.some((productColor: string) => 
          productColor.toLowerCase().includes(color.toLowerCase())
        )
      );
      const colorScore = colorMatches.length / item.colors.length;
      score += colorScore * 0.2;
      
      if (colorScore > 0) {
        reasons.push(`—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–≤–µ—Ç–æ–≤ (${Math.round(colorScore * 100)}%)`);
      }
    }
    
    // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∏–ª—è (10%)
    if (item.style && productName.includes(item.style.toLowerCase())) {
      score += 0.1;
      reasons.push('—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∏–ª—è');
    }
    
    return {
      ...product,
      relevanceScore: Math.min(score, 1),
      matchReason: reasons.join(', ')
    };
  }

  private removeDuplicates(results: ProductSearchResult[]): ProductSearchResult[] {
    const seen = new Set<string>();
    return results.filter(result => {
      const key = `${result.marketplace}-${result.id}`;
      if (seen.has(key)) {
        return false;
      }
      seen.add(key);
      return true;
    });
  }

  private generateCacheKey(item: OutfitItem, outfit: ApprovedOutfit, marketplace: string): string {
    return `${item.category}-${item.name}-${outfit.occasion}-${outfit.season}-${marketplace}`;
  }

  private getCacheTimestamp(key: string): number {
    const timestamp = this.searchCache.get(`timestamp-${key}`);
    return timestamp ? timestamp[0]?.timestamp || 0 : 0;
  }

  private setCacheTimestamp(key: string): void {
    this.searchCache.set(`timestamp-${key}`, [{ timestamp: Date.now() }]);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏
  private async searchOzon(query: string, item: OutfitItem, outfit: ApprovedOutfit): Promise<ProductSearchResult[]> {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Ozon API
    console.log('üõí Ozon search not implemented yet');
    return [];
  }

  private async searchLamoda(query: string, item: OutfitItem, outfit: ApprovedOutfit): Promise<ProductSearchResult[]> {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Lamoda API
    console.log('üõí Lamoda search not implemented yet');
    return [];
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getSearchStats(): { totalSearches: number; cacheHits: number; averageRelevance: number } {
    const totalSearches = this.searchCache.size;
    const cacheHits = 0; // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç cache hits
    const averageRelevance = 0.7; // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    
    return { totalSearches, cacheHits, averageRelevance };
  }

  clearCache(): void {
    this.searchCache.clear();
    console.log('üóëÔ∏è Product search cache cleared');
  }

  private getFallbackProducts(item: OutfitItem, outfit: ApprovedOutfit): ProductSearchResult[] {
    const fallbackProducts = [
      {
        id: `fallback_${item.category}_1`,
        name: `${item.name} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π)`,
        price: Math.floor(Math.random() * 5000) + 1000,
        originalPrice: Math.floor(Math.random() * 7000) + 2000,
        discount: Math.floor(Math.random() * 30) + 10,
        rating: 4.0 + Math.random() * 0.5,
        reviews: Math.floor(Math.random() * 500) + 50,
        image: '/placeholder.svg',
        url: 'https://www.wildberries.ru/',
        marketplace: 'wildberries',
        category: item.category,
        colors: item.colors,
        sizes: ['S', 'M', 'L', 'XL'],
        relevanceScore: 0.8,
        matchReason: '—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–æ–≤–∞—Ä'
      },
      {
        id: `fallback_${item.category}_2`,
        name: `${item.name} (–ø–æ–ø—É–ª—è—Ä–Ω—ã–π)`,
        price: Math.floor(Math.random() * 4000) + 800,
        originalPrice: Math.floor(Math.random() * 6000) + 1500,
        discount: Math.floor(Math.random() * 25) + 5,
        rating: 4.2 + Math.random() * 0.3,
        reviews: Math.floor(Math.random() * 300) + 30,
        image: '/placeholder.svg',
        url: 'https://www.wildberries.ru/',
        marketplace: 'wildberries',
        category: item.category,
        colors: item.colors,
        sizes: ['S', 'M', 'L'],
        relevanceScore: 0.7,
        matchReason: '–ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä'
      }
    ];

    return fallbackProducts;
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const enhancedProductSearchService = new EnhancedProductSearchService();