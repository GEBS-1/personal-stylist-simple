import { env, getValidApiKeys } from "@/config/env";
import { advancedWildberriesService } from './advancedWildberriesService';

/**
 * Wildberries Service - —ç–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 * 
 * –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å —ç–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç —Ç–æ–≤–∞—Ä—ã –Ω–∞ Wildberries:
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ endpoints
 * - –≠–º—É–ª–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
 * - –ù–µ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–µ–π
 * - –ü–æ–º–æ–≥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞–º –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
 */

export interface Product {
  id: string;
  name: string;
  price: number;
  originalPrice?: number;
  discount?: number;
  rating?: number;
  reviews?: number;
  image: string;
  url: string;
  marketplace: 'wildberries';
  category: string;
  colors?: string[];
  sizes?: string[];
}

export interface SearchParams {
  query: string;
  bodyType: string;
  occasion: string;
  budget: string;
  gender: 'male' | 'female';
  limit?: number;
}

class WildberriesService {
  private baseUrl = 'https://search.wb.ru/exactmatch/ru/common/v4/search';
  private cache = new Map<string, { data: Product[], timestamp: number }>();
  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  constructor() {
    // –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω API –∫–ª—é—á - —ç–º—É–ª–∏—Ä—É–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('ü§ñ Wildberries Service: Emulating user search behavior');
  }

  async searchProducts(params: SearchParams): Promise<Product[]> {
    try {
      console.log('üîç Starting real Wildberries search for:', params.query);
      
      // 1. –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã
      console.log('üöÄ Step 1: Trying advanced bypass methods...');
      let products = await advancedWildberriesService.searchWithAdvancedMethods(params);
      
      if (!products || products.length === 0) {
        // 2. –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API —Å –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        console.log('üîç Step 2: Trying main API with bypass...');
        products = await this.searchWithMainAPI(params) || [];
      }
      
      if (!products || products.length === 0) {
        // 3. –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API
        console.log('üîç Step 3: Trying alternative APIs...');
        products = await this.searchWithAlternativeAPI(params) || [];
      }
      
      if (!products || products.length === 0) {
        // 4. –ü—Ä–æ–±—É–µ–º –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥
        console.log('üîç Step 4: Trying web scraping...');
        products = await this.searchWithWebScraping(params) || [];
      }
      
      if (!products || products.length === 0) {
        // 5. Fallback –Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—é
        console.log('üé® Step 5: Falling back to simulated products...');
        products = this.searchByKeywords(params) || [];
      }
      
      if (!products || products.length === 0) {
        // 6. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback
        console.log('üîç Step 6: Using fallback products...');
        return this.getFallbackProducts(params);
      }

      console.log(`‚úÖ Successfully found ${products.length} products (real + simulated)`);
      return products;

    } catch (error) {
      console.error('‚ùå Real API search failed:', error);
      console.log('üîÑ Falling back to simulated products');
      
      try {
        const products = this.searchByKeywords(params);
        if (products.length > 0) {
          return products;
        }
      } catch (keywordError) {
        console.error('‚ùå Simulated search also failed:', keywordError);
      }
      
      return this.getFallbackProducts(params);
    }
  }

  private async searchWithMainAPI(params: SearchParams): Promise<Product[]> {
    // Use the query already present in params, which should be the specific item query
    const searchQuery = params.query; // FIX: Use params.query directly
    console.log(`üîç Searching via proxy with query: "${searchQuery}"`);
    console.log(`üîç Original params:`, { query: params.query, gender: params.gender, bodyType: params.bodyType, occasion: params.occasion });
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä
      const proxyUrl = 'http://localhost:3001/api/wildberries/search';
      const proxyParams = new URLSearchParams({
        query: searchQuery,
        limit: (params.limit || 5).toString(),
        offset: '0'
      });

      console.log(`üåê Making proxy request to: ${proxyUrl}`);
      
      const response = await fetch(`${proxyUrl}?${proxyParams}`, {
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        signal: AbortSignal.timeout(15000)
      });

      console.log(`üì° Proxy response status: ${response.status}`);
      
      if (!response.ok) {
        console.log(`‚ùå Proxy failed: ${response.status} ${response.statusText}`);
        
        // –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–∏–º—É–ª—è—Ü–∏–∏
        if (response.status === 404 || response.status === 500) {
          console.log('üîÑ Proxy server error, switching to simulated products');
          return this.searchByKeywords(params);
        }
        
        return [];
      }

      const data = await response.json();
      console.log(`üì¶ Proxy response data:`, data);
      
      if (data.success && data.products && data.products.length > 0) {
        console.log(`‚úÖ Found ${data.products.length} products via proxy`);
        return data.products;
      }
      
    } catch (error) {
      console.log(`‚ùå Proxy error:`, error);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
      const errorMessage = error.message || error.toString();
      
      if (errorMessage.includes('ERR_TUNNEL_CONNECTION_FAILED')) {
        console.log('üåê Tunnel connection failed - network/proxy issue');
      } else if (errorMessage.includes('ERR_CERT_COMMON_NAME_INVALID')) {
        console.log('üîí SSL certificate issue detected');
      } else if (errorMessage.includes('timeout')) {
        console.log('‚è±Ô∏è Request timeout');
      } else if (errorMessage.includes('fetch')) {
        console.log('üåê Network fetch error');
      }
      
      console.log('üîÑ Switching to simulated products due to network issues');
      return this.searchByKeywords(params);
    }
    
    console.log(`‚ùå Proxy search failed, falling back to direct API`);
    
    // Fallback –∫ –ø—Ä—è–º–æ–º—É API (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ CORS)
    try {
      const apiParams = new URLSearchParams({
        TestGroup: 'no_test',
        TestID: 'no_test',
        appType: '1',
        curr: 'rub',
        dest: '-1257786',
        query: searchQuery,
        resultset: 'catalog',
        sort: 'popular',
        suppressSpellcheck: 'false',
        uoffset: '0',
        ulimit: (params.limit || 5).toString(),
        lang: 'ru',
        locale: 'ru'
      });

      console.log('üåê Attempting direct API call...');
      
      const response = await fetch(`https://search.wb.ru/exactmatch/ru/common/v4/search?${apiParams}`, {
        headers: {
          'Accept': 'application/json',
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
          'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8'
        },
        signal: AbortSignal.timeout(10000)
      });

      if (response.ok) {
        const data = await response.json();
        if (data.data?.products && data.data.products.length > 0) {
          console.log(`‚úÖ Found ${data.data.products.length} products via direct API`);
          return this.parseProducts(data.data.products, params);
        }
      }
    } catch (error) {
      console.warn('‚ùå Main API search completely failed:', error);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
      const errorMessage = error.message || error.toString();
      if (errorMessage.includes('CORS') || errorMessage.includes('blocked')) {
        console.log('üö´ CORS blocked - expected for direct API calls');
      }
    }
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–π fallback –∫ —Å–∏–º—É–ª—è—Ü–∏–∏
    console.log('üé≠ All real API attempts failed, using simulated products');
    return this.searchByKeywords(params);
  }

  private async searchWithWebScraping(params: SearchParams): Promise<Product[]> {
    const searchQuery = this.buildSearchQuery(params);
    
    console.log('üîç Attempting web scraping for:', searchQuery);
    
    try {
      // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
      const searchUrl = `https://www.wildberries.ru/catalog/0/search.aspx?search=${encodeURIComponent(searchQuery)}`;
      
      const response = await fetch(searchUrl, {
        method: 'GET',
        headers: {
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
          'Accept-Encoding': 'gzip, deflate, br',
          'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
          'Cache-Control': 'no-cache',
          'Connection': 'keep-alive',
          'DNT': '1',
          'Pragma': 'no-cache',
          'Upgrade-Insecure-Requests': '1',
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
          'Sec-Ch-Ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
          'Sec-Ch-Ua-Mobile': '?0',
          'Sec-Ch-Ua-Platform': '"Windows"',
          'Sec-Fetch-Dest': 'document',
          'Sec-Fetch-Mode': 'navigate',
          'Sec-Fetch-Site': 'none',
          'Sec-Fetch-User': '?1'
        },
        signal: AbortSignal.timeout(15000)
      });

      if (response.ok) {
        const html = await response.text();
        console.log(`üì¶ Got HTML response, length: ${html.length}`);
        
        // –ò—â–µ–º JSON –¥–∞–Ω–Ω—ã–µ –≤ HTML
        const jsonMatches = html.match(/window\.__INITIAL_STATE__\s*=\s*({.*?});/);
        if (jsonMatches && jsonMatches[1]) {
          try {
            const initialState = JSON.parse(jsonMatches[1]);
            console.log('üì¶ Found initial state:', initialState);
            
            // –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ initial state
            if (initialState.catalog && initialState.catalog.products) {
              console.log(`‚úÖ Found ${initialState.catalog.products.length} products in HTML`);
              return this.parseProducts(initialState.catalog.products, params);
            }
          } catch (jsonError) {
            console.warn('‚ö†Ô∏è Failed to parse initial state JSON:', jsonError);
          }
        }
        
        // –ò—â–µ–º –¥—Ä—É–≥–∏–µ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        const productMatches = html.match(/"products":\s*(\[.*?\])/);
        if (productMatches && productMatches[1]) {
          try {
            const products = JSON.parse(productMatches[1]);
            console.log(`‚úÖ Found ${products.length} products in HTML JSON`);
            return this.parseProducts(products, params);
          } catch (jsonError) {
            console.warn('‚ö†Ô∏è Failed to parse products JSON:', jsonError);
          }
        }
        
        console.log('üì¶ No JSON data found in HTML, trying to extract product info...');
        
        // –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–∑ HTML
        const productCards = html.match(/<div[^>]*class="[^"]*product-card[^"]*"[^>]*>.*?<\/div>/gs);
        if (productCards && productCards.length > 0) {
          console.log(`üì¶ Found ${productCards.length} product cards in HTML`);
          
          const extractedProducts: Product[] = [];
          for (let i = 0; i < Math.min(productCards.length, 10); i++) {
            const card = productCards[i];
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            const nameMatch = card.match(/<span[^>]*class="[^"]*product-name[^"]*"[^>]*>(.*?)<\/span>/);
            const name = nameMatch ? nameMatch[1].trim() : `Product ${i + 1}`;
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            const priceMatch = card.match(/<span[^>]*class="[^"]*price[^"]*"[^>]*>(\d+)<\/span>/);
            const price = priceMatch ? parseInt(priceMatch[1]) : 1000 + i * 500;
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID
            const idMatch = card.match(/data-product-id="(\d+)"/);
            const id = idMatch ? idMatch[1] : `scraped_${i}`;
            
            extractedProducts.push({
              id: `scraped_${id}`,
              name,
              price,
              rating: 4.0 + Math.random() * 0.5,
              reviews: Math.floor(Math.random() * 100) + 10,
              image: '/placeholder.svg',
              url: `https://www.wildberries.ru/catalog/${id}/detail.aspx`,
              marketplace: 'wildberries' as const,
              category: params.query,
              colors: ['–ß–µ—Ä–Ω—ã–π', '–ë–µ–ª—ã–π'],
              sizes: ['S', 'M', 'L', 'XL']
            });
          }
          
          if (extractedProducts.length > 0) {
            console.log(`‚úÖ Successfully extracted ${extractedProducts.length} products from HTML`);
            return extractedProducts;
          }
        }
      } else {
        console.warn(`‚ö†Ô∏è Web scraping failed with status: ${response.status}`);
      }
      
      return [];
      
    } catch (error) {
      console.warn('‚ùå Web scraping failed:', error);
      return [];
    }
  }

  private async searchWithAlternativeAPI(params: SearchParams): Promise<Product[]> {
    const searchQuery = this.buildSearchQuery(params);
    
    console.log('üîç Trying alternative search methods for:', searchQuery);
    
    try {
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const catalogEndpoints = [
        'https://catalog.wb.ru/catalog/men/catalog',
        'https://catalog.wb.ru/catalog/women/catalog',
        'https://catalog.wb.ru/catalog/children/catalog',
        'https://catalog.wb.ru/catalog/sport/catalog'
      ];

      for (const catalogUrl of catalogEndpoints) {
        try {
          console.log(`üîç Trying catalog: ${catalogUrl}`);
          
          const apiParams = new URLSearchParams({
            TestGroup: 'no_test',
            TestID: 'no_test',
            appType: '1',
            curr: 'rub',
            dest: '-1257786',
            query: searchQuery,
            resultset: 'catalog',
            sort: 'popular',
            suppressSpellcheck: 'false',
            uoffset: '0',
            ulimit: '15',
            lang: 'ru',
            locale: 'ru',
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            timestamp: Date.now().toString(),
            rand: Math.random().toString()
          });

          const response = await fetch(`${catalogUrl}?${apiParams}`, {
            method: 'GET',
            headers: {
              'Accept': 'application/json, text/plain, */*',
              'Accept-Encoding': 'gzip, deflate, br',
              'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
              'Cache-Control': 'no-cache',
              'Connection': 'keep-alive',
              'DNT': '1',
              'Pragma': 'no-cache',
              'Referer': 'https://www.wildberries.ru/',
              'Origin': 'https://www.wildberries.ru',
              'Sec-Ch-Ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
              'Sec-Ch-Ua-Mobile': '?0',
              'Sec-Ch-Ua-Platform': '"Windows"',
              'Sec-Fetch-Dest': 'empty',
              'Sec-Fetch-Mode': 'cors',
              'Sec-Fetch-Site': 'same-site',
              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
              'X-Requested-With': 'XMLHttpRequest'
            },
            signal: AbortSignal.timeout(8000)
          });

          console.log(`üì° Catalog response status: ${response.status} for ${catalogUrl}`);

          if (response.ok) {
            const data = await response.json();
            console.log(`üì¶ Catalog response data:`, data);
            
            if (data.data?.products && data.data.products.length > 0) {
              console.log(`‚úÖ Found ${data.data.products.length} products via catalog method`);
              return this.parseProducts(data.data.products, params);
            } else if (data.products && data.products.length > 0) {
              console.log(`‚úÖ Found ${data.products.length} products in catalog alternative format`);
              return this.parseProducts(data.products, params);
            } else {
              console.log(`üì¶ No products found in catalog ${catalogUrl}, trying next...`);
              continue;
            }
          } else {
            console.warn(`‚ö†Ô∏è Catalog ${catalogUrl} failed with status: ${response.status}`);
            continue;
          }
        } catch (catalogError) {
          console.warn(`‚ö†Ô∏è Catalog ${catalogUrl} failed:`, catalogError);
          continue;
        }
      }

      // –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–π API
      console.log('üîç Trying mobile API...');
      try {
        const mobileUrl = 'https://mobile.wb.ru/api/v1/search';
        const mobileParams = new URLSearchParams({
          query: searchQuery,
          limit: '20',
          offset: '0',
          sort: 'popular'
        });

        const mobileResponse = await fetch(`${mobileUrl}?${mobileParams}`, {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Referer': 'https://m.wildberries.ru/',
            'Origin': 'https://m.wildberries.ru'
          },
          signal: AbortSignal.timeout(5000)
        });

        if (mobileResponse.ok) {
          const mobileData = await mobileResponse.json();
          console.log(`üì¶ Mobile API response:`, mobileData);
          
          if (mobileData.products && mobileData.products.length > 0) {
            console.log(`‚úÖ Found ${mobileData.products.length} products via mobile API`);
            return this.parseProducts(mobileData.products, params);
          }
        }
      } catch (mobileError) {
        console.warn('‚ö†Ô∏è Mobile API failed:', mobileError);
      }

      console.log('‚ùå All alternative methods failed');
      return [];
      
    } catch (error) {
      console.warn('‚ùå Alternative search completely failed:', error);
      return [];
    }
  }

  private getCacheKey(params: SearchParams): string {
    return `${params.query}_${params.bodyType}_${params.occasion}_${params.budget}_${params.gender}`;
  }

  private searchByKeywords(params: SearchParams): Product[] {
    const { query, gender, bodyType, occasion } = params;
    
    console.log('üé® Generating simulated products for query:', query);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞
    const category = this.detectCategory(query);
    console.log('üìÇ Detected category:', category);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –±–∞–∑—É —Ç–æ–≤–∞—Ä–æ–≤
    return this.getFallbackProductsForCategory(category, params);
  }

  private buildSearchQuery(params: SearchParams): string {
    const { query, bodyType, occasion, gender } = params;
    
    // –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    let searchQuery = query;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–Ω–¥–µ—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if (gender === 'female') {
      searchQuery += ' –∂–µ–Ω—Å–∫–∞—è';
    } else {
      searchQuery += ' –º—É–∂—Å–∫–∞—è';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ —Ç–∏–ø—É —Ñ–∏–≥—É—Ä—ã
    const bodyTypeKeywords = {
      'hourglass': '–ø—Ä–∏—Ç–∞–ª–µ–Ω–Ω–∞—è',
      'inverted-triangle': '—Å–≤–æ–±–æ–¥–Ω–∞—è',
      'triangle': '—Ä–∞—Å–∫–ª–µ—à–µ–Ω–Ω–∞—è',
      'rectangle': '–ø—Ä—è–º–∞—è',
      'circle': '—Å–≤–æ–±–æ–¥–Ω–∞—è',
      'diamond': '–ø—Ä–∏—Ç–∞–ª–µ–Ω–Ω–∞—è'
    };
    
    if (bodyTypeKeywords[bodyType as keyof typeof bodyTypeKeywords]) {
      searchQuery += ` ${bodyTypeKeywords[bodyType as keyof typeof bodyTypeKeywords]}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ –ø–æ–≤–æ–¥—É
    const occasionKeywords = {
      'casual': '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è',
      'business': '–¥–µ–ª–æ–≤–∞—è',
      'evening': '–≤–µ—á–µ—Ä–Ω—è—è'
    };
    
    if (occasionKeywords[occasion as keyof typeof occasionKeywords]) {
      searchQuery += ` ${occasionKeywords[occasion as keyof typeof occasionKeywords]}`;
    }
    
    return searchQuery.trim();
  }

  private buildSpecificSearchQuery(item: any, params: SearchParams): string {
    const { gender } = params;
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–ª–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    let searchQuery = '';
    if (gender === 'female') {
      searchQuery += '–∂–µ–Ω—Å–∫–∞—è ';
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∂–µ–Ω—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (item.category === '–í–µ—Ä—Ö') {
        searchQuery += '–±–ª—É–∑–∞ —Ä—É–±–∞—à–∫–∞ —Ç–æ–ø ';
      } else if (item.category === '–ù–∏–∑') {
        searchQuery += '—é–±–∫–∞ –±—Ä—é–∫–∏ –¥–∂–∏–Ω—Å—ã ';
      } else if (item.category === '–û–±—É–≤—å') {
        searchQuery += '—Ç—É—Ñ–ª–∏ –±–æ—Å–æ–Ω–æ–∂–∫–∏ –±–∞–ª–µ—Ç–∫–∏ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ ';
      } else if (item.category === '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã') {
        searchQuery += '—Å—É–º–∫–∞ —É–∫—Ä–∞—à–µ–Ω–∏—è —à–∞—Ä—Ñ ';
      } else if (item.category === '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ') {
        searchQuery += '–ø–∞–ª—å—Ç–æ –∫—É—Ä—Ç–∫–∞ –∫–∞—Ä–¥–∏–≥–∞–Ω ';
      }
    } else {
      searchQuery += '–º—É–∂—Å–∫–∞—è ';
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º—É–∂—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (item.category === '–í–µ—Ä—Ö') {
        searchQuery += '—Ä—É–±–∞—à–∫–∞ —Ñ—É—Ç–±–æ–ª–∫–∞ —Å–≤–∏—Ç–µ—Ä ';
      } else if (item.category === '–ù–∏–∑') {
        searchQuery += '–±—Ä—é–∫–∏ –¥–∂–∏–Ω—Å—ã —à–æ—Ä—Ç—ã ';
      } else if (item.category === '–û–±—É–≤—å') {
        searchQuery += '—Ç—É—Ñ–ª–∏ –±–æ—Ç–∏–Ω–∫–∏ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ ';
      } else if (item.category === '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã') {
        searchQuery += '—á–∞—Å—ã –≥–∞–ª—Å—Ç—É–∫ –∫–µ–ø–∫–∞ ';
      } else if (item.category === '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ') {
        searchQuery += '–ø–∞–ª—å—Ç–æ –∫—É—Ä—Ç–∫–∞ –ø–∏–¥–∂–∞–∫ ';
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω)
    if (item.name) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
      const nameKeywords = item.name.toLowerCase()
        .match(/(—Ä—É–±–∞—à–∫–∞|–±–ª—É–∑–∞|–±—Ä—é–∫–∏|–¥–∂–∏–Ω—Å—ã|—é–±–∫–∞|—Ñ—É—Ç–±–æ–ª–∫–∞|—Ç–æ–ø|–ø–ª–∞—Ç—å–µ|–ø–∞–ª—å—Ç–æ|–∫—É—Ä—Ç–∫–∞|–∫–∞—Ä–¥–∏–≥–∞–Ω|–ø–∏–¥–∂–∞–∫|—Ç—É—Ñ–ª–∏|–±–æ—Ç–∏–Ω–∫–∏|–∫—Ä–æ—Å—Å–æ–≤–∫–∏|–±–æ—Å–æ–Ω–æ–∂–∫–∏|–±–∞–ª–µ—Ç–∫–∏|—Å—É–º–∫–∞|–æ—á–∫–∏|—à–∞—Ä—Ñ|—á–∞—Å—ã|–≥–∞–ª—Å—Ç—É–∫|–∫–µ–ø–∫–∞)/g);
      
      if (nameKeywords) {
        searchQuery += `${nameKeywords.join(' ')} `;
      } else {
        // –ï—Å–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å
        searchQuery += `${item.name} `;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (item.colors && item.colors.length > 0) {
      searchQuery += `${item.colors.join(' ')} `;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (item.style) {
      searchQuery += `${item.style} `;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–∞–¥–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –æ–Ω–∞ –Ω–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è
    if (item.fit && item.fit !== '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π' && item.fit !== '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π') {
      searchQuery += `${item.fit} `;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª, –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
    const materials = ['–ª—å–Ω—è–Ω–∞—è', '—Ö–ª–æ–ø–∫–æ–≤–∞—è', '—à–µ–ª–∫–æ–≤–∞—è', '—à–µ—Ä—Å—Ç—è–Ω–∞—è', '–∫–æ–∂–∞–Ω–∞—è'];
    const description = item.description?.toLowerCase() || '';
    for (const material of materials) {
      if (description.includes(material)) {
        searchQuery += `${material} `;
        break;
      }
    }
    
    // –û—á–∏—â–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—Å
    const finalQuery = searchQuery.trim().replace(/\s+/g, ' ');
    console.log(`üîç Final search query for ${item.category}: "${finalQuery}"`);
    console.log(`üîç Item details:`, { name: item.name, colors: item.colors, style: item.style, fit: item.fit });
    return finalQuery;
  }

  private buildOutfitSearchQuery(outfit: any, params: SearchParams): string {
    const { gender, occasion } = params;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—Ä–∞–∑–æ–≤
    let searchQuery = '';
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–ª–∞
    if (gender === 'female') {
      searchQuery += '–∂–µ–Ω—Å–∫–∏–π ';
    } else {
      searchQuery += '–º—É–∂—Å–∫–æ–π ';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∏ –ø–æ–≤–æ–¥
    if (outfit.styleNotes) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ styleNotes
      const styleKeywords = outfit.styleNotes.toLowerCase()
        .match(/(casual|–¥–µ–ª–æ–≤–æ–π|–≤–µ—á–µ—Ä–Ω–∏–π|—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π|–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π|—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π|—Å—Ç–∏–ª—å–Ω—ã–π)/g);
      if (styleKeywords) {
        searchQuery += `${styleKeywords.join(' ')} `;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤–æ–¥
    if (occasion) {
      searchQuery += `${occasion} `;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω –∏–∑ —Å–∞–º–æ–≥–æ –æ–±—Ä–∞–∑–∞
    if (outfit.season) {
      searchQuery += `${outfit.season} `;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –æ–±—Ä–∞–∑–∞
    if (outfit.colorPalette && outfit.colorPalette.length > 0) {
      searchQuery += `${outfit.colorPalette.join(' ')} `;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Ñ–∏–≥—É—Ä—ã
    if (params.bodyType) {
      searchQuery += `${params.bodyType} `;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–∞
    if (outfit.name) {
      const nameKeywords = outfit.name.toLowerCase()
        .match(/(–æ–±—Ä–∞–∑|look|—Å—Ç–∏–ª—å|casual|–¥–µ–ª–æ–≤–æ–π|–≤–µ—á–µ—Ä–Ω–∏–π|–≤–µ—Å–µ–Ω–Ω–∏–π|–ª–µ—Ç–Ω–∏–π|–æ—Å–µ–Ω–Ω–∏–π|–∑–∏–º–Ω–∏–π)/g);
      if (nameKeywords) {
        searchQuery += `${nameKeywords.join(' ')} `;
      }
    }
    
    // –û—á–∏—â–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—Å
    return searchQuery.trim().replace(/\s+/g, ' ');
  }

  private parseProducts(rawProducts: any[], params: SearchParams): Product[] {
    console.log('üîß Parsing real Wildberries products:', rawProducts.length);
    
    const { gender } = params;
    
    return rawProducts.slice(0, 10)
      .filter(product => {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–ª—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        const productName = (product.name || product.title || '').toLowerCase();
        const productDesc = (product.description || '').toLowerCase();
        
        // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–ª–∞
        if (gender === 'female') {
          // –î–ª—è –∂–µ–Ω—â–∏–Ω –∏—Å–∫–ª—é—á–∞–µ–º –º—É–∂—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã
          if (productName.includes('–º—É–∂—Å–∫') || productDesc.includes('–º—É–∂—Å–∫') ||
              productName.includes('–º—É–∂') || productDesc.includes('–º—É–∂')) {
            console.log(`üö´ Filtered out male product: ${product.name}`);
            return false;
          }
        } else {
          // –î–ª—è –º—É–∂—á–∏–Ω –∏—Å–∫–ª—é—á–∞–µ–º –∂–µ–Ω—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã
          if (productName.includes('–∂–µ–Ω—Å–∫') || productDesc.includes('–∂–µ–Ω—Å–∫') ||
              productName.includes('–∂–µ–Ω') || productDesc.includes('–∂–µ–Ω')) {
            console.log(`üö´ Filtered out female product: ${product.name}`);
            return false;
          }
        }
        
        return true;
      })
      .map((product, index) => {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Wildberries
        const productId = product.id?.toString() || product.nm?.toString() || `wb_${index}`;
        const productName = product.name || product.title || '–¢–æ–≤–∞—Ä Wildberries';
        
        // –¶–µ–Ω—ã –≤ Wildberries —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        const price = product.salePriceU ? product.salePriceU / 100 : 
                     product.priceU ? product.priceU / 100 : 0;
        const originalPrice = product.priceU ? product.priceU / 100 : undefined;
        
        // –°–∫–∏–¥–∫–∞
        const discount = product.sale ? Math.round(product.sale) : 
                        product.discount ? Math.round(product.discount) : undefined;
        
        // –†–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã
        const rating = product.rating || product.avgRating || 4.0;
        const reviews = product.feedbacks || product.reviewCount || 0;
        
        // URL —Ç–æ–≤–∞—Ä–∞
        const productUrl = `https://www.wildberries.ru/catalog/${productId}/detail.aspx`;
        
        // –¶–≤–µ—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä—ã
        const colors = product.colors?.map((c: any) => c.name || c) || [];
        const sizes = product.sizes?.map((s: any) => s.name || s) || [];
        
        console.log(`üì¶ Parsed product: ${productName} - ${price}‚ÇΩ`);
        
        return {
          id: productId,
          name: productName,
          price,
          originalPrice,
          discount,
          rating,
          reviews,
          image: this.getProductImage(product.id || product.nm, product.colors?.[0]?.id),
          url: productUrl,
          marketplace: 'wildberries' as const,
          category: params.query,
          colors,
          sizes
        };
      });
  }

  private getProductImage(productId: number, colorId?: number): string {
    if (!productId) return '/placeholder.svg';
    
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    console.log(`üñºÔ∏è Generated image URL for product ${productId}: /placeholder.svg`);
    return '/placeholder.svg';
  }

  private getFallbackProducts(params: SearchParams): Product[] {
    console.log('üõçÔ∏è Using enhanced fallback products for:', params.query);
    
    const { query, gender, budget, bodyType, occasion } = params;
    
    // –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const enhancedProducts = this.getEnhancedFallbackProducts(query, gender, bodyType, occasion);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±—é–¥–∂–µ—Ç—É
    const budgetFiltered = this.filterByBudget(enhancedProducts, budget);
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueProducts = this.removeDuplicates(budgetFiltered);
    
    console.log(`‚úÖ Generated ${uniqueProducts.length} enhanced fallback products`);
    return uniqueProducts;
  }

  private getEnhancedFallbackProducts(query: string, gender: string, bodyType: string, occasion: string): Product[] {
    const products: Product[] = [];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É
    const category = this.detectCategory(query);
    const isFemale = gender === 'female';
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    switch (category) {
      case '—Ä—É–±–∞—à–∫–∞':
      case '–±–ª—É–∑–∫–∞':
        products.push(
          {
            id: 'shirt_1',
            name: isFemale ? '–ñ–µ–Ω—Å–∫–∞—è –ª—å–Ω—è–Ω–∞—è —Ä—É–±–∞—à–∫–∞' : '–ú—É–∂—Å–∫–∞—è —Ö–ª–æ–ø–∫–æ–≤–∞—è —Ä—É–±–∞—à–∫–∞',
            price: 2800,
            originalPrice: 3800,
            discount: 26,
            rating: 4.4,
            reviews: 189,
            image: '/placeholder.svg',
            url: `https://www.wildberries.ru/catalog/search?text=${encodeURIComponent(query)}`,
            marketplace: 'wildberries' as const,
            category: category,
            colors: ['–±–µ–ª—ã–π', '–≥–æ–ª—É–±–æ–π', '–±–µ–∂–µ–≤—ã–π'],
            sizes: ['S', 'M', 'L', 'XL']
          },
          {
            id: 'shirt_2',
            name: isFemale ? '–ñ–µ–Ω—Å–∫–∞—è –±–ª—É–∑–∫–∞ —Å –≤–æ—Ä–æ—Ç–Ω–∏–∫–æ–º' : '–ú—É–∂—Å–∫–∞—è —Ä—É–±–∞—à–∫–∞ –æ—Ñ–∏—Å–Ω–∞—è',
            price: 3200,
            originalPrice: 4500,
            discount: 29,
            rating: 4.2,
            reviews: 156,
            image: '/placeholder.svg',
            url: `https://www.wildberries.ru/catalog/search?text=${encodeURIComponent(query)}`,
            marketplace: 'wildberries' as const,
            category: category,
            colors: ['–±–µ–ª—ã–π', '—á–µ—Ä–Ω—ã–π', '—Å–∏–Ω–∏–π'],
            sizes: ['S', 'M', 'L', 'XL']
          }
        );
        break;
        
      case '—é–±–∫–∞':
        products.push(
          {
            id: 'skirt_1',
            name: '–Æ–±–∫–∞ –ê-—Å–∏–ª—É—ç—Ç–∞ –º–∏–¥–∏',
            price: 2500,
            originalPrice: 3500,
            discount: 29,
            rating: 4.3,
            reviews: 234,
            image: '/placeholder.svg',
            url: `https://www.wildberries.ru/catalog/search?text=${encodeURIComponent(query)}`,
            marketplace: 'wildberries' as const,
            category: category,
            colors: ['—á–µ—Ä–Ω—ã–π', '–±–µ–∂–µ–≤—ã–π', '—Å–∏–Ω–∏–π'],
            sizes: ['S', 'M', 'L', 'XL']
          },
          {
            id: 'skirt_2',
            name: '–Æ–±–∫–∞-–∫–∞—Ä–∞–Ω–¥–∞—à –æ—Ñ–∏—Å–Ω–∞—è',
            price: 2800,
            originalPrice: 3800,
            discount: 26,
            rating: 4.1,
            reviews: 167,
            image: '/placeholder.svg',
            url: `https://www.wildberries.ru/catalog/search?text=${encodeURIComponent(query)}`,
            marketplace: 'wildberries' as const,
            category: category,
            colors: ['—á–µ—Ä–Ω—ã–π', '—Å–µ—Ä—ã–π', '—Å–∏–Ω–∏–π'],
            sizes: ['S', 'M', 'L', 'XL']
          }
        );
        break;
        
      case '–±—Ä—é–∫–∏':
      case '–¥–∂–∏–Ω—Å—ã':
        products.push(
          {
            id: 'pants_1',
            name: isFemale ? '–ñ–µ–Ω—Å–∫–∏–µ –±—Ä—é–∫–∏ —á–∏–Ω–æ—Å' : '–ú—É–∂—Å–∫–∏–µ –±—Ä—é–∫–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ',
            price: 3500,
            originalPrice: 4800,
            discount: 27,
            rating: 4.2,
            reviews: 198,
            image: '/placeholder.svg',
            url: `https://www.wildberries.ru/catalog/search?text=${encodeURIComponent(query)}`,
            marketplace: 'wildberries' as const,
            category: category,
            colors: ['–±–µ–∂–µ–≤—ã–π', '—Å–∏–Ω–∏–π', '—Å–µ—Ä—ã–π'],
            sizes: ['S', 'M', 'L', 'XL']
          },
          {
            id: 'pants_2',
            name: isFemale ? '–ñ–µ–Ω—Å–∫–∏–µ –¥–∂–∏–Ω—Å—ã –∑–∞—É–∂–µ–Ω–Ω—ã–µ' : '–ú—É–∂—Å–∫–∏–µ –¥–∂–∏–Ω—Å—ã –ø—Ä—è–º—ã–µ',
            price: 3200,
            originalPrice: 4200,
            discount: 24,
            rating: 4.4,
            reviews: 289,
            image: '/placeholder.svg',
            url: `https://www.wildberries.ru/catalog/search?text=${encodeURIComponent(query)}`,
            marketplace: 'wildberries' as const,
            category: category,
            colors: ['—Å–∏–Ω–∏–π', '—Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π', '—á–µ—Ä–Ω—ã–π'],
            sizes: ['S', 'M', 'L', 'XL']
          }
        );
        break;
        
      case '—Ñ—É—Ç–±–æ–ª–∫–∞':
      case '–º–∞–π–∫–∞':
        products.push(
          {
            id: 'tshirt_1',
            name: isFemale ? '–ñ–µ–Ω—Å–∫–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ –±–∞–∑–æ–≤–∞—è' : '–ú—É–∂—Å–∫–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ —Ö–ª–æ–ø–∫–æ–≤–∞—è',
            price: 1200,
            originalPrice: 1800,
            discount: 33,
            rating: 4.3,
            reviews: 456,
            image: '/placeholder.svg',
            url: `https://www.wildberries.ru/catalog/search?text=${encodeURIComponent(query)}`,
            marketplace: 'wildberries' as const,
            category: category,
            colors: ['–±–µ–ª—ã–π', '—á–µ—Ä–Ω—ã–π', '—Å–µ—Ä—ã–π'],
            sizes: ['S', 'M', 'L', 'XL']
          },
          {
            id: 'tshirt_2',
            name: isFemale ? '–ñ–µ–Ω—Å–∫–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ —Å –ø—Ä–∏–Ω—Ç–æ–º' : '–ú—É–∂—Å–∫–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è',
            price: 1500,
            originalPrice: 2200,
            discount: 32,
            rating: 4.1,
            reviews: 234,
            image: '/placeholder.svg',
            url: `https://www.wildberries.ru/catalog/search?text=${encodeURIComponent(query)}`,
            marketplace: 'wildberries' as const,
            category: category,
            colors: ['–±–µ–ª—ã–π', '—á–µ—Ä–Ω—ã–π', '–∫—Ä–∞—Å–Ω—ã–π'],
            sizes: ['S', 'M', 'L', 'XL']
          }
        );
        break;
        
      case '–æ–±—É–≤—å':
      case '–∫–µ–¥—ã':
      case '–∫—Ä–æ—Å—Å–æ–≤–∫–∏':
        products.push(
          {
            id: 'shoes_1',
            name: '–ö–µ–¥—ã –±–µ–ª—ã–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ',
            price: 4500,
            originalPrice: 6000,
            discount: 25,
            rating: 4.5,
            reviews: 567,
            image: '/placeholder.svg',
            url: `https://www.wildberries.ru/catalog/search?text=${encodeURIComponent(query)}`,
            marketplace: 'wildberries' as const,
            category: category,
            colors: ['–±–µ–ª—ã–π', '—á–µ—Ä–Ω—ã–π'],
            sizes: ['36', '37', '38', '39', '40', '41', '42']
          },
          {
            id: 'shoes_2',
            name: '–ö—Ä–æ—Å—Å–æ–≤–∫–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ',
            price: 5200,
            originalPrice: 7200,
            discount: 28,
            rating: 4.3,
            reviews: 345,
            image: '/placeholder.svg',
            url: `https://www.wildberries.ru/catalog/search?text=${encodeURIComponent(query)}`,
            marketplace: 'wildberries' as const,
            category: category,
            colors: ['–±–µ–ª—ã–π', '—Å–µ—Ä—ã–π', '—á–µ—Ä–Ω—ã–π'],
            sizes: ['36', '37', '38', '39', '40', '41', '42']
          }
        );
        break;
        
      case '–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã':
      case '—Å—É–º–∫–∞':
      case '–æ—á–∫–∏':
        products.push(
          {
            id: 'acc_1',
            name: '–°—É–º–∫–∞ —á–µ—Ä–µ–∑ –ø–ª–µ—á–æ –∫–æ–∂–∞–Ω–∞—è',
            price: 2800,
            originalPrice: 3800,
            discount: 26,
            rating: 4.2,
            reviews: 123,
            image: '/placeholder.svg',
            url: `https://www.wildberries.ru/catalog/search?text=${encodeURIComponent(query)}`,
            marketplace: 'wildberries' as const,
            category: category,
            colors: ['—á–µ—Ä–Ω—ã–π', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', '–±–µ–∂–µ–≤—ã–π'],
            sizes: ['—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π']
          },
          {
            id: 'acc_2',
            name: '–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏',
            price: 1800,
            originalPrice: 2500,
            discount: 28,
            rating: 4.0,
            reviews: 89,
            image: '/placeholder.svg',
            url: `https://www.wildberries.ru/catalog/search?text=${encodeURIComponent(query)}`,
            marketplace: 'wildberries' as const,
            category: category,
            colors: ['—á–µ—Ä–Ω—ã–π', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π'],
            sizes: ['—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π']
          }
        );
        break;
        
      default:
        // –û–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        products.push(
          {
            id: 'general_1',
            name: isFemale ? '–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞' : '–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞',
            price: 2000,
            originalPrice: 2800,
            discount: 29,
            rating: 4.2,
            reviews: 156,
            image: '/placeholder.svg',
            url: `https://www.wildberries.ru/catalog/search?text=${encodeURIComponent(query)}`,
            marketplace: 'wildberries' as const,
            category: '–æ–¥–µ–∂–¥–∞',
            colors: ['—á–µ—Ä–Ω—ã–π', '–±–µ–ª—ã–π', '—Å–µ—Ä—ã–π'],
            sizes: ['S', 'M', 'L', 'XL']
          }
        );
    }
    
    return products;
  }

  private detectCategory(query: string): string {
    const lowerQuery = query.toLowerCase();
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (lowerQuery.includes('—Ä—É–±–∞—à–∫–∞') || lowerQuery.includes('–±–ª—É–∑–∫–∞') || lowerQuery.includes('–±–ª—É–∑–∞')) return '—Ä—É–±–∞—à–∫–∞';
    if (lowerQuery.includes('—é–±–∫–∞') || lowerQuery.includes('—é–±–∫–∞-–∫–∞—Ä–∞–Ω–¥–∞—à')) return '—é–±–∫–∞';
    if (lowerQuery.includes('–±—Ä—é–∫–∏') || lowerQuery.includes('–¥–∂–∏–Ω—Å—ã') || lowerQuery.includes('—à–æ—Ä—Ç—ã')) return '–±—Ä—é–∫–∏';
    if (lowerQuery.includes('—Ñ—É—Ç–±–æ–ª–∫–∞') || lowerQuery.includes('–º–∞–π–∫–∞') || lowerQuery.includes('—Ç–æ–ø')) return '—Ñ—É—Ç–±–æ–ª–∫–∞';
    if (lowerQuery.includes('–ø–ª–∞—Ç—å–µ') || lowerQuery.includes('—Å–∞—Ä–∞—Ñ–∞–Ω')) return '–ø–ª–∞—Ç—å–µ';
    if (lowerQuery.includes('–ø–∞–ª—å—Ç–æ') || lowerQuery.includes('–∫—É—Ä—Ç–∫–∞') || lowerQuery.includes('–ø–∏–¥–∂–∞–∫') || lowerQuery.includes('–∫–∞—Ä–¥–∏–≥–∞–Ω')) return '–≤–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞';
    if (lowerQuery.includes('–∫–µ–¥—ã') || lowerQuery.includes('–∫—Ä–æ—Å—Å–æ–≤–∫–∏') || lowerQuery.includes('–±–æ—Ç–∏–Ω–∫–∏') || lowerQuery.includes('—Ç—É—Ñ–ª–∏') || lowerQuery.includes('–æ–±—É–≤—å')) return '–æ–±—É–≤—å';
    if (lowerQuery.includes('—Å—É–º–∫–∞') || lowerQuery.includes('—Ä—é–∫–∑–∞–∫') || lowerQuery.includes('–∫–æ—à–µ–ª–µ–∫')) return '—Å—É–º–∫–∞';
    if (lowerQuery.includes('–æ—á–∫–∏') || lowerQuery.includes('—à–∞—Ä—Ñ') || lowerQuery.includes('—à–∞–ø–∫–∞') || lowerQuery.includes('–ø–µ—Ä—á–∞—Ç–∫–∏')) return '–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã';
    if (lowerQuery.includes('—á–∞—Å—ã') || lowerQuery.includes('–±—Ä–∞—Å–ª–µ—Ç') || lowerQuery.includes('–∫–æ–ª—å–µ')) return '—É–∫—Ä–∞—à–µ–Ω–∏—è';
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if (lowerQuery.includes('–≤–µ—Ä—Ö') || lowerQuery.includes('–≤–µ—Ä—Ö–Ω—è—è')) return '–≤–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞';
    if (lowerQuery.includes('–Ω–∏–∑') || lowerQuery.includes('–Ω–∏–∂–Ω—è—è')) return '–±—Ä—é–∫–∏';
    if (lowerQuery.includes('–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ') || lowerQuery.includes('–¥–æ–ø')) return '–≤–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞';
    
    return '–æ–¥–µ–∂–¥–∞';
  }

  private getFallbackProductsForCategory(category: string, params: SearchParams): Product[] {
    console.log(`üîÑ Using fallback products for category: ${category}`);
    
    const categoryProducts: Record<string, Product[]> = {
      '—Ä—É–±–∞—à–∫–∞': [
        {
          id: `wb_fallback_${category}_1`,
          name: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ä—É–±–∞—à–∫–∞',
          price: 2500,
          originalPrice: 3500,
          discount: 29,
          rating: 4.5,
          reviews: 128,
          image: '/placeholder.svg',
          url: 'https://www.wildberries.ru',
          marketplace: 'wildberries',
          category: '–í–µ—Ä—Ö',
          colors: ['–ë–µ–ª—ã–π', '–ì–æ–ª—É–±–æ–π'],
          sizes: ['S', 'M', 'L', 'XL']
        }
      ],
      '–±—Ä—é–∫–∏': [
        {
          id: `wb_fallback_${category}_1`,
          name: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –±—Ä—é–∫–∏',
          price: 3200,
          originalPrice: 4500,
          discount: 29,
          rating: 4.3,
          reviews: 89,
          image: '/placeholder.svg',
          url: 'https://www.wildberries.ru',
          marketplace: 'wildberries',
          category: '–ù–∏–∑',
          colors: ['–ß–µ—Ä–Ω—ã–π', '–°–µ—Ä—ã–π'],
          sizes: ['S', 'M', 'L', 'XL']
        }
      ],
      '—Ñ—É—Ç–±–æ–ª–∫–∞': [
        {
          id: `wb_fallback_${category}_1`,
          name: '–ë–∞–∑–æ–≤–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞',
          price: 1200,
          originalPrice: 1800,
          discount: 33,
          rating: 4.2,
          reviews: 67,
          image: '/placeholder.svg',
          url: 'https://www.wildberries.ru',
          marketplace: 'wildberries',
          category: '–í–µ—Ä—Ö',
          colors: ['–ë–µ–ª—ã–π', '–ß–µ—Ä–Ω—ã–π', '–°–µ—Ä—ã–π'],
          sizes: ['S', 'M', 'L', 'XL']
        }
      ],
      '–¥–∂–∏–Ω—Å—ã': [
        {
          id: `wb_fallback_${category}_1`,
          name: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –¥–∂–∏–Ω—Å—ã',
          price: 2800,
          originalPrice: 4000,
          discount: 30,
          rating: 4.4,
          reviews: 156,
          image: '/placeholder.svg',
          url: 'https://www.wildberries.ru',
          marketplace: 'wildberries',
          category: '–ù–∏–∑',
          colors: ['–°–∏–Ω–∏–π', '–ß–µ—Ä–Ω—ã–π'],
          sizes: ['S', 'M', 'L', 'XL']
        }
      ],
      '–∫—Ä–æ—Å—Å–æ–≤–∫–∏': [
        {
          id: `wb_fallback_${category}_1`,
          name: '–£–¥–æ–±–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏',
          price: 4500,
          originalPrice: 6000,
          discount: 25,
          rating: 4.7,
          reviews: 256,
          image: '/placeholder.svg',
          url: 'https://www.wildberries.ru',
          marketplace: 'wildberries',
          category: '–û–±—É–≤—å',
          colors: ['–ë–µ–ª—ã–π', '–ß–µ—Ä–Ω—ã–π'],
          sizes: ['36', '37', '38', '39', '40', '41', '42']
        }
      ],
      '–æ–±—É–≤—å': [
        {
          id: `wb_fallback_${category}_1`,
          name: '–°—Ç–∏–ª—å–Ω–∞—è –æ–±—É–≤—å',
          price: 3800,
          originalPrice: 5000,
          discount: 24,
          rating: 4.6,
          reviews: 189,
          image: '/placeholder.svg',
          url: 'https://www.wildberries.ru',
          marketplace: 'wildberries',
          category: '–û–±—É–≤—å',
          colors: ['–ß–µ—Ä–Ω—ã–π', '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π'],
          sizes: ['36', '37', '38', '39', '40', '41', '42']
        }
      ],
      '—é–±–∫–∞': [
        {
          id: `wb_fallback_${category}_1`,
          name: '–≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è —é–±–∫–∞',
          price: 2800,
          originalPrice: 3800,
          discount: 26,
          rating: 4.4,
          reviews: 95,
          image: '/placeholder.svg',
          url: 'https://www.wildberries.ru',
          marketplace: 'wildberries',
          category: '–ù–∏–∑',
          colors: ['–ß–µ—Ä–Ω—ã–π', '–°–µ—Ä—ã–π'],
          sizes: ['XS', 'S', 'M', 'L']
        }
      ],
      '–ø–ª–∞—Ç—å–µ': [
        {
          id: `wb_fallback_${category}_1`,
          name: '–°—Ç–∏–ª—å–Ω–æ–µ –ø–ª–∞—Ç—å–µ',
          price: 4200,
          originalPrice: 5500,
          discount: 24,
          rating: 4.5,
          reviews: 134,
          image: '/placeholder.svg',
          url: 'https://www.wildberries.ru',
          marketplace: 'wildberries',
          category: '–ü–ª–∞—Ç—å–µ',
          colors: ['–ß–µ—Ä–Ω—ã–π', '–°–∏–Ω–∏–π'],
          sizes: ['XS', 'S', 'M', 'L']
        }
      ],
      '–≤–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞': [
        {
          id: `wb_fallback_${category}_1`,
          name: '–°—Ç–∏–ª—å–Ω–∞—è –≤–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞',
          price: 6500,
          originalPrice: 8500,
          discount: 24,
          rating: 4.6,
          reviews: 178,
          image: '/placeholder.svg',
          url: 'https://www.wildberries.ru',
          marketplace: 'wildberries',
          category: '–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞',
          colors: ['–ß–µ—Ä–Ω—ã–π', '–ë–µ–∂–µ–≤—ã–π'],
          sizes: ['S', 'M', 'L', 'XL']
        }
      ],
      '—Å—É–º–∫–∞': [
        {
          id: `wb_fallback_${category}_1`,
          name: '–°—Ç–∏–ª—å–Ω–∞—è —Å—É–º–∫–∞',
          price: 3200,
          originalPrice: 4200,
          discount: 24,
          rating: 4.3,
          reviews: 89,
          image: '/placeholder.svg',
          url: 'https://www.wildberries.ru',
          marketplace: 'wildberries',
          category: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã',
          colors: ['–ß–µ—Ä–Ω—ã–π', '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π'],
          sizes: ['–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π']
        }
      ],
      '–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã': [
        {
          id: `wb_fallback_${category}_1`,
          name: '–ú–æ–¥–Ω—ã–π –∞–∫—Å–µ—Å—Å—É–∞—Ä',
          price: 1800,
          originalPrice: 2500,
          discount: 28,
          rating: 4.2,
          reviews: 67,
          image: '/placeholder.svg',
          url: 'https://www.wildberries.ru',
          marketplace: 'wildberries',
          category: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã',
          colors: ['–ß–µ—Ä–Ω—ã–π', '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π'],
          sizes: ['–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π']
        }
      ],
      '—É–∫—Ä–∞—à–µ–Ω–∏—è': [
        {
          id: `wb_fallback_${category}_1`,
          name: '–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ —É–∫—Ä–∞—à–µ–Ω–∏–µ',
          price: 2200,
          originalPrice: 3000,
          discount: 27,
          rating: 4.4,
          reviews: 78,
          image: '/placeholder.svg',
          url: 'https://www.wildberries.ru',
          marketplace: 'wildberries',
          category: '–£–∫—Ä–∞—à–µ–Ω–∏—è',
          colors: ['–°–µ—Ä–µ–±—Ä—è–Ω—ã–π', '–ó–æ–ª–æ—Ç–æ–π'],
          sizes: ['–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π']
        }
      ]
    };
    
    return categoryProducts[category] || [
      {
        id: `wb_fallback_${category}_1`,
        name: `–¢–æ–≤–∞—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}`,
        price: 2000,
        originalPrice: 3000,
        discount: 33,
        rating: 4.0,
        reviews: 50,
        image: '/placeholder.svg',
        url: 'https://www.wildberries.ru',
        marketplace: 'wildberries',
        category: '–î—Ä—É–≥–æ–µ',
        colors: ['–ß–µ—Ä–Ω—ã–π'],
        sizes: ['–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π']
      }
    ];
  }

  async getRecommendations(generatedOutfit: any, params: SearchParams): Promise<Product[]> {
    console.log('üéØ Starting product recommendations for outfit:', generatedOutfit?.name);
    console.log('üéØ Outfit items:', generatedOutfit?.items?.map((item: any) => ({ 
      category: item.category, 
      name: item.name 
    })));

    if (!generatedOutfit?.items?.length) {
      console.log('‚ùå No outfit items found');
      return [];
    }

    const allProducts: Product[] = [];

    // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–±—Ä–∞–∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    for (const item of generatedOutfit.items) {
      console.log(`\nüîç Searching for item: "${item.name}" (${item.category})`);
      
      try {
        // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        const itemProducts = await this.searchProducts({
          query: item.name,
          gender: params.gender,
          bodyType: params.bodyType,
          occasion: params.occasion,
          budget: params.budget,
          limit: 1 // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 1 —Ç–æ–≤–∞—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        });

        console.log(`‚úÖ Found ${itemProducts.length} products for "${item.name}"`);
        
        if (itemProducts.length > 0) {
          // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π (–Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π) —Ç–æ–≤–∞—Ä
          const selectedProduct = itemProducts[0];
          console.log(`üì¶ Selected product:`, { 
            name: selectedProduct.name, 
            category: selectedProduct.category, 
            price: selectedProduct.price 
          });
          
          allProducts.push(selectedProduct);
        } else {
          // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
          console.log(`üé® No products found, creating simulated product for "${item.name}"`);
          const simulatedProduct = this.createProductFromOutfitItem(item, params);
          console.log(`üé® Created simulated product:`, { 
            name: simulatedProduct.name, 
            category: simulatedProduct.category, 
            price: simulatedProduct.price 
          });
          allProducts.push(simulatedProduct);
        }
      } catch (error) {
        console.error(`‚ùå Error searching for "${item.name}":`, error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
        const simulatedProduct = this.createProductFromOutfitItem(item, params);
        console.log(`üé® Created fallback simulated product:`, { 
          name: simulatedProduct.name, 
          category: simulatedProduct.category, 
          price: simulatedProduct.price 
        });
        allProducts.push(simulatedProduct);
      }
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±—é–¥–∂–µ—Ç—É
    const budgetFiltered = this.filterByBudget(allProducts, params.budget);
    console.log(`üí∞ Budget filtering: ${allProducts.length} ‚Üí ${budgetFiltered.length} products`);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–∑–∞
    const result = budgetFiltered.slice(0, generatedOutfit.items.length);
    
    console.log(`üéØ Final products:`, result.map(p => ({ 
      name: p.name, 
      category: p.category, 
      price: p.price, 
      isSimulated: p.id.includes('outfit_') || p.id.includes('fallback') 
    })));
    
    return result;
  }

  private createProductFromOutfitItem(item: any, params: SearchParams): Product | null {
    const { gender, bodyType, occasion } = params;
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–±—Ä–∞–∑–∞
    const itemId = `outfit_${item.category.toLowerCase()}_${item.name.toLowerCase().replace(/\s+/g, '_')}_${Date.now()}`;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    const basePrices = {
      '–í–µ—Ä—Ö': { min: 2500, max: 4500 },
      '–ù–∏–∑': { min: 3000, max: 5000 },
      '–û–±—É–≤—å': { min: 3500, max: 6000 },
      '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã': { min: 1500, max: 4000 },
      '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ': { min: 5000, max: 12000 }
    };
    
    const category = item.category;
    const priceRange = basePrices[category as keyof typeof basePrices] || { min: 2000, max: 4000 };
    const price = Math.floor(Math.random() * (priceRange.max - priceRange.min + 1)) + priceRange.min;
    const originalPrice = Math.floor(price * (1 + Math.random() * 0.3 + 0.1)); // +10-40%
    const discount = Math.floor(((originalPrice - price) / originalPrice) * 100);
    
    // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–±—Ä–∞–∑–∞
    const searchQuery = encodeURIComponent(`${item.name} ${item.colors?.[0] || ''}`);
    const url = `https://www.wildberries.ru/catalog/search?text=${searchQuery}`;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let sizes: string[];
    if (category === '–û–±—É–≤—å') {
      sizes = ['36', '37', '38', '39', '40', '41', '42'];
    } else if (category === '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã') {
      sizes = ['—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π'];
    } else {
      sizes = ['S', 'M', 'L', 'XL'];
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–±—Ä–∞–∑–∞
    let productName = item.name;
    if (item.colors && item.colors.length > 0) {
      productName = `${item.colors[0]} ${item.name}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª, –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
    const materials = ['–ª—å–Ω—è–Ω–∞—è', '—Ö–ª–æ–ø–∫–æ–≤–∞—è', '—à–µ–ª–∫–æ–≤–∞—è', '—à–µ—Ä—Å—Ç—è–Ω–∞—è', '–∫–æ–∂–∞–Ω–∞—è'];
    const description = item.description?.toLowerCase() || '';
    for (const material of materials) {
      if (description.includes(material)) {
        productName = `${material} ${productName}`;
        break;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    const variants = [
      '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è', '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è', '—Å—Ç–∏–ª—å–Ω–∞—è', '—ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è', '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è',
      '–æ—Ñ–∏—Å–Ω–∞—è', '–≤–µ—á–µ—Ä–Ω—è—è', '—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è', 'casual', '–¥–µ–ª–æ–≤–∞—è'
    ];
    
    if (Math.random() > 0.5) {
      const variant = variants[Math.floor(Math.random() * variants.length)];
      productName = `${variant} ${productName}`;
    }
    
                        console.log(`üé® Created simulated product for ${item.category}: "${productName}"`);
                    console.log(`üé® Simulated product details:`, { 
                      id: itemId, 
                      name: productName, 
                      price, 
                      category: item.category,
                      colors: item.colors || ['—á–µ—Ä–Ω—ã–π', '–±–µ–ª—ã–π'],
                      sizes
                    });
                    
                    return {
      id: itemId,
      name: productName,
      price,
      originalPrice,
      discount,
      rating: 4.0 + Math.random() * 0.8, // 4.0-4.8
      reviews: Math.floor(Math.random() * 200) + 20, // 20-220
      image: '/placeholder.svg',
      url,
      marketplace: 'wildberries' as const,
      category: item.category,
      colors: item.colors || ['—á–µ—Ä–Ω—ã–π', '–±–µ–ª—ã–π'],
      sizes
    };
  }

  private getColorsForCategory(category: string): string[] {
    const colorMap = {
      '—Ä—É–±–∞—à–∫–∞': ['–±–µ–ª—ã–π', '–≥–æ–ª—É–±–æ–π', '—Ä–æ–∑–æ–≤—ã–π', '—Å–µ—Ä—ã–π'],
      '–±—Ä—é–∫–∏': ['—á–µ—Ä–Ω—ã–π', '—Å–∏–Ω–∏–π', '—Å–µ—Ä—ã–π', '–±–µ–∂–µ–≤—ã–π'],
      '—Ñ—É—Ç–±–æ–ª–∫–∞': ['–±–µ–ª—ã–π', '—á–µ—Ä–Ω—ã–π', '—Å–µ—Ä—ã–π', '–∫—Ä–∞—Å–Ω—ã–π'],
      '–¥–∂–∏–Ω—Å—ã': ['—Å–∏–Ω–∏–π', '—Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π', '—á–µ—Ä–Ω—ã–π', '—Å–µ—Ä—ã–π'],
      '–ø–ª–∞—Ç—å–µ': ['—á–µ—Ä–Ω—ã–π', '—Å–∏–Ω–∏–π', '–∫—Ä–∞—Å–Ω—ã–π', '–±–µ–∂–µ–≤—ã–π'],
      '–∫—Ä–æ—Å—Å–æ–≤–∫–∏': ['–±–µ–ª—ã–π', '—á–µ—Ä–Ω—ã–π', '—Å–µ—Ä—ã–π', '—Å–∏–Ω–∏–π'],
      '–∫–æ—Å—Ç—é–º': ['—Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π', '—Å–µ—Ä—ã–π', '—á–µ—Ä–Ω—ã–π']
    };
    
    return colorMap[category as keyof typeof colorMap] || ['—á–µ—Ä–Ω—ã–π', '–±–µ–ª—ã–π'];
  }

  private getSizesForCategory(category: string, gender: string): string[] {
    if (category === '–∫—Ä–æ—Å—Å–æ–≤–∫–∏') {
      return ['36', '37', '38', '39', '40', '41', '42'];
    }
    
    return ['S', 'M', 'L', 'XL'];
  }

  private getCategoriesByParams(bodyType: string, occasion: string, gender: 'male' | 'female'): string[] {
    const categories: string[] = [];
    
    // –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (gender === 'female') {
      categories.push('—Ä—É–±–∞—à–∫–∞', '–±—Ä—é–∫–∏', '—Ñ—É—Ç–±–æ–ª–∫–∞', '–¥–∂–∏–Ω—Å—ã');
    } else {
      categories.push('—Ä—É–±–∞—à–∫–∞', '–±—Ä—é–∫–∏', '—Ñ—É—Ç–±–æ–ª–∫–∞', '–¥–∂–∏–Ω—Å—ã');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
    categories.push('–∫—Ä–æ—Å—Å–æ–≤–∫–∏', '–æ—á–∫–∏', '—Ä–µ–º–µ–Ω—å');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–∏–ø—É —Ñ–∏–≥—É—Ä—ã
    if (bodyType === 'hourglass') {
      categories.push('–ø–ª–∞—Ç—å–µ');
    } else if (bodyType === 'rectangle') {
      categories.push('–ø–ª–∞—Ç—å–µ');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø–æ–≤–æ–¥—É
    if (occasion === 'business') {
      categories.push('–∫–æ—Å—Ç—é–º');
    } else if (occasion === 'casual') {
      categories.push('–¥–∂–∏–Ω—Å—ã');
    }
    
    return categories;
  }

  private filterByBudget(products: Product[], budget: string): Product[] {
    // –ï—Å–ª–∏ –±—é–¥–∂–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ "–õ—é–±–æ–π", –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    if (!budget || budget === '–õ—é–±–æ–π') {
      return products;
    }
    
    const budgetLimits = {
      'low': 3000,
      'medium': 8000,
      'high': 20000
    };
    
    const limit = budgetLimits[budget as keyof typeof budgetLimits] || 8000;
    
    return products.filter(product => product.price <= limit);
  }

  private removeDuplicates(products: Product[]): Product[] {
    const seen = new Set();
    return products.filter(product => {
      const duplicate = seen.has(product.id);
      seen.add(product.id);
      return !duplicate;
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
  async testAPI(): Promise<{ success: boolean; message: string; data?: any }> {
    try {
      console.log('üß™ Testing Wildberries API...');
      
      const testParams = {
        query: '—Ñ—É—Ç–±–æ–ª–∫–∞',
        bodyType: 'rectangle',
        occasion: 'casual',
        budget: 'medium',
        gender: 'male' as const
      };
      
      const apiParams = new URLSearchParams({
        TestGroup: 'no_test',
        TestID: 'no_test',
        appType: '1',
        curr: 'rub',
        dest: '-1257786',
        query: '—Ñ—É—Ç–±–æ–ª–∫–∞',
        resultset: 'catalog',
        sort: 'popular',
        suppressSpellcheck: 'false',
        uoffset: '0',
        ulimit: '5',
        lang: 'ru',
        locale: 'ru'
      });

      const response = await fetch(`${this.baseUrl}?${apiParams}`, {
        headers: {
          'Accept': 'application/json',
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
          'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8'
        }
      });

      console.log('üì° Test API Response Status:', response.status);
      console.log('üì° Test API Response Headers:', Object.fromEntries(response.headers.entries()));

      if (!response.ok) {
        const errorText = await response.text();
        return {
          success: false,
          message: `API Error ${response.status}: ${errorText}`,
          data: { status: response.status, statusText: response.statusText }
        };
      }

      const data = await response.json();
      console.log('üì¶ Test API Response Data:', data);
      
      return {
        success: true,
        message: 'API test successful',
        data: data
      };

    } catch (error) {
      console.error('‚ùå API test failed:', error);
      return {
        success: false,
        message: `Test failed: ${error}`,
        data: { error: error }
      };
    }
  }
}

export const wildberriesService = new WildberriesService(); 