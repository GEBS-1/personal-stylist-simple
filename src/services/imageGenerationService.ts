// –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö AI-—Å–µ—Ä–≤–∏—Å–æ–≤
import { env } from "@/config/env";

export interface ImageGenerationRequest {
  prompt: string;
  style?: 'realistic' | 'artistic' | 'fashion' | 'casual';
  quality?: 'standard' | 'high';
  size?: '1024x1024' | '1792x1024' | '1024x1792';
  aspectRatio?: '1:1' | '16:9' | '9:16';
  model?: 'gigachat' | 'dalle' | 'stable-diffusion' | 'midjourney' | 'leonardo';
}

export interface ImageGenerationResponse {
  success: boolean;
  imageUrl?: string;
  imageData?: string; // base64
  error?: string;
  model?: string;
  usage?: {
    promptTokens: number;
    completionTokens: number;
    totalTokens: number;
  };
}

export class ImageGenerationService {
  private currentProvider: 'gigachat' | 'dalle' | 'stable-diffusion' | 'midjourney' | 'leonardo' = 'gigachat';

  constructor() {
    console.log('üé® Initializing Image Generation Service...');
    this.initializeProvider();
  }

  private initializeProvider() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    const providers = [
      { name: 'dalle', available: this.checkDalleAvailability() },
      { name: 'gigachat', available: this.checkGigaChatAvailability() },
      { name: 'stable-diffusion', available: this.checkStableDiffusionAvailability() },
      { name: 'midjourney', available: this.checkMidjourneyAvailability() },
      { name: 'leonardo', available: this.checkLeonardoAvailability() }
    ];

    const availableProvider = providers.find(p => p.available);
    if (availableProvider) {
      this.currentProvider = availableProvider.name as any;
      console.log(`‚úÖ Selected ${this.currentProvider} as image generation provider`);
    } else {
      console.log('‚ö†Ô∏è No image generation providers available, using fallback');
    }
  }

  private checkGigaChatAvailability(): boolean {
    return !!(env.GIGACHAT_CLIENT_ID && env.GIGACHAT_CLIENT_SECRET);
  }

  private checkDalleAvailability(): boolean {
    return !!env.OPENAI_API_KEY;
  }

  private checkStableDiffusionAvailability(): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Stable Diffusion –∏–ª–∏ API
    return false; // –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ
  }

  private checkMidjourneyAvailability(): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Midjourney API
    return false; // –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ
  }

  private checkLeonardoAvailability(): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Leonardo.ai API
    return false; // –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ
  }

  async generateImage(request: ImageGenerationRequest): Promise<ImageGenerationResponse> {
    console.log(`üé® Generating image with ${this.currentProvider}...`);
    
    try {
      switch (this.currentProvider) {
        case 'gigachat':
          return await this.generateWithGigaChat(request);
        case 'dalle':
          return await this.generateWithDalle(request);
        case 'stable-diffusion':
          return await this.generateWithStableDiffusion(request);
        case 'midjourney':
          return await this.generateWithMidjourney(request);
        case 'leonardo':
          return await this.generateWithLeonardo(request);
        default:
          return this.generateFallbackImage(request);
      }
    } catch (error) {
      console.error('‚ùå Image generation failed:', error);
      return this.generateFallbackImage(request);
    }
  }

  private async generateWithGigaChat(request: ImageGenerationRequest): Promise<ImageGenerationResponse> {
    try {
      const prompt = this.buildGigaChatPrompt(request);
      
      const response = await fetch('http://localhost:3001/api/gigachat/image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt,
          style: request.style || 'realistic',
          quality: request.quality || 'standard',
          size: request.size || '1024x1024'
        })
      });

      if (!response.ok) {
        throw new Error(`GigaChat image generation failed: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.success && data.imageUrl) {
        return {
          success: true,
          imageUrl: data.imageUrl,
          model: 'gigachat',
          usage: data.usage
        };
      } else {
        throw new Error(data.error || 'Unknown error');
      }
    } catch (error) {
      console.error('‚ùå GigaChat image generation failed:', error);
      return this.generateFallbackImage(request);
    }
  }

  private async generateWithDalle(request: ImageGenerationRequest): Promise<ImageGenerationResponse> {
    try {
      const prompt = this.buildDallePrompt(request);
      
      const response = await fetch('http://localhost:3001/api/dalle/image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt,
          size: request.size || '1024x1024',
          quality: request.quality || 'standard'
        })
      });

      if (!response.ok) {
        throw new Error(`DALL-E generation failed: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.success && data.imageUrl) {
        return {
          success: true,
          imageUrl: data.imageUrl,
          model: data.model || 'dalle',
          usage: data.usage
        };
      } else {
        throw new Error(data.error || 'Unknown error');
      }
    } catch (error) {
      console.error('‚ùå DALL-E generation failed:', error);
      return this.generateFallbackImage(request);
    }
  }

  private generateWithStableDiffusion(request: ImageGenerationRequest): Promise<ImageGenerationResponse> {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    return Promise.resolve(this.generateFallbackImage(request));
  }

  private generateWithMidjourney(request: ImageGenerationRequest): Promise<ImageGenerationResponse> {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    return Promise.resolve(this.generateFallbackImage(request));
  }

  private generateWithLeonardo(request: ImageGenerationRequest): Promise<ImageGenerationResponse> {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    return Promise.resolve(this.generateFallbackImage(request));
  }

  private generateFallbackImage(request: ImageGenerationRequest): ImageGenerationResponse {
    console.log('üé≠ Using fallback image generation');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    return {
      success: true,
      imageUrl: '/placeholder.svg',
      model: 'fallback',
      usage: {
        promptTokens: 0,
        completionTokens: 0,
        totalTokens: 0
      }
    };
  }

  private buildGigaChatPrompt(request: ImageGenerationRequest): string {
    const styleMap = {
      'realistic': '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å',
      'artistic': '—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥',
      'fashion': '—Å—Ç–∏–ª—å fashion-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—ä–µ–º–∫–∞',
      'casual': '–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∏–¥, –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è'
    };

    const style = styleMap[request.style || 'realistic'];
    
    return `–°–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${request.prompt}. 
    –°—Ç–∏–ª—å: ${style}. 
    –ö–∞—á–µ—Å—Ç–≤–æ: ${request.quality === 'high' ? '–≤—ã—Å–æ–∫–æ–µ' : '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ'}. 
    –†–∞–∑–º–µ—Ä: ${request.size}. 
    –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º.`;
  }

  private buildDallePrompt(request: ImageGenerationRequest): string {
    const styleMap = {
      'realistic': 'photorealistic, high quality photography',
      'artistic': 'artistic style, creative approach',
      'fashion': 'fashion photography style, professional lighting',
      'casual': 'natural look, casual photography'
    };

    const style = styleMap[request.style || 'realistic'];
    
    return `${request.prompt}, ${style}, high quality, detailed, professional photography`;
  }

  getCurrentProvider(): string {
    return this.currentProvider;
  }

  getAvailableProviders(): string[] {
    const providers = [];
    if (this.checkGigaChatAvailability()) providers.push('gigachat');
    if (this.checkDalleAvailability()) providers.push('dalle');
    if (this.checkStableDiffusionAvailability()) providers.push('stable-diffusion');
    if (this.checkMidjourneyAvailability()) providers.push('midjourney');
    if (this.checkLeonardoAvailability()) providers.push('leonardo');
    return providers;
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const imageGenerationService = new ImageGenerationService();