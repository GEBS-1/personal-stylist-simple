// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GigaChat –æ—Ç –°–±–µ—Ä–∞
// –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.sber.ru/portal/products/gigachat

export interface GigaChatConfig {
  clientId: string;
  clientSecret: string;
  scope?: string;
  authUrl?: string;
  apiUrl?: string;
}

export interface GigaChatMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

export interface GigaChatRequest {
  model: string;
  messages: GigaChatMessage[];
  temperature?: number;
  maxTokens?: number;
  stream?: boolean;
}

export interface GigaChatResponse {
  choices: Array<{
    message: {
      content: string;
      role: string;
    };
    finishReason: string;
    index: number;
  }>;
  usage: {
    promptTokens: number;
    completionTokens: number;
    totalTokens: number;
  };
}

// –ù–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export interface ImageGenerationRequest {
  prompt: string;
  style?: string;
  quality?: 'standard' | 'high';
  size?: '1024x1024' | '1792x1024' | '1024x1792';
  aspectRatio?: '1:1' | '16:9' | '9:16';
  bodyType?: string;
  clothingStyle?: string;
  colorScheme?: string;
}

export interface ImageGenerationResponse {
  success: boolean;
  imageUrl?: string;
  imageData?: string; // base64
  error?: string;
  usage?: {
    promptTokens: number;
    completionTokens: number;
    totalTokens: number;
  };
}

export class GigaChatService {
  private config: GigaChatConfig;
  private accessToken: string | null = null;
  private tokenExpiry: number = 0;
  private proxyUrl: string = 'http://localhost:3001/api/gigachat';

  constructor(config: GigaChatConfig) {
    this.config = {
      scope: 'GIGACHAT_API_PERS',
      authUrl: 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth',
      apiUrl: 'https://gigachat.devices.sberbank.ru/api/v1',
      ...config
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
  private async getAccessToken(): Promise<string> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
    if (this.accessToken && Date.now() < this.tokenExpiry) {
      return this.accessToken;
    }

    console.log('üîê Getting GigaChat access token...');

    // –°—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∂–∏–º, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    console.log('‚ö†Ô∏è Using GigaChat fallback mode');
    this.accessToken = 'fallback_token';
    this.tokenExpiry = Date.now() + (3600 * 1000); // 1 —á–∞—Å
    return this.accessToken;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ RqUID
  private generateRqUID(): string {
    return `uid_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat
  async generateContent(
    messages: GigaChatMessage[],
    options: {
      model?: string;
      temperature?: number;
      maxTokens?: number;
    } = {}
  ): Promise<GigaChatResponse> {
    try {
      const token = await this.getAccessToken();
      
      // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∂–∏–º, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –æ—Ç–≤–µ—Ç
      if (token === 'fallback_token') {
        console.log('üîÑ Using GigaChat fallback response');
        const lastMessage = messages[messages.length - 1];
        
        return {
          choices: [
            {
              message: {
                content: `–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ GigaChat –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –≠—Ç–æ fallback –æ—Ç–≤–µ—Ç –¥–ª—è: "${lastMessage.content}". –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –æ—Ç–≤–µ—Ç –æ—Ç GigaChat API.`,
                role: 'assistant'
              },
              finishReason: 'stop',
              index: 0
            }
          ],
          usage: {
            promptTokens: 0,
            completionTokens: 0,
            totalTokens: 0
          }
        };
      }

      const requestBody: GigaChatRequest = {
        model: options.model || 'GigaChat:latest',
        messages,
        temperature: options.temperature || 0.7,
        maxTokens: options.maxTokens || 1000,
        stream: false
      };

      console.log('ü§ñ Sending request to GigaChat:', {
        model: requestBody.model,
        messagesCount: messages.length,
        temperature: requestBody.temperature
      });

      const response = await fetch(`${this.proxyUrl}/chat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          messages: requestBody.messages,
          model: requestBody.model,
          temperature: requestBody.temperature,
          max_tokens: requestBody.maxTokens
        }),
        timeout: 30000
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå GigaChat API error:', errorText);
        
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π
        if (response.status === 401) {
          console.log('üîÑ Token expired, refreshing...');
          this.accessToken = null;
          this.tokenExpiry = 0;
          return this.generateContent(messages, options);
        }
        
        throw new Error(`GigaChat API error: ${response.status} - ${errorText}`);
      }

      const data: GigaChatResponse = await response.json();
      
      console.log('‚úÖ GigaChat response received:', {
        choices: data.choices.length,
        totalTokens: data.usage.totalTokens
      });

      return data;

    } catch (error) {
      console.error('‚ùå GigaChat request failed:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
      console.log('üîÑ Using GigaChat fallback response');
      const lastMessage = messages[messages.length - 1];
      
      return {
        choices: [
          {
            message: {
              content: `–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ GigaChat –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –≠—Ç–æ fallback –æ—Ç–≤–µ—Ç –¥–ª—è: "${lastMessage.content}". –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –æ—Ç–≤–µ—Ç –æ—Ç GigaChat API.`,
              role: 'assistant'
            },
            finishReason: 'stop',
            index: 0
          }
        ],
        usage: {
          promptTokens: 0,
          completionTokens: 0,
          totalTokens: 0
        }
      };
    }
  }

  // –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
  async generateText(prompt: string, options?: {
    model?: string;
    temperature?: number;
    maxTokens?: number;
  }): Promise<string> {
    const messages: GigaChatMessage[] = [
      { role: 'user', content: prompt }
    ];

    const response = await this.generateContent(messages, options);
    return response.choices[0]?.message?.content || '';
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  async generateImage(request: ImageGenerationRequest): Promise<ImageGenerationResponse> {
    try {
      console.log('üé® Generating image with GigaChat:', request);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const detailedPrompt = this.buildImagePrompt(request);
      
      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const messages: GigaChatMessage[] = [
        {
          role: 'system',
          content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–æ–¥–Ω–æ–π –æ–¥–µ–∂–¥—ã. –°–æ–∑–¥–∞–≤–∞–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ, –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª—é–¥–µ–π –≤ —Å—Ç–∏–ª—å–Ω–æ–π –æ–¥–µ–∂–¥–µ.'
        },
        {
          role: 'user',
          content: `–°–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${detailedPrompt}`
        }
      ];

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const response = await fetch(`${this.proxyUrl}/images`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          prompt: detailedPrompt,
          style: request.style || 'realistic',
          quality: request.quality || 'high',
          size: request.size || '1024x1024',
          aspectRatio: request.aspectRatio || '1:1',
          bodyType: request.bodyType,
          clothingStyle: request.clothingStyle,
          colorScheme: request.colorScheme
        }),
        timeout: 60000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Image generation failed: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      
      if (data.success && data.imageUrl) {
        console.log('‚úÖ Image generated successfully');
        return {
          success: true,
          imageUrl: data.imageUrl,
          imageData: data.imageData,
          usage: data.usage
        };
      } else {
        throw new Error(data.error || 'Image generation failed');
      }

    } catch (error) {
      console.error('‚ùå Image generation failed:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        imageUrl: this.getFallbackImageUrl(request)
      };
    }
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  private buildImagePrompt(request: ImageGenerationRequest): string {
    const { prompt, bodyType, clothingStyle, colorScheme } = request;
    
    let detailedPrompt = prompt;
    
    if (bodyType) {
      detailedPrompt += ` –ß–µ–ª–æ–≤–µ–∫ —Å —Ç–∏–ø–æ–º —Ñ–∏–≥—É—Ä—ã: ${bodyType}.`;
    }
    
    if (clothingStyle) {
      detailedPrompt += ` –°—Ç–∏–ª—å –æ–¥–µ–∂–¥—ã: ${clothingStyle}.`;
    }
    
    if (colorScheme) {
      detailedPrompt += ` –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: ${colorScheme}.`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É
    detailedPrompt += ' –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º, —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º. –û–¥–µ–∂–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–∏–ª—å–Ω–æ–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π.';
    
    return detailedPrompt;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  private getFallbackImageUrl(request: ImageGenerationRequest): string {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return '/placeholder.svg';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
  async getModels(): Promise<any[]> {
    try {
      const response = await fetch(`${this.proxyUrl}/models`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        timeout: 10000
      });

      if (!response.ok) {
        throw new Error(`Failed to get models: ${response.status}`);
      }

      const data = await response.json();
      return data.data || [];

    } catch (error) {
      console.error('‚ùå Failed to get GigaChat models via proxy:', error);
      return [];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
  async testConnection(): Promise<boolean> {
    try {
      console.log('üîç Testing GigaChat connection...');
      
      // Check if we have a fallback token
      if (this.accessToken === 'fallback_token') {
        console.log('‚ö†Ô∏è GigaChat authentication failed, but returning true for fallback mode');
        return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è fallback —Ä–µ–∂–∏–º–∞
      }
      
      const models = await this.getModels();
      const hasModels = models.length > 0;
      
      console.log(`‚úÖ GigaChat connection test: ${hasModels ? 'SUCCESS' : 'NO MODELS'}`);
      console.log(`üìä Available models: ${models.length}`);
      
      if (hasModels) {
        models.forEach(model => {
          console.log(`   - ${model.id}: ${model.object}`);
        });
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –º–æ–¥–µ–ª–µ–π, –Ω–æ –µ—Å—Ç—å fallback, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
      if (!hasModels) {
        console.log('‚ö†Ô∏è No models found, but GigaChat will work in fallback mode');
        return true;
      }
      
      return hasModels;

    } catch (error) {
      console.error('‚ùå GigaChat connection test failed:', error);
      console.log('‚ö†Ô∏è GigaChat will work in fallback mode');
      return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è fallback —Ä–µ–∂–∏–º–∞
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  async supportsImageGeneration(): Promise<boolean> {
    try {
      const response = await fetch(`${this.proxyUrl}/capabilities`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        timeout: 10000
      });

      if (response.ok) {
        const data = await response.json();
        return data.supportsImages || false;
      }
      
      return false;
    } catch (error) {
      console.error('‚ùå Failed to check image generation support:', error);
      return false;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
export function createGigaChatService(): GigaChatService | null {
  const clientId = import.meta.env.VITE_GIGACHAT_CLIENT_ID;
  const clientSecret = import.meta.env.VITE_GIGACHAT_CLIENT_SECRET;

  if (!clientId || !clientSecret) {
    console.warn('‚ö†Ô∏è GigaChat credentials not found in environment variables');
    return null;
  }

  return new GigaChatService({
    clientId,
    clientSecret
  });
}
