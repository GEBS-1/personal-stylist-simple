// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GigaChat –æ—Ç –°–±–µ—Ä–∞
// –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.sber.ru/portal/products/gigachat

export interface GigaChatConfig {
  clientId: string;
  clientSecret: string;
  scope?: string;
  authUrl?: string;
  apiUrl?: string;
}

export interface GigaChatMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

export interface GigaChatRequest {
  model: string;
  messages: GigaChatMessage[];
  temperature?: number;
  maxTokens?: number;
  stream?: boolean;
}

export interface GigaChatResponse {
  choices: Array<{
    message: {
      content: string;
      role: string;
    };
    finishReason: string;
    index: number;
  }>;
  usage: {
    promptTokens: number;
    completionTokens: number;
    totalTokens: number;
  };
}

export class GigaChatService {
  private config: GigaChatConfig;
  private accessToken: string | null = null;
  private tokenExpiry: number = 0;
  private proxyUrl: string = 'http://localhost:3001/api/gigachat';

  constructor(config: GigaChatConfig) {
    this.config = {
      scope: 'GIGACHAT_API_PERS',
      authUrl: 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth',
      apiUrl: 'https://gigachat.devices.sberbank.ru/api/v1',
      ...config
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
  private async getAccessToken(): Promise<string> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
    if (this.accessToken && Date.now() < this.tokenExpiry) {
      return this.accessToken;
    }

    console.log('üîê Getting GigaChat access token via proxy...');

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      const response = await fetch(`${this.proxyUrl}/test`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        timeout: 15000
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`GigaChat proxy test failed: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      
      if (!data.success) {
        if (data.fallback) {
          console.log('‚ö†Ô∏è GigaChat authentication failed, using fallback mode');
          this.accessToken = 'fallback_token';
          this.tokenExpiry = Date.now() + (3600 * 1000); // 1 —á–∞—Å
          return this.accessToken;
        }
        throw new Error(`GigaChat proxy error: ${data.error}`);
      }

      // –ü—Ä–æ–∫—Å–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω
      this.accessToken = 'proxy_token';
      this.tokenExpiry = Date.now() + (3600 * 1000); // 1 —á–∞—Å

      console.log('‚úÖ GigaChat proxy connection successful');
      return this.accessToken;

    } catch (error) {
      console.error('‚ùå Failed to connect to GigaChat proxy:', error);
      throw error;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ RqUID
  private generateRqUID(): string {
    return `uid_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat
  async generateContent(
    messages: GigaChatMessage[],
    options: {
      model?: string;
      temperature?: number;
      maxTokens?: number;
    } = {}
  ): Promise<GigaChatResponse> {
    try {
      const token = await this.getAccessToken();
      
      const requestBody: GigaChatRequest = {
        model: options.model || 'GigaChat:latest',
        messages,
        temperature: options.temperature || 0.7,
        maxTokens: options.maxTokens || 1000,
        stream: false
      };

      console.log('ü§ñ Sending request to GigaChat:', {
        model: requestBody.model,
        messagesCount: messages.length,
        temperature: requestBody.temperature
      });

      const response = await fetch(`${this.proxyUrl}/chat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          messages: requestBody.messages,
          model: requestBody.model,
          temperature: requestBody.temperature,
          max_tokens: requestBody.maxTokens
        }),
        timeout: 30000
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå GigaChat API error:', errorText);
        
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π
        if (response.status === 401) {
          console.log('üîÑ Token expired, refreshing...');
          this.accessToken = null;
          this.tokenExpiry = 0;
          return this.generateContent(messages, options);
        }
        
        throw new Error(`GigaChat API error: ${response.status} - ${errorText}`);
      }

      const data: GigaChatResponse = await response.json();
      
      console.log('‚úÖ GigaChat response received:', {
        choices: data.choices.length,
        totalTokens: data.usage.totalTokens
      });

      return data;

    } catch (error) {
      console.error('‚ùå GigaChat request failed:', error);
      throw error;
    }
  }

  // –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
  async generateText(prompt: string, options?: {
    model?: string;
    temperature?: number;
    maxTokens?: number;
  }): Promise<string> {
    const messages: GigaChatMessage[] = [
      { role: 'user', content: prompt }
    ];

    const response = await this.generateContent(messages, options);
    return response.choices[0]?.message?.content || '';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
  async getModels(): Promise<any[]> {
    try {
      const response = await fetch(`${this.proxyUrl}/models`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        timeout: 10000
      });

      if (!response.ok) {
        throw new Error(`Failed to get models: ${response.status}`);
      }

      const data = await response.json();
      return data.data || [];

    } catch (error) {
      console.error('‚ùå Failed to get GigaChat models via proxy:', error);
      return [];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
  async testConnection(): Promise<boolean> {
    try {
      console.log('üîç Testing GigaChat connection...');
      
      // Check if we have a fallback token
      if (this.accessToken === 'fallback_token') {
        console.log('‚ö†Ô∏è GigaChat authentication failed, returning false to trigger fallback');
        return false;
      }
      
      const models = await this.getModels();
      const hasModels = models.length > 0;
      
      console.log(`‚úÖ GigaChat connection test: ${hasModels ? 'SUCCESS' : 'NO MODELS'}`);
      console.log(`üìä Available models: ${models.length}`);
      
      if (hasModels) {
        models.forEach(model => {
          console.log(`   - ${model.id}: ${model.object}`);
        });
      }
      
      return hasModels;

    } catch (error) {
      console.error('‚ùå GigaChat connection test failed:', error);
      return false;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
export function createGigaChatService(): GigaChatService | null {
  const clientId = import.meta.env.VITE_GIGACHAT_CLIENT_ID;
  const clientSecret = import.meta.env.VITE_GIGACHAT_CLIENT_SECRET;

  if (!clientId || !clientSecret) {
    console.warn('‚ö†Ô∏è GigaChat credentials not found in environment variables');
    return null;
  }

  return new GigaChatService({
    clientId,
    clientSecret
  });
}
