// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GigaChat –æ—Ç –°–±–µ—Ä–∞
// –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.sber.ru/portal/products/gigachat

export interface GigaChatConfig {
  clientId: string;
  clientSecret: string;
  scope?: string;
  authUrl?: string;
  apiUrl?: string;
}

export interface GigaChatMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

export interface GigaChatRequest {
  model: string;
  messages: GigaChatMessage[];
  temperature?: number;
  maxTokens?: number;
  stream?: boolean;
}

export interface GigaChatResponse {
  choices: Array<{
    message: {
      content: string;
      role: string;
    };
    finishReason: string;
    index: number;
  }>;
  usage: {
    promptTokens: number;
    completionTokens: number;
    totalTokens: number;
  };
}

// –ù–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export interface ImageGenerationRequest {
  prompt: string;
  style?: string;
  quality?: 'standard' | 'high';
  size?: '1024x1024' | '1792x1024' | '1024x1792';
  aspectRatio?: '1:1' | '16:9' | '9:16';
  bodyType?: string;
  clothingStyle?: string;
  colorScheme?: string;
}

export interface ImageGenerationResponse {
  success: boolean;
  imageUrl?: string;
  imageData?: string; // base64
  error?: string;
  usage?: {
    promptTokens: number;
    completionTokens: number;
    totalTokens: number;
  };
}

export class GigaChatService {
  private config: GigaChatConfig;
  private accessToken: string | null = null;
  private tokenExpiry: number = 0;
  private proxyUrl: string = 'http://localhost:3001/api/gigachat';
  private connectionTestCache: { available: boolean; timestamp: number } | null = null;
  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  constructor(config: GigaChatConfig) {
    this.config = {
      scope: 'GIGACHAT_API_PERS',
      authUrl: 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth',
      apiUrl: 'https://gigachat.devices.sberbank.ru/api/v1',
      ...config
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
  private async getAccessToken(): Promise<string> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
    if (this.accessToken && Date.now() < this.tokenExpiry) {
      return this.accessToken;
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      const response = await fetch(`${this.proxyUrl}/test`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        timeout: 10000 // –£–º–µ–Ω—å—à–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
      });

      if (!response.ok) {
        throw new Error(`GigaChat proxy test failed: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.success) {
        if (data.fallback) {
          this.accessToken = 'fallback_token';
          this.tokenExpiry = Date.now() + (3600 * 1000); // 1 —á–∞—Å
          return this.accessToken;
        }
        throw new Error(`GigaChat proxy error: ${data.error}`);
      }

      // –ü—Ä–æ–∫—Å–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω
      this.accessToken = 'proxy_token';
      this.tokenExpiry = Date.now() + (3600 * 1000); // 1 —á–∞—Å

      return this.accessToken;

    } catch (error) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      this.accessToken = 'fallback_token';
      this.tokenExpiry = Date.now() + (3600 * 1000);
      return this.accessToken;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ RqUID
  private generateRqUID(): string {
    return `uid_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat
  async generateContent(
    messages: GigaChatMessage[],
    options: {
      model?: string;
      temperature?: number;
      maxTokens?: number;
    } = {}
  ): Promise<GigaChatResponse> {
    try {
      const token = await this.getAccessToken();

      const requestBody: GigaChatRequest = {
        model: options.model || 'GigaChat:latest',
        messages,
        temperature: options.temperature || 0.7,
        maxTokens: options.maxTokens || 1000,
        stream: false
      };

      console.log('ü§ñ Sending request to GigaChat:', {
        model: requestBody.model,
        messagesCount: messages.length,
        temperature: requestBody.temperature
      });

      const response = await fetch(`${this.proxyUrl}/chat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          messages: requestBody.messages,
          model: requestBody.model,
          temperature: requestBody.temperature,
          max_tokens: requestBody.maxTokens
        }),
        timeout: 30000
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå GigaChat API error:', errorText);
        
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π
        if (response.status === 401) {
          console.log('üîÑ Token expired, refreshing...');
          this.accessToken = null;
          this.tokenExpiry = 0;
          return this.generateContent(messages, options);
        }
        
        throw new Error(`GigaChat API error: ${response.status} - ${errorText}`);
      }

      const data: GigaChatResponse = await response.json();
      
      console.log('‚úÖ GigaChat response received:', {
        choices: data.choices.length,
        totalTokens: data.usage.totalTokens
      });

      return data;

    } catch (error) {
      console.error('‚ùå GigaChat request failed:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–º–Ω—ã–π fallback –æ—Ç–≤–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º JSON
      console.log('üîÑ Using GigaChat smart fallback response');
      const lastMessage = messages[messages.length - 1];
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π JSON –æ–±—Ä–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
      const fallbackOutfit = this.generateFallbackOutfit(lastMessage.content);
      
      return {
        choices: [
          {
            message: {
              content: fallbackOutfit,
              role: 'assistant'
            },
            finishReason: 'stop',
            index: 0
          }
        ],
        usage: {
          promptTokens: 0,
          completionTokens: 0,
          totalTokens: 0
        }
      };
    }
  }

  // –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
  async generateText(prompt: string, options?: {
    model?: string;
    temperature?: number;
    maxTokens?: number;
  }): Promise<string> {
    const messages: GigaChatMessage[] = [
      { role: 'user', content: prompt }
    ];

    const response = await this.generateContent(messages, options);
    return response.choices[0]?.message?.content || '';
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  async generateImage(request: ImageGenerationRequest): Promise<ImageGenerationResponse> {
    try {
      console.log('üé® Generating image with GigaChat:', request);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const detailedPrompt = this.buildImagePrompt(request);
      
      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const messages: GigaChatMessage[] = [
        {
          role: 'system',
          content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–æ–¥–Ω–æ–π –æ–¥–µ–∂–¥—ã. –°–æ–∑–¥–∞–≤–∞–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ, –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª—é–¥–µ–π –≤ —Å—Ç–∏–ª—å–Ω–æ–π –æ–¥–µ–∂–¥–µ.'
        },
        {
          role: 'user',
          content: `–°–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${detailedPrompt}`
        }
      ];

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const response = await fetch(`${this.proxyUrl}/images`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          prompt: detailedPrompt,
          style: request.style || 'realistic',
          quality: request.quality || 'high',
          size: request.size || '1024x1024',
          aspectRatio: request.aspectRatio || '1:1',
          bodyType: request.bodyType,
          clothingStyle: request.clothingStyle,
          colorScheme: request.colorScheme
        }),
        timeout: 60000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Image generation failed: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      
      if (data.success && data.imageUrl) {
        console.log('‚úÖ Image generated successfully');
        return {
          success: true,
          imageUrl: data.imageUrl,
          imageData: data.imageData,
          usage: data.usage
        };
      } else {
        throw new Error(data.error || 'Image generation failed');
      }

    } catch (error) {
      console.error('‚ùå Image generation failed:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        imageUrl: this.getFallbackImageUrl(request)
      };
    }
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  private buildImagePrompt(request: ImageGenerationRequest): string {
    const { prompt, bodyType, clothingStyle, colorScheme } = request;
    
    let detailedPrompt = prompt;
    
    if (bodyType) {
      detailedPrompt += ` –ß–µ–ª–æ–≤–µ–∫ —Å —Ç–∏–ø–æ–º —Ñ–∏–≥—É—Ä—ã: ${bodyType}.`;
    }
    
    if (clothingStyle) {
      detailedPrompt += ` –°—Ç–∏–ª—å –æ–¥–µ–∂–¥—ã: ${clothingStyle}.`;
    }
    
    if (colorScheme) {
      detailedPrompt += ` –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: ${colorScheme}.`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É
    detailedPrompt += ' –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º, —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º. –û–¥–µ–∂–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–∏–ª—å–Ω–æ–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π.';
    
    return detailedPrompt;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  private getFallbackImageUrl(request: ImageGenerationRequest): string {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return '/placeholder.svg';
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback –æ–±—Ä–∞–∑–∞
  private generateFallbackOutfit(prompt: string): string {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
    const isFemale = prompt.includes('–∂–µ–Ω—â–∏–Ω') || prompt.includes('–∂–µ–Ω—Å–∫');
    const bodyType = prompt.includes('hourglass') ? 'hourglass' : 
                    prompt.includes('rectangle') ? 'rectangle' : 
                    prompt.includes('triangle') ? 'triangle' : 'hourglass';
    const season = prompt.includes('summer') ? 'summer' : 
                  prompt.includes('winter') ? 'winter' : 
                  prompt.includes('autumn') ? 'autumn' : 'spring';
    const occasion = prompt.includes('casual') ? 'casual' : 
                    prompt.includes('business') ? 'business' : 
                    prompt.includes('evening') ? 'evening' : 'casual';

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const outfit = {
      name: `${season} ${occasion} –æ–±—Ä–∞–∑ –¥–ª—è ${isFemale ? '–∂–µ–Ω—â–∏–Ω—ã' : '–º—É–∂—á–∏–Ω—ã'}`,
      description: `–°—Ç–∏–ª—å–Ω—ã–π ${season} –æ–±—Ä–∞–∑ –¥–ª—è ${occasion} —Å–ª—É—á–∞—è, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã ${bodyType}`,
      items: [
        {
          category: "–í–µ—Ä—Ö",
          name: isFemale ? "–ë–ª—É–∑–∞ –∏–∑ —Ö–ª–æ–ø–∫–∞" : "–§—É—Ç–±–æ–ª–∫–∞ –∏–∑ —Ö–ª–æ–ø–∫–∞",
          description: `–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è ${isFemale ? '–±–ª—É–∑–∞' : '—Ñ—É—Ç–±–æ–ª–∫–∞'} –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Å–∫–∏`,
          colors: ["–±–µ–ª—ã–π", "–≥–æ–ª—É–±–æ–π"],
          style: "casual",
          fit: "regular",
          price: "1500 ‚ÇΩ"
        },
        {
          category: "–ù–∏–∑",
          name: isFemale ? "–î–∂–∏–Ω—Å—ã —Å–∫–∏–Ω–Ω–∏" : "–î–∂–∏–Ω—Å—ã –ø—Ä—è–º–æ–≥–æ –∫—Ä–æ—è",
          description: `–°—Ç–∏–ª—å–Ω—ã–µ –¥–∂–∏–Ω—Å—ã ${isFemale ? '–ø—Ä–∏—Ç–∞–ª–µ–Ω–Ω–æ–≥–æ' : '–ø—Ä—è–º–æ–≥–æ'} –∫—Ä–æ—è`,
          colors: ["—Å–∏–Ω–∏–π"],
          style: "casual",
          fit: "regular",
          price: "3000 ‚ÇΩ"
        },
        {
          category: "–û–±—É–≤—å",
          name: isFemale ? "–ë–∞–ª–µ—Ç–∫–∏" : "–ö—Ä–æ—Å—Å–æ–≤–∫–∏",
          description: `–£–¥–æ–±–Ω–∞—è ${isFemale ? '–æ–±—É–≤—å' : '–æ–±—É–≤—å'} –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Å–∫–∏`,
          colors: ["–±–µ–ª—ã–π"],
          style: "casual",
          fit: "regular",
          price: "2500 ‚ÇΩ"
        },
        {
          category: "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
          name: isFemale ? "–°—É–º–∫–∞ —á–µ—Ä–µ–∑ –ø–ª–µ—á–æ" : "–†—é–∫–∑–∞–∫",
          description: `–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π ${isFemale ? '–∞–∫—Å–µ—Å—Å—É–∞—Ä' : '–∞–∫—Å–µ—Å—Å—É–∞—Ä'} –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è`,
          colors: ["—á–µ—Ä–Ω—ã–π"],
          style: "casual",
          fit: "regular",
          price: "2000 ‚ÇΩ"
        }
      ],
      styleNotes: `–û–±—Ä–∞–∑ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è ${occasion} —Å–ª—É—á–∞—è –≤ ${season} —Å–µ–∑–æ–Ω. –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å–æ—á–µ—Ç–∞—é—Ç—Å—è –º–µ–∂–¥—É —Å–æ–±–æ–π –∏ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã ${bodyType}.`,
      colorPalette: ["–±–µ–ª—ã–π", "–≥–æ–ª—É–±–æ–π", "—Å–∏–Ω–∏–π", "—á–µ—Ä–Ω—ã–π"],
      totalPrice: "9000 ‚ÇΩ",
      whyItWorks: `–û–±—Ä–∞–∑ —Å–æ–∑–¥–∞–Ω —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã ${bodyType}, —Å–µ–∑–æ–Ω–∞ ${season} –∏ –ø–æ–≤–æ–¥–∞ ${occasion}. –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è –ø–æ —Ü–≤–µ—Ç—É –∏ —Å—Ç–∏–ª—é.`
    };

    return JSON.stringify(outfit, null, 2);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
  async getModels(): Promise<any[]> {
    try {
      const response = await fetch(`${this.proxyUrl}/models`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        timeout: 10000
      });

      if (!response.ok) {
        throw new Error(`Failed to get models: ${response.status}`);
      }

      const data = await response.json();
      return data.data || [];

    } catch (error) {
      console.error('‚ùå Failed to get GigaChat models via proxy:', error);
      return [];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
  async testConnection(): Promise<boolean> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.connectionTestCache && Date.now() - this.connectionTestCache.timestamp < this.CACHE_DURATION) {
      return this.connectionTestCache.available;
    }
    
    try {
      // Check if we have a fallback token
      if (this.accessToken === 'fallback_token') {
        this.connectionTestCache = { available: true, timestamp: Date.now() };
        return true;
      }
      
      const models = await this.getModels();
      const hasModels = models.length > 0;
      
      const isAvailable = hasModels || this.accessToken === 'fallback_token';
      this.connectionTestCache = { available: isAvailable, timestamp: Date.now() };
      
      return isAvailable;

    } catch (error) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è fallback
      this.connectionTestCache = { available: true, timestamp: Date.now() };
      return true;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  async supportsImageGeneration(): Promise<boolean> {
    try {
      const response = await fetch(`${this.proxyUrl}/capabilities`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        timeout: 10000
      });

      if (response.ok) {
        const data = await response.json();
        return data.supportsImages || false;
      }
      
      return false;
    } catch (error) {
      console.error('‚ùå Failed to check image generation support:', error);
      return false;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
export function createGigaChatService(): GigaChatService | null {
  const clientId = import.meta.env.VITE_GIGACHAT_CLIENT_ID;
  const clientSecret = import.meta.env.VITE_GIGACHAT_CLIENT_SECRET;

  if (!clientId || !clientSecret) {
    console.warn('‚ö†Ô∏è GigaChat credentials not found in environment variables');
    return null;
  }

  return new GigaChatService({
    clientId,
    clientSecret
  });
}
