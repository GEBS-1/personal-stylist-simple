// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GigaChat API
const fs = require('fs');
const path = require('path');
const https = require('https');
const fetch = require('node-fetch');

// –°–æ–∑–¥–∞–µ–º HTTPS –∞–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
const httpsAgent = new https.Agent({
  rejectUnauthorized: false
});

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const envPath = path.join(__dirname, '.env');
let clientId = '';
let clientSecret = '';

if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  const clientIdMatch = envContent.match(/VITE_GIGACHAT_CLIENT_ID=(.+)/);
  const clientSecretMatch = envContent.match(/VITE_GIGACHAT_CLIENT_SECRET=(.+)/);
  
  if (clientIdMatch) clientId = clientIdMatch[1].trim();
  if (clientSecretMatch) clientSecret = clientSecretMatch[1].trim();
}

if (!clientId || !clientSecret) {
  console.log('‚ùå GigaChat credentials not found in .env file');
  console.log('üí° Add the following to your .env file:');
  console.log('VITE_GIGACHAT_CLIENT_ID=your_client_id_here');
  console.log('VITE_GIGACHAT_CLIENT_SECRET=your_client_secret_here');
  process.exit(1);
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GigaChat
const config = {
  clientId,
  clientSecret,
  scope: 'GIGACHAT_API_PERS',
  authUrl: 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth',
  apiUrl: 'https://gigachat.devices.sberbank.ru/api/v1'
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ RqUID
function generateRqUID() {
  return `uid_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
async function getAccessToken() {
  console.log('üîê Getting GigaChat access token...');
  
  try {
    const authData = new URLSearchParams({
      scope: config.scope
    });

    const response = await fetch(config.authUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'RqUID': generateRqUID(),
        'Authorization': `Basic ${Buffer.from(`${config.clientId}:${config.clientSecret}`).toString('base64')}`
      },
      body: authData.toString(),
      agent: httpsAgent
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`GigaChat auth failed: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    
    if (!data.access_token) {
      throw new Error('No access token in GigaChat response');
    }

    console.log('‚úÖ GigaChat access token obtained successfully');
    return data.access_token;

  } catch (error) {
    console.error('‚ùå Failed to get GigaChat access token:', error);
    throw error;
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function testConnection() {
  try {
    console.log('üîç Testing GigaChat connection...');
    
    const token = await getAccessToken();
    
    const response = await fetch(`${config.apiUrl}/models`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'RqUID': generateRqUID()
      },
      agent: httpsAgent
    });

    if (!response.ok) {
      throw new Error(`Failed to get models: ${response.status}`);
    }

    const data = await response.json();
    const models = data.data || [];
    
    console.log(`‚úÖ GigaChat connection test: SUCCESS`);
    console.log(`üìä Available models: ${models.length}`);
    
    if (models.length > 0) {
      models.forEach(model => {
        console.log(`   - ${model.id}: ${model.object}`);
      });
    }
    
    return { success: true, models, token };

  } catch (error) {
    console.error('‚ùå GigaChat connection test failed:', error);
    return { success: false, error: error.message };
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
async function testTextGeneration(token) {
  try {
    console.log('\nü§ñ Testing GigaChat text generation...');
    
    const messages = [
      {
        role: 'user',
        content: '–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–∑ –æ–¥–µ–∂–¥—ã –¥–ª—è –∂–µ–Ω—â–∏–Ω—ã –≤ —Å—Ç–∏–ª–µ casual –Ω–∞ –≤–µ—Å–Ω—É. –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª—è–º–∏: name, description, items (–º–∞—Å—Å–∏–≤ —Å –ø–æ–ª—è–º–∏ category, name, price), totalPrice.'
      }
    ];

    const requestBody = {
      model: 'GigaChat:latest',
      messages,
      temperature: 0.7,
      maxTokens: 1000,
      stream: false
    };

    const response = await fetch(`${config.apiUrl}/chat/completions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
        'RqUID': generateRqUID()
      },
      body: JSON.stringify(requestBody),
      agent: httpsAgent
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`GigaChat API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content;
    
    if (!content) {
      throw new Error('Empty response from GigaChat');
    }

    console.log('‚úÖ GigaChat text generation test: SUCCESS');
    console.log(`üìù Response length: ${content.length} characters`);
    console.log(`üî¢ Total tokens: ${data.usage.totalTokens}`);
    console.log('\nüìÑ Response preview:');
    console.log(content.substring(0, 200) + '...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç JSON
    try {
      JSON.parse(content);
      console.log('‚úÖ Response contains valid JSON');
    } catch (e) {
      console.log('‚ö†Ô∏è Response is not valid JSON (this might be expected)');
    }
    
    return { success: true, content, usage: data.usage };

  } catch (error) {
    console.error('‚ùå GigaChat text generation test failed:', error);
    return { success: false, error: error.message };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üß™ Starting GigaChat API tests...\n');
  
  // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const connectionTest = await testConnection();
  
  if (!connectionTest.success) {
    console.log('\n‚ùå Connection test failed, stopping tests');
    return;
  }
  
  // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
  const generationTest = await testTextGeneration(connectionTest.token);
  
  // –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('\nüìä Test Results Summary:');
  console.log('='.repeat(50));
  console.log(`üîó Connection: ${connectionTest.success ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);
  console.log(`ü§ñ Generation: ${generationTest.success ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);
  
  if (connectionTest.models) {
    console.log(`üìä Available models: ${connectionTest.models.length}`);
  }
  
  if (generationTest.usage) {
    console.log(`üî¢ Tokens used: ${generationTest.usage.totalTokens}`);
  }
  
  if (connectionTest.success && generationTest.success) {
    console.log('\nüéâ All tests passed! GigaChat is ready to use.');
  } else {
    console.log('\n‚ö†Ô∏è Some tests failed. Check the configuration.');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().catch(console.error);
